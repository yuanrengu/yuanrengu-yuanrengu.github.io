<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猿人谷</title>
  
  <subtitle>技术成长，没有捷径，唯有积累</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanrengu.com/"/>
  <updated>2020-07-28T06:01:26.543Z</updated>
  <id>https://yuanrengu.com/</id>
  
  <author>
    <name>猿人谷</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不用搜了，你想要的全在这里</title>
    <link href="https://yuanrengu.com/2020/7973a95d.html"/>
    <id>https://yuanrengu.com/2020/7973a95d.html</id>
    <published>2020-07-28T05:41:51.000Z</published>
    <updated>2020-07-28T06:01:26.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM从小白学成大佬"><a href="#JVM从小白学成大佬" class="headerlink" title="JVM从小白学成大佬"></a>JVM从小白学成大佬</h1><ul><li><a href="https://yuanrengu.com/2020/11ea27b.html">1.开篇</a></li><li><a href="https://yuanrengu.com/2020/d6aff7a6.html">2.Java虚拟机运行时数据区</a></li><li><a href="https://yuanrengu.com/2020/22810993.html">3.深入解析强引用、软引用、弱引用、幻象引用</a></li><li><a href="https://yuanrengu.com/2020/a959fab8.html">4.Java虚拟机何谓垃圾及垃圾回收算法</a></li><li><a href="https://yuanrengu.com/2020/9ed477f0.html">5.垃圾收集器及内存分配策略</a></li><li><a href="https://yuanrengu.com/2020/d386b2ef.html">6.创建对象及对象的访问定位</a></li><li><a href="https://yuanrengu.com/2020/1977ac11.html">【面试必备】小伙伴栽在了JVM的内存分配策略。。。</a></li><li><a href="https://yuanrengu.com/2020/4c889127.html">弄明白CMS和G1，就靠这一篇了</a></li></ul><h1 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h1><ul><li><a href="https://yuanrengu.com/2020/3bf330a5.html">1.ZooKeeper单机版、伪集群和集群环境搭建</a></li><li><a href="https://yuanrengu.com/2020/469cbe7.html">2.用Java实现ZooKeeper API的调用</a></li><li><a href="https://yuanrengu.com/2020/7bf54924.html">3.ZooKeeper源码环境搭建</a></li></ul><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><ul><li><a href="https://yuanrengu.com/2020/fb519654.html">深入浅出Mysql索引的那些事儿</a></li><li><a href="https://yuanrengu.com/2020/c8872fad.html">【黑魔法】Covering Indexes、STRAIGHT_JOIN</a></li><li><a href="https://yuanrengu.com/2020/c00d182e.html">性能对比：Count(字段)、Count（主键）、Count（1）、Count（*）</a></li><li><a href="https://yuanrengu.com/2020/e867cb8.html">Mysql中Left Join、Right Join、Inner Join的区别</a></li><li><a href="https://yuanrengu.com/2020/9cfe2ad6.html">Mysql字符串截取总结：Left()、Right()、Substring()、Substring_index()</a></li></ul><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><ul><li><a href="https://yuanrengu.com/2020/77eef79f.html">面试官，不要再问我三次握手和四次挥手</a></li></ul><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><ul><li><a href="https://yuanrengu.com/2020/ba184259.html">HashMap在Jdk1.7和1.8中的实现</a></li><li><a href="https://yuanrengu.com/2020/baec5dff.html">Lombok介绍、使用方法和总结</a></li><li><a href="https://yuanrengu.com/2020/513ead88.html">获取对象属性类型、属性名称、属性值的研究：反射和JEXL解析引擎</a></li><li><a href="https://yuanrengu.com/2020/6bbb74ca.html">Integer和Integer比较以及Integer和Int的比较分析</a></li><li><a href="https://yuanrengu.com/2020/4a91d705.html">内存泄漏与内存溢出</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JVM从小白学成大佬&quot;&gt;&lt;a href=&quot;#JVM从小白学成大佬&quot; class=&quot;headerlink&quot; title=&quot;JVM从小白学成大佬&quot;&gt;&lt;/a&gt;JVM从小白学成大佬&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yuanrengu.com/2
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="资源集合" scheme="https://yuanrengu.com/tags/%E8%B5%84%E6%BA%90%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>synchronized、Lock、ReentrantLock介绍</title>
    <link href="https://yuanrengu.com/2020/7691e770.html"/>
    <id>https://yuanrengu.com/2020/7691e770.html</id>
    <published>2020-04-01T06:48:54.000Z</published>
    <updated>2020-07-27T07:53:36.178Z</updated>
    
    <content type="html"><![CDATA[<p>来源：<a href="http://www.cnblogs.com/dolphin0520/p/3923167.html" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/p/3923167.html</a></p><h1 id="一-synchronized的缺陷"><a href="#一-synchronized的缺陷" class="headerlink" title="一.synchronized的缺陷"></a>一.synchronized的缺陷</h1><p>synchronized是java中的一个关键字，也就是说是java语言内置的特性。那么为什么会出现Lock呢？</p><p>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p><ol><li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li><li>线程执行发生异常，此时JVM会让线程自动释放锁。</li></ol><p>因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</p><p>再举个例子：当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。</p><p>但是采用synchronized关键字来实现同步的话，就会导致一个问题：如果多个线程都只是进行读操作，所以当一个线程在进行读操作时，其他线程只能等待无法进行读操作。因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。另外，通过Lock可以知道线程有没有成功获取到锁，这个是synchronized无法办到的。</p><p>总结一下，通过Lock提供了比synchronized更多的功能。但是要注意以下几点：</p><ul><li>Lock不是java语言内置的，synchronized是java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</li><li>Lock和synchronized有一个非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</li></ul><h1 id="二-java-util-concurrent-Lock包下常用的类"><a href="#二-java-util-concurrent-Lock包下常用的类" class="headerlink" title="二.java.util.concurrent.Lock包下常用的类"></a>二.java.util.concurrent.Lock包下常用的类</h1><p>下面我们就来探讨一下java.util.concurrent.lock包中常用的类和接口。</p><h2 id="1-Lock"><a href="#1-Lock" class="headerlink" title="1.Lock"></a>1.Lock</h2><p>首先要说明的就是Lock，通过查看Lock的源码可知，Lock是一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来逐个讲述Lock接口中每个方法的使用，lock(),tryLock(),tryLock(long time, TimeUnit unit)和lockInterruptibly()是用来获取锁的。unLock()方法是用来释放锁的。</p><p>在Lock中声明了四个方法来获取锁，那么这四个方法有何区别呢？</p><p>首先<code>lock()</code>方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。</p><p>由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被释放，以防死锁的发生。通常使用Lock来进行同步的话，是以下面这种形式去使用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = ...;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">     </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();   <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tryLock()</code>方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回，在拿不到锁时不会一直在那等待。</p><p><code>tryLock(long time, TimeUnit unit)</code>方法和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果一开始拿到锁或者在等待时间内拿到了锁，则返回true。</p><p>所以，一般情况下通过tryLock来获取锁时是这样使用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = ...;</span><br><span class="line"><span class="keyword">if</span>(lock.tryLock()) &#123;</span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="comment">//处理任务</span></span><br><span class="line">     &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">         </span><br><span class="line">     &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">         lock.unlock();   <span class="comment">//释放锁</span></span><br><span class="line">     &#125; </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果不能获取锁，则直接做其他事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lockInterruptibly()</code>方法比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就是说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。</p><p>由于lockInterruptibly()的声明中抛出了异常，所以lock.lockInterruptibly()必须放在try块中或者在调用lockInterruptibly()的方法外声明抛出InterruptedException。</p><p>因此lockInterruptibly()一般的使用形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">     <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>当一个线程获取了锁之后，是不会被interrupt()方法中断的</code>。因为本身在前面的文章中讲过单独调用interrupt()方法不能中断正在运行过程中的线程，只能中断阻塞过程中的线程。因此当通过lockInterruptibly()方法获取某个锁时，如果不能获取到，只有进行等待的情况下，是可以响应中断的。</p><p>而用synchronized修饰的话，当一个线程处于等待某个锁的状态，是无法被中断的，只有一直等待下去。</p><h2 id="2-ReentrantLock"><a href="#2-ReentrantLock" class="headerlink" title="2.ReentrantLock"></a>2.ReentrantLock</h2><p>ReentrantLock，意思是“可重入锁”，关于可重入锁的概念在下一节讲述。ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。</p><p>基本语法上，ReentrantLock与synchronized很相似，它们都具备一样的线程重入特性，只是代码写法上有点区别而已。一个表现为<strong>API层面</strong>的互斥锁（Lock），一个表现为<strong>原生语法层面</strong>的互斥锁（synchronized）。</p><p>ReentrantLock相对synchronized而言还是增加了一些高级功能，主要有以下三项：</p><ul><li>等待可中断：当持有锁的线程长期不释放锁时，正在等待的线程可以选择放弃等待，改为处理其他事情，它对处理执行时间非常长的同步块很有帮助。而在等待由synchronized产生的互斥锁时，会一直阻塞，是不能被中断的。</li><li>可实现公平锁：多个线程赶在等待同一个锁时，必须按照申请锁的时间顺序排队等待，而非公平锁则不保证这点，在锁释放时，任何一个等待锁的线程都有机会获得锁。synchronized中的锁是非公平锁，ReentrantLock默认情况下也是非公平锁，但可以通过构造方法ReentrantLock(true)来要求使用公平锁。</li><li>锁可以绑定多个条件：ReentrantLock对象可以同时绑定多个Condition对象（条件变量或条件队列），而在synchronized中，锁对象的wait()和notify()或notifyAll()方法可以实现一个隐含条件，但如果要和多于一个的条件关联的时候，就不得不额外地添加一个锁，而ReentrantLock则无需这么做，只需要多次调用newCondition()方法即可。而且我们还可以通过绑定Condition对象来判断当前线程通知的是哪些线程（即与Condition对象绑定在一起的其它线程）。</li></ul><p>下面通过一些实例具体看一下如何使用ReentrantLock。</p><p>例子1，lock()的正确使用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">                arrayList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想一下这段代码的输出结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span>得到了锁</span><br><span class="line">Thread-<span class="number">1</span>得到了锁</span><br><span class="line">Thread-<span class="number">0</span>释放了锁</span><br><span class="line">Thread-<span class="number">1</span>释放了锁</span><br></pre></td></tr></table></figure><p>也许有朋友会问，怎么会输出这个结果？第二个线程怎么会在第一个线程释放锁之前得到了锁？原因在于，insert方法中的lock变量是局部变量，每个线程执行该方法时都会保存一个副本，那么理所当然每个线程执行到lock.lock()处获取的是不同的锁，所以就不会发生冲突。</p><p>知道了原因改起来就比较容易了，只需将lock声明为类的属性即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">                arrayList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就是正确使用Lock的方法。</p><p>例子2，tryLock()的使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">                    arrayList.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"获取锁失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span>得到了锁</span><br><span class="line">Thread-<span class="number">1</span>获取锁失败</span><br><span class="line">Thread-<span class="number">0</span>释放了锁</span><br></pre></td></tr></table></figure><p> 例子3，lockInterruptibly()响应中断的使用方法：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(test);</span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(test);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        thread2.interrupt();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        lock.lockInterruptibly();   <span class="comment">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">for</span>( ；  ；) &#123;</span><br><span class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//插入数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"执行finally"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test test = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.insert(Thread.currentThread());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"被中断"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 运行之后，发现thread2能够被正确中断。</p><h2 id="3-ReadWriteLock"><a href="#3-ReadWriteLock" class="headerlink" title="3.ReadWriteLock"></a>3.ReadWriteLock</h2><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for reading.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。</p><h2 id="4-ReentrantReadWriteLock"><a href="#4-ReentrantReadWriteLock" class="headerlink" title="4.ReentrantReadWriteLock"></a>4.ReentrantReadWriteLock</h2><p>ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p><p>不过要注意的是，如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</p><h2 id="5-Lock和synchronized的选择"><a href="#5-Lock和synchronized的选择" class="headerlink" title="5.Lock和synchronized的选择"></a>5.Lock和synchronized的选择</h2><p>总结来说，Lock和synchronized有以下几点不同：</p><ul><li>Lock是一个接口，而synchronized是java中的关键字，synchronized是内置的语言实现；</li><li>synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unlock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</li><li>Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</li><li>通过Lock可以知道有没有成功获取锁，而synchronized却无法办到；</li><li>Lock可以提高多个线程进行读操作的效率。</li></ul><p>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p><h1 id="三-锁的相关概念介绍"><a href="#三-锁的相关概念介绍" class="headerlink" title="三.锁的相关概念介绍"></a>三.锁的相关概念介绍</h1><p>在前面介绍了Lock的基本使用，这一节来介绍一下与锁相关的几个概念。</p><h2 id="1-可重入锁"><a href="#1-可重入锁" class="headerlink" title="1.可重入锁"></a>1.可重入锁</h2><p>如果锁具备可重入性，则称为可重入锁。像synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外要给synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。看下面这段代码就明白了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中的两个方法method1和method2都用synchronized修饰了，假如某一时刻，线程A执行到了method1，此时线程A获取了这个对象的锁，而由于method2也是synchronized方法。假如synchronized不具备可重入性，此时线程A需要重新申请锁。但是这就会造成要给问题，因为线程A已经持有了该对象的锁，而又在申请获取该对象的锁，这样就会线程A一直等待，永远不会获取到的锁。</p><p>而由于synchronized和Lock都具备可重入性，所以不会发生上述现象。</p><h2 id="2-可中断锁"><a href="#2-可中断锁" class="headerlink" title="2.可中断锁"></a>2.可中断锁</h2><p>可中断锁：顾名思义，就是可以相应中断的锁。</p><p>在java中，synchronized就不是可中断锁，而Lock是可中断锁。</p><p>如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。在前面演示lockInterruptibly()的用法时已经体现了Lock的可中断性。</p><h2 id="3-公平锁"><a href="#3-公平锁" class="headerlink" title="3.公平锁"></a>3.公平锁</h2><p>公平锁即尽量以请求锁的顺序来获取锁。比如同是有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该锁，这种就是公平锁。</p><p>非公平锁即无法保证锁的获取是按照请求锁的顺序进行的。这样就可能导致某个或者一些线程永远获取不到锁。</p><p>在java中，synchronized就是非公平锁，它无法保证等待的线程获取锁的顺序。</p><p>而对于ReentrantLock和ReentrantReadWriteLock，它默认情况下是非公平锁，但是可以设置为公平锁。</p><p>看一下这两个类的源代码就清楚了：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi55dWFucmVuZ3UuY29tL2ltZy8yMDIwMDMxMTE1MzQzMi5wbmc?x-oss-process=image/format,png" alt></p><p>在ReentrantLock中定义了2个静态内部类，一个是<code>NotFairSync</code>，一个是<code>FairSync</code>，分别用来实现<code>非公平锁</code>和<code>公平锁</code>。</p><p>我们可以在创建ReentrantLock对象时，通过以下方式来设置锁的公平性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>如果参数为true表示为公平锁，为false则表示非公平锁。默认情况下，如果使用无参构造器，则是非公平锁。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nkbi55dWFucmVuZ3UuY29tL2ltZy8yMDIwMDMxMTE1MzYzMi5wbmc?x-oss-process=image/format,png" alt><br>另外在ReentrantLock类中定义了很多方法，比如：</p><ul><li>isFair() :判断锁是否是公平锁</li><li>isLocked():判断锁是否被任何线程获取了</li><li>isHeldByCurrentThread():判断锁是否被当前线程获取了</li><li>hasQueuedThreads():判断是否有线程在等待该锁</li></ul><p>在ReentrantReadWriteLock中也有类似的方法，同样也可以设置为公平锁和非公平锁。不过要记住，ReentrantReadWriteLock并未实现Lock，它实现的是ReadWriteLock接口。</p><h2 id="4-读写锁"><a href="#4-读写锁" class="headerlink" title="4.读写锁"></a>4.读写锁</h2><p>读写锁将对一个资源（比如文件）的访问分成2个锁，一个读锁和一个写锁。正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。可以通过readLock()获取读锁，通过writeLock()获取写锁。上面的已经演示了读写锁的使用方法，在此不再赘述。</p><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h1><p>ReentrantLock是Lock的实现类，是一个互斥的同步器，在多线程高竞争条件下，ReentrantLock比synchronized有更加优异的性能表现。</p><h2 id="1-用法比较"><a href="#1-用法比较" class="headerlink" title="1.用法比较"></a>1.用法比较</h2><ul><li>Lock使用起来比较灵活，但是必须有释放锁的配合动作。</li><li>Lock必须手动获取与释放锁，而synchronized不需要手动释放和开启锁。</li><li>Lock只适用于代码块锁，而synchronized可用于修饰方法、代码块等。</li></ul><h2 id="2-特性比较"><a href="#2-特性比较" class="headerlink" title="2.特性比较"></a>2.特性比较</h2><p>ReentrantLock的优势体现在：</p><ul><li>具备尝试非阻塞地获取锁的特性：当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁</li><li>能被中断的获取锁的特性：当持有锁的线程长期不释放锁时，正在等待的线程可以选择放弃等待，改为处理其他事情它对处理执行时间非常长的同步块很有帮助。而在等待由synchronized产生的互斥锁时，会一直阻塞，是不能被中断的</li><li>超时获取锁的特性：在指定的时间范围内获取锁，如果截止时间到了仍无法获取锁，则返回</li></ul><h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h2><p>在使用ReentrantLock类的时候，一定要注意三点：</p><ul><li>在finally中释放锁，目的是保证在获取锁之后，最终能够被释放；</li><li>不要将获取锁的过程写在try块内，因为如果在获取锁时发生了异常，异常抛出的同时，也会导致锁无故被释放；</li><li>ReentrantLock提供了一个newCondition的方法，以便用户在同一锁的情况下可以根据不同的情况执行等待或唤醒的动作。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;来源：&lt;a href=&quot;http://www.cnblogs.com/dolphin0520/p/3923167.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/dolphin0520/p/392316
      
    
    </summary>
    
    
      <category term="并发编程" scheme="https://yuanrengu.com/categories/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="面试" scheme="https://yuanrengu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【黑魔法】Covering Indexes、STRAIGHT_JOIN</title>
    <link href="https://yuanrengu.com/2020/c8872fad.html"/>
    <id>https://yuanrengu.com/2020/c8872fad.html</id>
    <published>2020-03-17T08:08:44.000Z</published>
    <updated>2020-03-17T08:11:33.161Z</updated>
    
    <content type="html"><![CDATA[<p>今天给大家介绍两个黑魔法，这都是压箱底的法宝。大家在使用时，一定要弄清他们的适用场景及用法，用好了，就是一把开天斧，用不好那就是画蛇添足。自从看过耗子哥（左耳朵耗子）的博客，都会给对相应专题有兴趣的小伙伴列出几篇拓展文章，我觉得这种方式还是非常不错，所以这篇文章我也会列出几篇扩展的文章，供想更深入思考的小伙伴查阅。</p><p>可能有人会认为这两个用法会比较冷门，但是在跨系统调用api的过程中，表的数据量比较大时，sql查询性能太差，会导致接口响应超时，就会对相应的业务产生非常大的影响。<code>系统优化，大家千万不要以为只是后端的代码优化而已，sql的优化同样也是重点</code>。</p><h1 id="1-Covering-Indexes"><a href="#1-Covering-Indexes" class="headerlink" title="1 Covering Indexes"></a>1 Covering Indexes</h1><p>可能有小伙伴会问，Covering Indexes到底是什么神器呢？它又是如何来提升性能的呢？接下来我会用最通俗易懂的语言来进行介绍，毕竟不是每个程序猿都要像DBA那样深刻理解数据库，知道如何用以及如何用好神器才是最关键的。</p><p>Covering Indexes就是一个索引覆盖所有要查询的字段（ps：这句话我挖个坑，文末我来解释）。</p><blockquote><p>An index that contains all required information to resolve the query is known as a “Covering Index” – it completely covers the query.<br>Covering Index includes all the columns, the query refers to in the SELECT, JOIN, and WHERE clauses.</p></blockquote><p>由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><p>接下来我们通过一个非常简单的sql来进行分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> tablename <span class="keyword">WHERE</span> column3=xxx;</span><br></pre></td></tr></table></figure><p>你能想象将sql的执行时间从1.8秒，降到1.2秒，继续压榨到0.5，0.2…..，酣畅淋漓，怎一个爽字了得。就跟排兵布阵一样，打胜仗固然重要，但得想出成本最低效果最好的阵法，定会收获满满的成就感。</p><p>这条sql要如何来进行优化呢？第一反应可能就是说给“column3”加索引（普通索引或唯一索引）啊，没错，这样确实能在很大程度上提升这条sql的性能。</p><p>我们来分析下上面sql的执行计划：因为给“column3”建了索引，就会快速根据这个索引查询到符合条件的结果；然后再去这些符合条件的结果里查找所需的column1、column2字段；请注意，整个过程出现了两次查询，一次是查询索引，另一次查询结果的所需字段。</p><p>那能不能将上面说的执行计划再优化一下呢？大杀器Covering Indexes就是用来干这事的。给column3、column1、column2建个复合索引，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">index</span> index_column3 (column3，column1，column2) ;</span><br></pre></td></tr></table></figure><p><strong>这样就可以直接通过索引就能查询出符合条件的数据，而不必像上面那样先去查索引，然后再去查数据的两个过程</strong>。</p><p>光说不练那是假把式！小伙伴们可以用explain去试试上面的两种情况，如果执行复合索引后的情况，你会发现Extra里出现Using index。</p><p>刚开始我说挖了个坑，现在我把坑填上。既然神器Covering Indexes这么好用，以后select语句的我都不管三七二十一的都亮出神器。难不成你select *也要亮神器？一个表那么多字段，全建成索引？那索引文件会不堪重负的，这就会适得其反，带来一系列恶果的。索引文件过大会造成insert、update非常慢，你select倒是爽快了，不能不顾其他兄弟吧，不仗义的事咱不能干，切记！</p><p>如果看完这个分析还不过瘾，下面我给几篇扩展文章：<br><a href="https://www.c-sharpcorner.com/UploadFile/b075e6/improving-sql-performance-using-covering-indexes/" target="_blank" rel="noopener">https://www.c-sharpcorner.com/UploadFile/b075e6/improving-sql-performance-using-covering-indexes/</a><br><a href="https://www.red-gate.com/simple-talk/sql/learn-sql-server/using-covering-indexes-to-improve-query-performance/" target="_blank" rel="noopener">https://www.red-gate.com/simple-talk/sql/learn-sql-server/using-covering-indexes-to-improve-query-performance/</a><br><a href="https://stackoverflow.com/questions/609343/what-are-covering-indexes-and-covered-queries-in-sql-server" target="_blank" rel="noopener">https://stackoverflow.com/questions/609343/what-are-covering-indexes-and-covered-queries-in-sql-server</a><br><a href="https://stackoverflow.com/questions/62137/what-is-a-covered-index" target="_blank" rel="noopener">https://stackoverflow.com/questions/62137/what-is-a-covered-index</a></p><h1 id="2-STRAIGHT-JOIN"><a href="#2-STRAIGHT-JOIN" class="headerlink" title="2 STRAIGHT_JOIN"></a>2 STRAIGHT_JOIN</h1><p>接下来给大家下另一个性能提升神器-STRAIGHT_JOIN，在数据量大的联表查询中灵活运用的话，能大大缩短查询时间。</p><p>首先来解释下STRAIGHT_JOIN到底是用做什么的：</p><blockquote><p>STRAIGHT_JOIN is similar to JOIN, except that the left table is always read before the right table.<br>This can be used for those (few) cases for which the join optimizer puts the tables in the wrong order.</p></blockquote><p>意思就是说STRAIGHT_JOIN功能同join类似，但能让左边的表来驱动右边的表，能改表优化器对于联表查询的执行顺序。</p><p>接下来我们举个例子进行大致的分析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.*</span><br><span class="line"><span class="keyword">from</span> Table1 t1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Table2 t2</span><br><span class="line"><span class="keyword">on</span> t1.CommonID = t2.CommonID</span><br><span class="line"><span class="keyword">where</span> t1.FilterID = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上sql大数据量下执行需要30s，是不是很奇怪？明明Table1表的FilterID字段建了索引啊，Table1和Table2的CommonID也建了索引啊。通过explain来分析，你会发现执行计划中表的执行顺序是Table2-&gt;Table1。<code>这个时候要略微介绍下驱动表的概念，mysql中指定了连接条件时，满足查询条件的记录行数少的表为驱动表；如未指定查询条件，则扫描行数少的为驱动表。mysql优化器就是这么粗暴以小表驱动大表的方式来决定执行顺序的。</code></p><p>但如下sql的执行时间都少于1s：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.*</span><br><span class="line"><span class="keyword">from</span> Table1 t1</span><br><span class="line"><span class="keyword">where</span> t1.FilterID = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.*</span><br><span class="line"><span class="keyword">from</span> Table1 t1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Table2 t2</span><br><span class="line"><span class="keyword">on</span> t1.CommonID = t2.CommonID</span><br></pre></td></tr></table></figure><p>这个时候STRAIGHT_JOIN就派上用场，我们对sql进行改造如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.*</span><br><span class="line"><span class="keyword">from</span> Table1 t1</span><br><span class="line"><span class="keyword">STRAIGHT_JOIN</span>  Table2 t2</span><br><span class="line"><span class="keyword">on</span> t1.CommonID = t2.CommonID</span><br><span class="line"><span class="keyword">where</span> t1.FilterID = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>用explain进行分析，发现执行顺序为Table1-&gt;Table2，这时就由Table1来作为驱动表了，Table1中相应的索引也就用上了，执行时间竟然低于1s了。</p><p>分析到这里，必须要重点说下：</p><ul><li>STRAIGHT_JOIN只适用于inner join，并不能使用于left join，right join。（因为left join，right join已经代表指定了表的执行顺序）</li><li>尽可能让优化器去判断，因为大部分情况下mysql优化器是比人要聪明的。使用STRAIGHT_JOIN一定要慎重，因为啊部分情况下认为指定的执行顺序并不一定会比优化引擎要靠谱。</li></ul><p>扩展阅读：<br><a href="https://stackoverflow.com/questions/512294/when-to-use-straight-join-with-mysql" target="_blank" rel="noopener">https://stackoverflow.com/questions/512294/when-to-use-straight-join-with-mysql</a><br><a href="https://stackoverflow.com/questions/5818837/why-does-straight-join-so-drastically-improve-this-query-and-what-does-it-mean" target="_blank" rel="noopener">https://stackoverflow.com/questions/5818837/why-does-straight-join-so-drastically-improve-this-query-and-what-does-it-mean</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/join.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/join.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天给大家介绍两个黑魔法，这都是压箱底的法宝。大家在使用时，一定要弄清他们的适用场景及用法，用好了，就是一把开天斧，用不好那就是画蛇添足。自从看过耗子哥（左耳朵耗子）的博客，都会给对相应专题有兴趣的小伙伴列出几篇拓展文章，我觉得这种方式还是非常不错，所以这篇文章我也会列出几
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/categories/Mysql/"/>
    
    
      <category term="索引" scheme="https://yuanrengu.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>通过jstack与jmap分析一次线上故障</title>
    <link href="https://yuanrengu.com/2020/479c94ba.html"/>
    <id>https://yuanrengu.com/2020/479c94ba.html</id>
    <published>2020-03-05T03:12:09.000Z</published>
    <updated>2020-07-27T07:51:04.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源：<a href="https://www.cnblogs.com/kingszelda/p/9034191.html" target="_blank" rel="noopener">https://www.cnblogs.com/kingszelda/p/9034191.html</a></p></blockquote><h1 id="一、发现问题"><a href="#一、发现问题" class="headerlink" title="一、发现问题"></a>一、发现问题</h1><p>  下面是线上机器的cpu使用率，可以看到从4月8日开始，随着时间cpu使用率在逐步增高，最终使用率达到100%导致线上服务不可用，后面重启了机器后恢复。<br><img src="https://img-blog.csdnimg.cn/20200305105832365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="二、排查思路"><a href="#二、排查思路" class="headerlink" title="二、排查思路"></a>二、排查思路</h1><p>简单分析下可能出问题的地方，分为5个方向：</p><ol><li>系统本身代码问题</li><li>内部下游系统的问题导致的雪崩效应</li><li>上游系统调用量突增</li><li>http请求第三方的问题</li><li>机器本身的问题</li></ol><h1 id="三、开始排查"><a href="#三、开始排查" class="headerlink" title="三、开始排查"></a>三、开始排查</h1><ol><li><p>查看日志，没有发现集中的错误日志，初步排除代码逻辑处理错误。</p></li><li><p>首先联系了内部下游系统观察了他们的监控，发现一起正常。可以排除下游系统故障对我们的影响。</p></li><li><p>查看provider接口的调用量，对比7天没有突增，排除业务方调用量的问题。</p></li><li><p>查看tcp监控，TCP状态正常，可以排除是http请求第三方超时带来的问题。</p></li><li><p>查看机器监控，6台机器cpu都在上升，每个机器情况一样。排除机器故障问题。</p><p>即通过上述方法没有直接定位到问题。</p></li></ol><h1 id="四、解决方案"><a href="#四、解决方案" class="headerlink" title="四、解决方案"></a>四、解决方案</h1><ol><li><p>重启了6台中问题比较严重的5台机器，先恢复业务。保留一台现场，用来分析问题。</p></li><li><p>查看当前的tomcat线程pid<br><img src="https://img-blog.csdnimg.cn/2020030510595055.png" alt="在这里插入图片描述"></p></li><li><p>查看该pid下线程对应的系统占用情况。top -Hp 384</p><blockquote><p><code>top -Hp  进程pid</code>  //该进程下的线程进行观察</p></blockquote></li></ol><p>使用命令top -p <pid>，显示你的Java进程的内存情况，pid是你的java进程号，比如384。按H，获取每个线程的内存情况</pid></p><p><img src="https://img-blog.csdnimg.cn/20200305110101634.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="4"><li><p>发现pid 4430 4431 4432 4433 线程分别占用了约40%的cpu</p><blockquote><p>将这几个pid转为16进制，分别为114e 114f 1150 1151<br>//转换成为 16 进制<br>printf  “%x” your_pid</p></blockquote></li><li><p>下载当前的java线程栈  sudo -u tomcat jstack -l 384&gt;/1.txt</p></li><li><p>查询5中对应的线程情况，发现都是gc线程导致的</p><blockquote><p><code>jstack [进程] | grep -A 10 [线程的16进制]</code><br>即： jstack 21125 | grep -A 10 52f1  </p></blockquote></li></ol><p>-A 10表示查找到所在行的后10行。21233用计算器转换为16进制52f1，注意字母是小写。 </p><p><img src="https://img-blog.csdnimg.cn/20200305110232969.png" alt="在这里插入图片描述"> </p><ol start="7"><li>dump java堆数据<blockquote><p>sudo -u tomcat jmap -dump:live,format=b,file=/dump201612271310.dat 384<br>// 获取所有对象的dump<br><code>jmap -dump:format=b,file=/tmp/heap.hprof &lt;PID&gt;</code><br>// 获取存活对象的dump，实际效果是先执行一次FULL GC<br><code>jmap -dump:live,format=b,file=/tmp/heap-live.hprof &lt;PID&gt;</code></p></blockquote></li></ol><p><code>heap dump会造成JVM比较长时间的停顿，必须摘流量执行</code><br>dump文件一定要zip后再传输，能节约大量传输时间</p><blockquote><p>tar -zcf /tmp/heap.hprof.gz /tmp/heap.hprof</p></blockquote><ol start="8"><li>使用MAT加载堆文件，可以看到javax.crypto.JceSecurity对象占用了95%的内存空间，初步定位到问题。</li></ol><p>MAT下载地址：<a href="http://www.eclipse.org/mat/" target="_blank" rel="noopener">http://www.eclipse.org/mat/</a><br><img src="https://img-blog.csdnimg.cn/20200305110426851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200305110452977.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="9"><li>查看类的引用树，看到BouncyCastleProvider对象持有过多。即我们代码中对该对象的处理方式是错误的，定位到问题。</li></ol><h1 id="五、代码分析"><a href="#五、代码分析" class="headerlink" title="五、代码分析"></a>五、代码分析</h1><p>我们代码中有一块是这样写的:<br><img src="https://img-blog.csdnimg.cn/20200305110533462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这是加解密的功能，每次运行加解密都会new一个BouncyCastleProvider对象,放倒Cipher.getInstance()方法中。</p><p>看下Cipher.getInstance()的实现，这是jdk的底层代码实现，追踪到JceSecurity类中<br><img src="https://img-blog.csdnimg.cn/2020030511055331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>verifyingProviders每次put后都会remove,verificationResults只会put，不会remove。<br><img src="https://img-blog.csdnimg.cn/20200305110609588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>看到verificationResults是一个static的map，即属于JceSecurity类的。</p><p><strong>所以每次运行到加解密都会向这个map put一个对象，而这个map属于类的维度，所以不会被GC回收。这就导致了大量的new的对象不被回收</strong>。</p><h1 id="六、代码改进"><a href="#六、代码改进" class="headerlink" title="六、代码改进"></a>六、代码改进</h1><p>将有问题的对象置为static，每个类持有一个，不会多次新建。<br><img src="https://img-blog.csdnimg.cn/20200305110641562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h5ZzA4MTE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="七、本文总结"><a href="#七、本文总结" class="headerlink" title="七、本文总结"></a>七、本文总结</h1><p>遇到线上问题不要慌，首先确认排查问题的思路：</p><ol><li>查看日志</li><li>查看CPU情况</li><li>查看TCP情况</li><li>查看java线程，jstack</li><li>查看java堆，jmap</li><li>通过MAT分析堆文件，寻找无法被回收的对象</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源：&lt;a href=&quot;https://www.cnblogs.com/kingszelda/p/9034191.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/kingsz
      
    
    </summary>
    
    
      <category term="问题排查" scheme="https://yuanrengu.com/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="java" scheme="https://yuanrengu.com/tags/java/"/>
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出Mysql索引的那些事儿</title>
    <link href="https://yuanrengu.com/2020/fb519654.html"/>
    <id>https://yuanrengu.com/2020/fb519654.html</id>
    <published>2020-02-26T07:13:03.000Z</published>
    <updated>2020-08-04T05:43:16.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-索引的作用"><a href="#一-索引的作用" class="headerlink" title="一.索引的作用"></a>一.索引的作用</h1><p>一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。</p><p>在数据量和访问量不大的情况下，mysql访问是非常快的，是否加索引对访问影响不大。但是当数据量和访问量剧增的时候，就会发现mysql变慢，甚至down掉，这就必须要考虑优化sql了，给数据库建立正确合理的索引，是mysql优化的一个重要手段。  </p><p>索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从上往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的。除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。</p><p>在创建索引时，需要考虑哪些列会用于 SQL 查询，然后为这些列创建一个或多个索引。<strong>事实上，索引也是一种表，保存着主键或索引字段，以及一个能将每个记录指向实际表的指针</strong>。数据库用户是看不到索引的，它们只是用来加速查询的。数据库搜索引擎使用索引来快速定位记录。</p><p>INSERT 与 UPDATE 语句在拥有索引的表中执行会花费更多的时间，而SELECT 语句却会执行得更快。这是因为，在进行插入或更新时，数据库也需要插入或更新索引值。</p><h1 id="二-索引的创建、删除"><a href="#二-索引的创建、删除" class="headerlink" title="二.索引的创建、删除"></a>二.索引的创建、删除</h1><p>索引的类型：</p><ul><li>UNIQUE(唯一索引)：不可以出现相同的值，可以有NULL值</li><li>INDEX(普通索引)：允许出现相同的索引内容</li><li>PROMARY KEY(主键索引)：不允许出现相同的值</li><li>fulltext index(全文索引)：可以针对值中的某个单词，但效率确实不敢恭维</li><li>组合索引：实质上是将多个字段建到一个索引里，列值的组合必须唯一</li></ul><blockquote><p>温馨提示：根据《阿里巴巴Java开发手册》里的mysql规约，唯一索引建议命名为<strong>uk_字段名</strong>，普通索引名则为<strong>idx_字段名</strong>。（uk_即unique key; idx_即index的简称）。</p></blockquote><h2 id="1-使用ALTER-TABLE语句创建索性"><a href="#1-使用ALTER-TABLE语句创建索性" class="headerlink" title="(1)使用ALTER TABLE语句创建索性"></a>(1)使用ALTER TABLE语句创建索性</h2><p>应用于表创建完毕之后再添加。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD 索引类型 （unique,primary key,fulltext,index）[索引名]（字段名）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//普通索引</span><br><span class="line">alter table table_name add index index_name (column_list) ;</span><br><span class="line">//唯一索引</span><br><span class="line">alter table table_name add unique (column_list) ;</span><br><span class="line">//主键索引</span><br><span class="line">alter table table_name add primary key (column_list) ;</span><br></pre></td></tr></table></figure><p>ALTER TABLE可用于创建普通索引、UNIQUE索引和PRIMARY KEY索引3种索引格式，table_name是要增加索引的表名，column_list指出对哪些列进行索引，多列时各列之间用逗号分隔。索引名index_name<strong>可选</strong>，缺省时，MySQL将根据第一个索引列赋一个名称。另外，ALTER TABLE允许在单个语句中更改多个表，因此可以同时创建多个索引。</p><h2 id="2-使用CREATE-INDEX语句对表增加索引"><a href="#2-使用CREATE-INDEX语句对表增加索引" class="headerlink" title="(2)使用CREATE INDEX语句对表增加索引"></a>(2)使用CREATE INDEX语句对表增加索引</h2><p>CREATE INDEX可用于对表增加普通索引或UNIQUE索引，可用于建表时创建索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name ON table_name(username(length));</span><br></pre></td></tr></table></figure><p>如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//只能添加这两种索引;</span><br><span class="line">CREATE INDEX index_name ON table_name (column_list)</span><br><span class="line">CREATE UNIQUE INDEX index_name ON table_name (column_list)</span><br></pre></td></tr></table></figure><p>table_name、index_name和column_list具有与ALTER TABLE语句中相同的含义，索引名不可选。另外，不能用CREATE INDEX语句创建PRIMARY KEY索引。</p><h2 id="3-删除索引"><a href="#3-删除索引" class="headerlink" title="(3)删除索引"></a>(3)删除索引</h2><p>删除索引可以使用ALTER TABLE或DROP INDEX语句来实现。DROP INDEX可以在ALTER TABLE内部作为一条语句处理，其格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drop index index_name on table_name ;</span><br><span class="line"></span><br><span class="line">alter table table_name drop index index_name ;</span><br><span class="line"></span><br><span class="line">alter table table_name drop primary key ;</span><br></pre></td></tr></table></figure><p>其中，在前面的两条语句中，都删除了table_name中的索引index_name。而在最后一条语句中，只在删除PRIMARY KEY索引中使用，因为一个表只可能有一个PRIMARY KEY索引，因此不需要指定索引名。如果没有创建PRIMARY KEY索引，但表具有一个或多个UNIQUE索引，则MySQL将删除第一个UNIQUE索引。</p><p>如果从表中删除某列，则索引会受影响。对于多列组合的索引，如果删除其中的某列，则该列也会从索引中删除。如果删除组成索引的所有列，则整个索引将被删除。</p><h2 id="4-组合索引与前缀索引"><a href="#4-组合索引与前缀索引" class="headerlink" title="(4) 组合索引与前缀索引"></a>(4) 组合索引与前缀索引</h2><p>在这里要指出，组合索引和前缀索引是对建立索引技巧的一种称呼，并不是索引的类型。为了更好的表述清楚，建立一个demo表如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table USER_DEMO</span><br><span class="line">(</span><br><span class="line">   ID                   int not null auto_increment comment &apos;主键&apos;,</span><br><span class="line">   LOGIN_NAME           varchar(100) not null comment &apos;登录名&apos;,</span><br><span class="line">   PASSWORD             varchar(100) not null comment &apos;密码&apos;,</span><br><span class="line">   CITY                 varchar(30) not null comment &apos;城市&apos;,</span><br><span class="line">   AGE                  int not null comment &apos;年龄&apos;,</span><br><span class="line">   SEX                  int not null comment &apos;性别(0:女 1：男)&apos;,</span><br><span class="line">   primary key (ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>为了进一步榨取mysql的效率，就可以考虑建立组合索引，即将LOGIN_NAME,CITY,AGE建到一个索引里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE USER_DEMO ADD INDEX name_city_age (LOGIN_NAME(16),CITY,AGE);</span><br></pre></td></tr></table></figure><p>建表时，LOGIN_NAME长度为100，这里用16，是因为一般情况下名字的长度不会超过16，这样会加快索引查询速度，还会减少索引文件的大小，提高INSERT，UPDATE的更新速度。</p><p>如果分别给LOGIN_NAME,CITY,AGE建立单列索引，让该表有3个单列索引，查询时和组合索引的效率是大不一样的，甚至远远低于我们的组合索引。虽然此时有三个索引，但mysql只能用到其中的那个它认为似乎是最有效率的单列索引，另外两个是用不到的，也就是说还是一个全表扫描的过程。</p><p>建立这样的组合索引，就相当于分别建立如下三种组合索引：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOGIN_NAME,CITY,AGE</span><br><span class="line">LOGIN_NAME,CITY</span><br><span class="line">LOGIN_NAME</span><br></pre></td></tr></table></figure><p><strong>为什么没有CITY,AGE等这样的组合索引呢</strong>？这是因为mysql组合索引“最左前缀”的结果。简单的理解就是只从最左边的开始组合，并不是只要包含这三列的查询都会用到该组合索引。也就是说name_city_age(LOGIN_NAME(16),CITY,AGE)从左到右进行索引，如果没有左前索引，mysql不会执行索引查询。</p><p>如果索引列长度过长,这种列索引时将会产生很大的索引文件,不便于操作,可以使用前缀索引方式进行索引，前缀索引应该控制在一个合适的点,控制在0.31黄金值即可(大于这个值就可以创建)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT COUNT(DISTINCT(LEFT(`title`,10)))/COUNT(*) FROM Arctic; -- 这个值大于0.31就可以创建前缀索引,Distinct去重复</span><br><span class="line"></span><br><span class="line">ALTER TABLE `user` ADD INDEX `uname`(title(10)); -- 增加前缀索引SQL,将人名的索引建立在10,这样可以减少索引文件大小,加快索引查询速度</span><br></pre></td></tr></table></figure><h1 id="三-索引的使用及注意事项"><a href="#三-索引的使用及注意事项" class="headerlink" title="三.索引的使用及注意事项"></a>三.索引的使用及注意事项</h1><p><strong>EXPLAIN</strong>可以帮助开发人员分析SQL问题,explain显示了mysql如何使用索引来处理select语句以及连接表,可以帮助选择更好的索引和写出更优化的查询语句。</p><p>使用方法,在select语句前加上Explain就可以了：</p><p><img src="http://cdn.yuanrengu.com/img/20200514101841.png" alt></p><p>简要说明下：</p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>id</td><td>选择标识符。id越大优先级越高，就越先被执行</td></tr><tr><td>select_type</td><td>查询的类型</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>partitions</td><td>匹配的分区</td></tr><tr><td>type</td><td>表的连接类型</td></tr><tr><td>possible_keys</td><td>查询时可能使用的索引</td></tr><tr><td>key</td><td>查询时可能使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>ref</td><td>列与索引的比较</td></tr><tr><td>rows</td><td>大概估算的行数</td></tr><tr><td>filtered</td><td>按表条件过滤的行百分比</td></tr><tr><td>Extra</td><td>执行情况的描述和说明</td></tr></tbody></table><p>以上字段中<code>type</code>字段是非常重要的，表的连接类型如下：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>all</td><td>扫描全表数据</td></tr><tr><td>index</td><td>遍历索引</td></tr><tr><td>range</td><td>索引范围查找</td></tr><tr><td>index_subquery</td><td>在子查询中使用ref</td></tr><tr><td>unique_subquery</td><td>在子查询中使用eq_ref</td></tr><tr><td>ref_or_null</td><td>对null进行索引的优化的ref</td></tr><tr><td>fulltext</td><td>使用全文索引</td></tr><tr><td>ref</td><td>使用非唯一索引查找数据</td></tr><tr><td>eq_ref</td><td>在join查询中使用主键或唯一索引关联</td></tr></tbody></table><p><code>select_type</code>：主要用于区别普通查询, 联合查询, 子查询等复杂查询。</p><ul><li>SIMPLE：查询中不包含子查询或者UNION</li><li>查询中若包含任何复杂的子部分，最外层查询则被标记为：<strong>PRIMARY</strong></li><li>在SELECT或WHERE列表中包含了子查询，该子查询被标记为：<strong>SUBQUERY</strong></li><li>在FROM列表中包含的子查询被标记为：<strong>DERIVED（衍生）</strong></li><li>若第二个SELECT出现在UNION之后，则被标记为<strong>UNION</strong>；若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：<strong>DERIVED</strong></li><li>从UNION表获取结果的SELECT被标记为：<strong>UNION RESULT</strong></li></ul><p><code>possible_keys</code>：指出MySQL能使用哪个索引在表中找到行，查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询使用。</p><p><code>key</code>：显示MySQL在查询中实际使用的索引，若没有使用索引，显示为NULL。<br> 查询中若使用了覆盖索引，则该索引仅出现在key列表中。</p><p> <code>key_len</code>：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。<br>    key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的。</p><p><code>ref</code>：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值。</p><p><code>rows</code>：表示MySQL根据表统计信息及索引选用情况，<code>估算</code>（注意是估算，不是实际扫描的行数）的找到所需的记录所需要读取的行数。</p><p><code>Extra</code>：包含不适合在其他列中显示但十分重要的额外信息</p><ul><li>Using index：该值表示相应的select操作中使用了覆盖索引（Covering Index）。</li><li>MySQL可以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件</li><li>包含所有满足查询需要的数据的索引称为 覆盖索引（Covering Index）</li><li>注意：如果要使用覆盖索引，一定要注意select列表中只取出需要的列，不可select *，因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降</li><li>Using where：表示MySQL服务器在存储引擎受到记录后进行“后过滤”（Post-filter）,</li><li>如果查询未能使用索引，Using where的作用只是提醒我们MySQL将用where子句来过滤结果集</li><li>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询</li><li>Using filesort：MySQL中无法利用索引完成的排序操作称为“文件排序”</li></ul><p>下面来简单的介绍Extra中的一些区别：</p><ul><li>using index ：使用覆盖索引的时候就会出现</li><li>using where：在查找使用索引的情况下，需要回表去查询所需的数据</li><li>using index condition：查找使用了索引，但是需要回表查询数据</li><li>using index &amp; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</li></ul><p>以上四点就能看出它们之前的区别，或许有部分人都存在疑惑 using index &amp; using where 和using index condition那个比较好，从上面的的解释中就能看出是前者比较好，毕竟不需要回表查询数据，效率上应该比较快的。</p><p>在<a href="https://stackoverflow.com/questions/28759576/mysql-using-index-condition-vs-using-where-using-index" target="_blank" rel="noopener">stackoverflow</a>中找到一个非常经典的描述：<br><img src="http://cdn.yuanrengu.com/img/20200804133613.png" alt></p><p>尽量避免这些不走索引的sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,phone <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="string">`age`</span>+<span class="number">10</span>=<span class="number">30</span>; <span class="comment">-- 不会使用索引,因为所有索引列参与了计算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>,phone  <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="keyword">LEFT</span>(<span class="string">`date`</span>,<span class="number">4</span>) &lt;<span class="number">1990</span>; <span class="comment">-- 不会使用索引,因为使用了函数运算,原理与上面相同</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> <span class="keyword">LIKE</span><span class="string">'后盾%'</span> <span class="comment">-- 走索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`user`</span> <span class="keyword">WHERE</span> <span class="string">`name`</span> <span class="keyword">LIKE</span> <span class="string">"%后盾%"</span> <span class="comment">-- 不走索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正则表达式不使用索引,这应该很好理解,所以为什么在SQL中很难看到regexp关键字的原因</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串与数字比较不使用索引;</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`a`</span> (<span class="string">`a`</span> <span class="built_in">char</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`a`</span> <span class="keyword">WHERE</span> <span class="string">`a`</span>=<span class="string">"1"</span> <span class="comment">-- 走索引</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">`a`</span> <span class="keyword">WHERE</span> <span class="string">`a`</span>=<span class="number">1</span> <span class="comment">-- 不走索引</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dept <span class="keyword">where</span> dname=<span class="string">'xxx'</span> <span class="keyword">or</span> loc=<span class="string">'xx'</span> <span class="keyword">or</span> deptno=<span class="number">45</span> <span class="comment">--如果条件中有or,即使其中有条件带索引也不会使用。换言之,就是要求使用的所有字段,都必须建立索引, 我们建议大家尽量避免使用or 关键字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果mysql估计使用全表扫描要比使用索引快,则不使用索引</span></span><br></pre></td></tr></table></figure><p>索引虽然好处很多，但过多的使用索引可能带来相反的问题，索引也是有缺点的：</p><ul><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT,UPDATE和DELETE。因为更新表时，mysql不仅要保存数据，还要保存一下索引文件</li><li>建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在要给大表上建了多种组合索引，索引文件会膨胀很宽</li></ul><p>索引只是提高效率的一个方式，如果mysql有大数据量的表，就要花时间研究建立最优的索引，或优化查询语句。</p><p>尽可能的使用主键查询，因为主键查询不会触发<code>回表查询</code>，能节省一部分时间，变相提高了查询的性能。</p><h2 id="使用索引时，有一些技巧"><a href="#使用索引时，有一些技巧" class="headerlink" title="使用索引时，有一些技巧"></a>使用索引时，有一些技巧</h2><ol><li><p>索引不会包含有NULL的列<br> 只要列中包含有NULL值，都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。</p></li><li><p>使用短索引<br> 对串列进行索引，如果可以就应该指定一个前缀长度。例如，如果有一个char（255）的列，如果在前10个或20个字符内，多数值是唯一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p></li><li><p>索引列排序<br><strong>mysql一张表查询只能用到一个索引</strong>。因此如果where子句中已经使用了索引的话，那么order by中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作，尽量不要包含多个列的排序，如果需要最好给这些列建复合索引。这一点是很多程序猿容易忽略的，如where子句的字段建了索引，排序的字段建了索引，但是分开建的，以为会走索引，其实这样的话排序的字段不会使用索引的，除非建复合索引，切记。</p></li><li><p><strong>like语句操作</strong><br>一般情况下不鼓励使用like操作，如果非使用不可，注意正确的使用方式。like ‘%aaa%’不会使用索引，而like ‘aaa%’可以使用索引。</p></li><li><p>不要在列上进行运算</p></li><li><p><strong>不使用NOT IN 、&lt;&gt;、！=操作，但&lt;,&lt;=，=，&gt;,&gt;=,BETWEEN,IN是可以用到索引的。</strong></p></li><li><p>索引要建立在经常进行select操作的字段上。<br>这是因为，如果这些列很少用到，那么有无索引并不能明显改变查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p></li><li><p>索引要建立在值比较唯一的字段上。</p></li><li><p>对于那些定义为text、image和bit数据类型的列不应该增加索引。因为这些列的数据量要么相当大，要么取值很少。</p></li><li><p><strong>在where和join中出现的列需要建立索引。</strong></p></li><li><p><strong>where的查询条件里有不等号(where column != …),mysql将无法使用索引。</strong></p></li><li><p>如果where字句的查询条件里使用了函数(如：where DAY(column)=…),mysql将无法使用索引。</p></li><li><p>在join操作中(需要从多个数据表提取数据时)，<strong>mysql只有在主键和外键的数据类型相同时才能使用索引</strong>，否则即使建立了索引也不会使用。这一点很容易忽略，切记，切记，切记！</p></li><li><p>在进行联表查询时，建立关联的表的字段类型最好一样且长度一致，这样能更好的发挥索引的作用。</p></li><li><p>组合索引时切记此条约束：<code>组合索引中有多个字段，其中一个字段是有范围判断，则需将此字段在最后面</code>。如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE USER_DEMO ADD INDEX name_age (NAME,AGE);</span><br></pre></td></tr></table></figure><p>因为age会有范围判断，则建组合索引时将AGE字段放在后面。<br>简单总结这一条规则就是<code>范右无索</code>（范围查询右边无法使用索引）。</p></li><li><p><strong>字符集字段比较，UTF8与UTF-BIN联合查询是不能走索引的。</strong></p><p>如某张表的order_no字段类型为varchar(50),另一张表的order_no字段类型为varchar(50) COLLATE utf8_BIN。则此时联合查询时不能走索引的，切记。<br>即两张表的字段类型如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`order_no` varchar(50) COLLATE utf8_bin NOT NULL DEFAULT &apos;&apos; COMMENT &apos;订单号&apos;;</span><br><span class="line">`order_no` varchar(50) NOT NULL DEFAULT &apos;&apos; COMMENT &apos;订单号&apos;;</span><br></pre></td></tr></table></figure></li><li><p>以下几种情况<code>不适合</code>建索引：</p><ul><li>表记录太少</li><li>经常插入、删除、修改的表</li><li><code>更新非常频繁的字段不适合创建索引</code></li><li>数据重复且分布平均的表字段。如一个表有10万行记录，其中字段column1只有A和B两种值，且每个值的分布概率大约为50%，那么对这种表column1字段建索引一般不会提高数据库的查询速度。</li><li>较频繁的查询字段应该创建索引</li><li>唯一性太差的字段不适合单独创建索引，即使该字段频繁作为查询条件</li></ul></li><li><p>给表创建主键，对于没有主键的表，在查询和索引定义上有一定的影响。</p></li><li><p>避免表字段为null，建议设置默认值（如int类型设置默认值为0），这样在索引查询上，效率会高很多。</p></li><li><p>关于order by的索引问题重点说下:</p><ul><li><p>无条件查询如果只有order by create_time，即便create_time上有索引，也不会使用到。<br>因为优化器认为走二级索引再去回表成本比全表扫描排序更高，所以选择走全表扫描。</p></li><li><p>无条件查询但是order by create_time limit m，如果m值较小，是可以走索引的。<br>因为优化器认为根据索引有序性去回表查数据，然后得到m条数据，就可以终止循环，<br>那么成本比全表扫描小，则选择走二级索引。<br>即便没有二级索引，mysql针对order by limit也做了优化，采用堆排序。</p></li><li><p>order by排序分为file sort和index，index的效率更高。但以下情况不会使用index排序：</p><ul><li>检查的行数过多，并且没有使用覆盖索引</li><li>使用了多个索引，mysql一次只会采用一个索引</li><li>where和order by使用了不同的索引，与上一条类似</li><li>order by中加入了非索引列，且非索引列不在where中</li><li>当使用left join，使用右边的表字段排序</li></ul></li></ul></li><li><p>优化子查询</p><p>尽量使用join语句来替代子查询。因为子查询是嵌套查询，而嵌套查询会新建一张临时表，而临时表的创建和销毁会占用一定的系统资源，也花费一定的时间。但join语句并不会创建临时表，因此性能会高一点。</p></li><li><p>留意查询结果集</p><p>尽量使用<code>小表驱动大表</code>的方式进行查询。也就是如果B表的数据小于A表的数据，那执行的顺序就是先查B表再查A表。</p></li><li><p>适当增加冗余字段</p><p>增加冗余字段可以减少大量的连表查询，因为多张表的连表查询性能很低，所以可以适当的增加冗余字段，以减少多张表的关联查询，这就是用<code>空间换时间</code>的优化策略。</p></li></ol><p>参考：</p><ul><li><a href="http://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.5/en/explain-output.html</a></li><li><a href="https://www.cnblogs.com/wd326150354/p/11022093.html" target="_blank" rel="noopener">https://www.cnblogs.com/wd326150354/p/11022093.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-索引的作用&quot;&gt;&lt;a href=&quot;#一-索引的作用&quot; class=&quot;headerlink&quot; title=&quot;一.索引的作用&quot;&gt;&lt;/a&gt;一.索引的作用&lt;/h1&gt;&lt;p&gt;一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/tags/Mysql/"/>
    
      <category term="索引" scheme="https://yuanrengu.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>内存泄漏与内存溢出</title>
    <link href="https://yuanrengu.com/2020/4a91d705.html"/>
    <id>https://yuanrengu.com/2020/4a91d705.html</id>
    <published>2020-02-26T06:57:03.000Z</published>
    <updated>2020-02-26T07:51:53.717Z</updated>
    
    <content type="html"><![CDATA[<p>不管哪种编程语言的内存分配方式，都需要返回所分配内存的真实地址，也就是返回一个指针到内存块的首地址。java中对象可以采用<code>new</code>或<code>反射</code>或<code>clone</code>或<code>反序列化</code>的方法创建，这些对象的创建都是在堆（Heap）中分配的，所有对象的回收都是由java虚拟机通过垃圾回收机制完成的。GC为了能够正确释放对象，会监控每个对象的运行状况，对他们的申请、引用、被引用、赋值等状况进行监控，java会使用有向图的方法来管理内存，实时监控对象是否可以达到，如果不可到达，则就将其回收，这样也可以消除引用循环的问题。</p><p>java使用有向图的方式进行内存管理，示例如下：<br><img src="http://cdn.yuanrengu.com/img/20200226144726.png" alt><br>在有向图中，我们叫做obj1是可达的，obj2就是不可达的，显然不可达的可以被清理。</p><p>释放对象的根本原则就是对象不会再被使用。在java语言中，判断一个内存空间是否符合垃圾收集标准有两个：</p><ol><li>给对象赋予了空值null，之后再没有调用过；</li><li>另一个是给对象赋予了新值，这样重新分配了内存空间。</li></ol><p>接下来介绍内存泄漏与内存溢出：</p><ul><li><code>内存泄漏（memory leak）</code>：是指无用对象（不再使用的对象）持续占有内存或无用对象的内存得不到及时释放，从而造成的内存空间的浪费称为内存泄漏。</li><li><code>内存溢出（out of memory）</code>：指程序运行过程中无法申请到足够的内存而导致的一种错误。即程序在申请内存时，没有足够的内存空间供其使用。</li></ul><p>内存泄漏是内存溢出的一种诱因，不是唯一因素，那么，java内存泄漏根本原因是什么？<code>长生命周期的对象持有短生命周期对象的引用，就很可能发生内存泄漏</code>。尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄漏的发生场景。</p><p>memory leak会最终导致out of memory，内存溢出就是你要求分配的内存超出了系统能给你的，系统不能满足需求，于是产生溢出。</p><p>在java中出现内存泄漏的场景，主要有如下几个大类：</p><h3 id="1-静态集合类引起内存泄漏"><a href="#1-静态集合类引起内存泄漏" class="headerlink" title="(1)静态集合类引起内存泄漏"></a>(1)静态集合类引起内存泄漏</h3><p>如HashMap、Vector等的使用最容易出险内存泄漏，这些静态变量的生命周期和应用程序一致，他们所引用的所有的对象Object也不能被释放，因为他们也将一直被Vector等引用着。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Static Vector v = <span class="keyword">new</span> Vector(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;<span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">     Object o = <span class="keyword">new</span> Object();</span><br><span class="line">     v.add(o);</span><br><span class="line">     o = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，循环申请Object对象，并将所申请的对象放入一个Vector中，如果仅仅释放引用本身（o=null），那么Vector仍然引用该对象，所以这个对象对GC来说是不可回收。因此，如果对象加入到Vector后，还必须从Vector中删除，最简单的方法就是将Vector对象设置为null。</p><h3 id="（2）当集合里面的对象属性被修改后，再调用remove-方法时不起作用"><a href="#（2）当集合里面的对象属性被修改后，再调用remove-方法时不起作用" class="headerlink" title="（2）当集合里面的对象属性被修改后，再调用remove()方法时不起作用"></a>（2）当集合里面的对象属性被修改后，再调用remove()方法时不起作用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Person&gt; set = <span class="keyword">new</span> HashSet&lt;Person&gt;();</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"唐僧"</span>,<span class="string">"pwd1"</span>,<span class="number">25</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">"孙悟空"</span>,<span class="string">"pwd2"</span>,<span class="number">26</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">"猪八戒"</span>,<span class="string">"pwd3"</span>,<span class="number">27</span>);</span><br><span class="line">set.add(p1);</span><br><span class="line">set.add(p2);</span><br><span class="line">set.add(p3);</span><br><span class="line">System.out.println(<span class="string">"总共有:"</span>+set.size()+<span class="string">" 个元素!"</span>); <span class="comment">//结果：总共有:3 个元素!</span></span><br><span class="line">p3.setAge(<span class="number">2</span>); <span class="comment">//修改p3的年龄,此时p3元素对应的hashcode值发生改变</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//切记不要在修改这个对象后使用remove(Object o)，这也可能会发生内存泄露</span></span><br><span class="line">set.remove(p3); <span class="comment">//此时remove不掉，造成内存泄漏</span></span><br><span class="line"> </span><br><span class="line">set.add(p3); <span class="comment">//重新添加，居然添加成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Person person : set)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(person.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就Set而言，remove()方法是通过equals()方法来删除匹配的元素的，如果一个对象确实提供了正确的equals()方法，但是切忌不要在修改这个对象后使用remove(),这可能会发生内存泄漏。</p><h3 id="（3）数据库连接"><a href="#（3）数据库连接" class="headerlink" title="（3）数据库连接"></a>（3）数据库连接</h3><p>比如数据库连接（dataSource.getConnection()）、网络连接（socket）和io连接，以及使用其它框架的时候，除非显示的调用了其close()方法（或类似方法）将其连接关闭，否则是不会自动被GC回收的。其实原因就是长生命周期对象持有短生命周期对象的引用。</p><p>对于Resultset和Statement对象可以不进行显示回收，但Connection一定要显示回收，因为Connection在任何时候都无法自动回收，而Connection一旦回收，Resultset和Statement对象就会立即为null。</p><p>但是如果使用连接池，情况就不一样了，除了要显式地关闭连接，还必须显式地关闭Resultset Statement 对象（关闭其中一个，另外一个也会关闭），否则就会造成大量的Statement 对象无法释放，从而引起内存泄漏。这种情况下一般都会在try里面去的连接，在finally里面释放连接。</p><h3 id="（4）内部类和外部模块等的引用"><a href="#（4）内部类和外部模块等的引用" class="headerlink" title="（4）内部类和外部模块等的引用"></a>（4）内部类和外部模块等的引用</h3><p>内部类的引用是比较容易遗忘的一种，而且一旦没释放，可能导致一系列的后继承类对象没有释放。此外还要小心外部模块不经意的引用。</p><h3 id="（5）单例模式"><a href="#（5）单例模式" class="headerlink" title="（5）单例模式"></a>（5）单例模式</h3><p>不正确使用单例模式是引起内存泄漏的一个常见问题，单例对象在被初始化后将在JVM的整个生命周期中存在（以静态变量的方式），如果单例对象持有外部对象的引用，那么这个外部对象将不能被JVM正常回收，导致内存泄漏。</p><p>单例模式很多时候我们可以把它的生命周期与整个程序的生命周期看做差不多的，所以是一个长生命周期的对象。如果这个对象持有其他对象的引用，也很容易发生内存泄漏。</p><h3 id="如果以发生泄漏的方式来分类，内存泄漏可以分为4类："><a href="#如果以发生泄漏的方式来分类，内存泄漏可以分为4类：" class="headerlink" title="如果以发生泄漏的方式来分类，内存泄漏可以分为4类："></a>如果以发生泄漏的方式来分类，内存泄漏可以分为4类：</h3><ol><li>常发性内存泄漏。发生内存泄漏的代码会被多次执行，每次被执行的时候都会导致一块内存泄漏。</li><li>偶发性内存泄漏。发生内存泄漏的代码只有在某些特定环境或操作过程下才会发生。常发性和偶发性是相对的，对于特定的环境，偶发性的也许就变成了常发性的。所以测试环境和测试方法对检测内存泄漏至关重要。</li><li>一次性内存泄漏。发生内存泄漏的代码只会被执行一次，或者由于算法上的缺陷，导致总有一块仅且一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放内存，所以内存泄漏只会发生一次。</li><li>隐式内存泄漏。程序在运行过程中不听的分配内存，但是直到结束的时候才释放内存。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天、几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不管哪种编程语言的内存分配方式，都需要返回所分配内存的真实地址，也就是返回一个指针到内存块的首地址。java中对象可以采用&lt;code&gt;new&lt;/code&gt;或&lt;code&gt;反射&lt;/code&gt;或&lt;code&gt;clone&lt;/code&gt;或&lt;code&gt;反序列化&lt;/code&gt;的方法创建，这
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="java" scheme="https://yuanrengu.com/tags/java/"/>
    
      <category term="内存泄露" scheme="https://yuanrengu.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="内存溢出" scheme="https://yuanrengu.com/tags/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>性能对比：Count(字段)、Count（主键）、Count（1）、Count（*）</title>
    <link href="https://yuanrengu.com/2020/c00d182e.html"/>
    <id>https://yuanrengu.com/2020/c00d182e.html</id>
    <published>2020-02-26T06:44:30.000Z</published>
    <updated>2020-02-26T06:45:54.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明：此篇文章的内容绝大部分来源于《极客时间》专栏。</p></blockquote><p>以下讨论是基于InnoDB引擎。</p><p>至于分析性能差别的时候，可以记住以下几个原则：</p><ol><li>server层要什么就给什么</li><li>InnoDB只给必要的值</li><li>现在的优化器只优化了count(*)的语义为“取行数”，其它“显而易见”的优化并没有做。接下来，我们一个个来进行分析。</li></ol><p>对于<code>count(主键id)</code>来说，InnoDB引擎会遍历整张表，把每一行的id值都取出来，返回给server层。server层拿到id后，判断是不可能为空的，就按行累加。</p><p>对于<code>count(1)</code>来说，InnoDB引擎遍历整张表，但不取值。server层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加。</p><p>单看这两个用法的差别的话，你就能对比出来，<strong>count(1)执行的要比count(主键id)快。因为从引擎返回id会涉及到解析数据行，以及拷贝字段值的操作</strong>。</p><p>对于<code>count(字段)</code>来说：</p><ul><li>如果这个“字段”是定义为not null的话，一行行地从记录里面读出这个字段，判断不能为null，按行累加；</li><li>如果这个“字段”定义允许为null，那么执行的时候，判断到有可能是null，还要把值取出来再判断一下，不是null才累加。也就是前面的第一条原则，server层要什么字段，InnoDB就返回什么字段。</li></ul><p>但是<code>count(*)</code>是例外，并不会把全部字段取出来，而是专门做了优化，不取值。count(*)肯定不是null，按行累加。</p><p>看到这里，你一定会说，优化器就不能自己判断一下吗，主键id肯定非空啊，为什么不能按照count(*)来处理，多么简单的优化啊。</p><p>当然，mysql专门针对这个语句进行优化，也不是不可以。但是这种需要专门优化的情况太多了，而且mysql已经优化过count(*)了，直接使用这种用法就可以了。</p><p>所以结论是：按照效率排序的话，<code>count(字段) &lt; count(主键id) &lt; count(1) ≈ count(*)</code>。所以建议尽量使用<code>count(*)</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;说明：此篇文章的内容绝大部分来源于《极客时间》专栏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下讨论是基于InnoDB引擎。&lt;/p&gt;
&lt;p&gt;至于分析性能差别的时候，可以记住以下几个原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;server层要什么就给什么&lt;
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mysql字符串截取总结：Left()、Right()、Substring()、Substring_index()</title>
    <link href="https://yuanrengu.com/2020/9cfe2ad6.html"/>
    <id>https://yuanrengu.com/2020/9cfe2ad6.html</id>
    <published>2020-02-26T06:42:48.000Z</published>
    <updated>2020-02-26T06:45:54.136Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的项目开发中有时会有对数据库某字段截取部分的需求，这种场景有时直接通过数据库操作来实现比通过代码实现要更方便快捷些，mysql有很多字符串函数可以用来处理这些需求，如Mysql字符串截取总结：left()、right()、substring()、substring_index()。</p><h3 id="一-从左开始截取字符串"><a href="#一-从左开始截取字符串" class="headerlink" title="一.从左开始截取字符串"></a>一.从<strong>左</strong>开始截取字符串</h3><p>用法：left(str, length)，即：left(被截取字符串， 截取长度)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">'www.yuanrengu.com'</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>结果为：<a href="http://www.yuan" target="_blank" rel="noopener">www.yuan</a></p><h3 id="二-从右开始截取字符串"><a href="#二-从右开始截取字符串" class="headerlink" title="二.从右开始截取字符串"></a>二.从<strong>右</strong>开始截取字符串</h3><p>用法：right(str, length)，即：right(被截取字符串， 截取长度)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">'www.yuanrengu.com'</span>,<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>结果为：gu.com</p><h3 id="三-截取特定长度的字符串"><a href="#三-截取特定长度的字符串" class="headerlink" title="三.截取特定长度的字符串"></a>三.截取<strong>特定长度</strong>的字符串</h3><p>用法：</p><ul><li>substring(str, pos)，即：substring(被截取字符串， 从第几位开始截取)</li><li>substring(str, pos, length)，即：substring(被截取字符串，从第几位开始截取，截取长度)</li></ul><h4 id="1-从字符串的第9个字符开始读取直至结束"><a href="#1-从字符串的第9个字符开始读取直至结束" class="headerlink" title="1.从字符串的第9个字符开始读取直至结束"></a>1.从字符串的第9个字符开始读取直至结束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'www.yuanrengu.com'</span>, <span class="number">9</span>);</span><br></pre></td></tr></table></figure><p>结果为：rengu.com</p><h4 id="2-从字符串的第9个字符开始，只取3个字符"><a href="#2-从字符串的第9个字符开始，只取3个字符" class="headerlink" title="2.从字符串的第9个字符开始，只取3个字符"></a>2.从字符串的第9个字符开始，只取3个字符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'www.yuanrengu.com'</span>, <span class="number">9</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>结果为：ren</p><h4 id="3-从字符串的倒数第6个字符开始读取直至结束"><a href="#3-从字符串的倒数第6个字符开始读取直至结束" class="headerlink" title="3.从字符串的倒数第6个字符开始读取直至结束"></a>3.从字符串的倒数第6个字符开始读取直至结束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'www.yuanrengu.com'</span>, <span class="number">-6</span>);</span><br></pre></td></tr></table></figure><p>结果为：gu.com</p><h4 id="4-从字符串的倒数第6个字符开始读取，只取2个字符"><a href="#4-从字符串的倒数第6个字符开始读取，只取2个字符" class="headerlink" title="4.从字符串的倒数第6个字符开始读取，只取2个字符"></a>4.从字符串的倒数第6个字符开始读取，只取2个字符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'www.yuanrengu.com'</span>, <span class="number">-6</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>结果为：gu</p><h3 id="四-按关键字进行读取"><a href="#四-按关键字进行读取" class="headerlink" title="四.按关键字进行读取"></a>四.按关键字进行读取</h3><p>用法：substring_index(str, delim, count)，即：substring_index(被截取字符串，关键字，关键字出现的次数)</p><h4 id="1-截取第二个“-”之前的所有字符"><a href="#1-截取第二个“-”之前的所有字符" class="headerlink" title="1.截取第二个“.”之前的所有字符"></a>1.截取第二个“.”之<strong>前</strong>的所有字符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">'www.yuanrengu.com'</span>, <span class="string">'.'</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>结果为：<a href="http://www.yuanrengu" target="_blank" rel="noopener">www.yuanrengu</a></p><h4 id="2-截取倒数第二个“-”之后的所有字符"><a href="#2-截取倒数第二个“-”之后的所有字符" class="headerlink" title="2.截取倒数第二个“.”之后的所有字符"></a>2.截取倒数第二个“.”之<strong>后</strong>的所有字符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">'www.yuanrengu.com'</span>, <span class="string">'.'</span>, <span class="number">-2</span>);</span><br></pre></td></tr></table></figure><p>结果为：yuanrengu.com</p><h4 id="3-如果关键字不存在，则返回整个字符串"><a href="#3-如果关键字不存在，则返回整个字符串" class="headerlink" title="3.如果关键字不存在，则返回整个字符串"></a>3.如果关键字不存在，则返回整个字符串</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTRING_INDEX(<span class="string">'www.yuanrengu.com'</span>, <span class="string">'sprite'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>结果为：<a href="http://www.yuanrengu.com" target="_blank" rel="noopener">www.yuanrengu.com</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际的项目开发中有时会有对数据库某字段截取部分的需求，这种场景有时直接通过数据库操作来实现比通过代码实现要更方便快捷些，mysql有很多字符串函数可以用来处理这些需求，如Mysql字符串截取总结：left()、right()、substring()、substring_i
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/categories/Mysql/"/>
    
    
      <category term="substring" scheme="https://yuanrengu.com/tags/substring/"/>
    
  </entry>
  
  <entry>
    <title>Mysql中Left Join、Right Join、Inner Join的区别</title>
    <link href="https://yuanrengu.com/2020/e867cb8.html"/>
    <id>https://yuanrengu.com/2020/e867cb8.html</id>
    <published>2020-02-26T06:37:03.000Z</published>
    <updated>2020-02-26T06:45:54.136Z</updated>
    
    <content type="html"><![CDATA[<ul><li>left join(左联接) ：返回包括左表中的所有记录和右表中联结字段相等的记录</li><li>right join(右联接) ：返回包括右表中的所有记录和左表中联结字段相等的记录</li><li>inner join(等值连接)： 只返回两个表中联结字段相等的行</li></ul><p>举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">表A记录如下：</span><br><span class="line">aID　　　　　aNum</span><br><span class="line">1　　　　　a20050111</span><br><span class="line">2　　　　　a20050112</span><br><span class="line">3　　　　　a20050113</span><br><span class="line">4　　　　　a20050114</span><br><span class="line">5　　　　　a20050115</span><br><span class="line"></span><br><span class="line">表B记录如下:</span><br><span class="line">bID　　　　　bName</span><br><span class="line">1　　　　　2006032401</span><br><span class="line">2　　　　　2006032402</span><br><span class="line">3　　　　　2006032403</span><br><span class="line">4　　　　　2006032404</span><br><span class="line">8　　　　　2006032408</span><br></pre></td></tr></table></figure><h3 id="1-left-join"><a href="#1-left-join" class="headerlink" title="1.left join"></a>1.left join</h3><p>sql语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">on</span> A.aID = B.bID</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aID　　　　　aNum　　　　　bID　　　　　bName</span><br><span class="line">1　　　　　a20050111　　　　1　　　　　2006032401</span><br><span class="line">2　　　　　a20050112　　　　2　　　　　2006032402</span><br><span class="line">3　　　　　a20050113　　　　3　　　　　2006032403</span><br><span class="line">4　　　　　a20050114　　　　4　　　　　2006032404</span><br><span class="line">5　　　　　a20050115　　　　NULL　　　　　NULL</span><br><span class="line">（所影响的行数为 5 行）</span><br></pre></td></tr></table></figure><h4 id="结果说明"><a href="#结果说明" class="headerlink" title="结果说明:"></a>结果说明:</h4><p>left join是以A表的记录为基础的,A可以看成左表,B可以看成右表,left join是以左表为准的。<br>换句话说,左表(A)的记录将会全部表示出来,而右表(B)只会显示符合搜索条件的记录(例子中为: A.aID = B.bID)，B表记录不足的地方均为NULL。</p><h3 id="2-right-join"><a href="#2-right-join" class="headerlink" title="2.right join"></a>2.right join</h3><p>sql语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">on</span> A.aID = B.bID</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aID　　　　　aNum　　　　　bID　　　　　bName</span><br><span class="line">1　　　　　a20050111　　　　1　　　　　2006032401</span><br><span class="line">2　　　　　a20050112　　　　2　　　　　2006032402</span><br><span class="line">3　　　　　a20050113　　　　3　　　　　2006032403</span><br><span class="line">4　　　　　a20050114　　　　4　　　　　2006032404</span><br><span class="line">NULL　　　　　NULL　　　　　8　　　　　2006032408</span><br><span class="line">（所影响的行数为 5 行）</span><br></pre></td></tr></table></figure><h4 id="结果说明-1"><a href="#结果说明-1" class="headerlink" title="结果说明:"></a>结果说明:</h4><p>仔细观察一下,就会发现,和left join的结果刚好相反,这次是以右表(B)为基础的,A表不足的地方用NULL填充。</p><h3 id="3-inner-join"><a href="#3-inner-join" class="headerlink" title="3.inner join"></a>3.inner join</h3><p>sql语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">on</span> A.aID = B.bID</span><br></pre></td></tr></table></figure><p>结果如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aID　　　　　aNum　　　　　bID　　　　　bName</span><br><span class="line">1　　　　　a20050111　　　　1　　　　　2006032401</span><br><span class="line">2　　　　　a20050112　　　　2　　　　　2006032402</span><br><span class="line">3　　　　　a20050113　　　　3　　　　　2006032403</span><br><span class="line">4　　　　　a20050114　　　　4　　　　　2006032404</span><br></pre></td></tr></table></figure><h4 id="结果说明-2"><a href="#结果说明-2" class="headerlink" title="结果说明:"></a>结果说明:</h4><p>很明显,这里只显示出了 A.aID = B.bID的记录.这说明inner join并不以谁为基础,它只显示符合条件的记录.</p><h3 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4.注意点"></a>4.注意点</h3><p>LEFT JOIN操作用于在任何的 FROM 子句中，组合来源表的记录。使用 LEFT JOIN 运算来创建一个左边外部联接。左边外部联接将包含了从第一个（左边）开始的两个表中的全部记录，即使在第二个（右边）表中并没有相符值的记录。</p><p>语法：FROM table1 LEFT JOIN table2 ON table1.field1 compopr table2.field2</p><p>说明：table1, table2参数用于指定要将记录组合的表的名称。<br>field1, field2参数指定被联接的字段的名称。<strong>且这些字段必须有相同的数据类型及包含相同类型的数据，但它们不需要有相同的名称</strong>。<br><strong>compopr参数</strong>指定关系比较运算符：”=”， “&lt;”， “&gt;”， “&lt;=”， “&gt;=” 或 “&lt;&gt;”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;left join(左联接) ：返回包括左表中的所有记录和右表中联结字段相等的记录&lt;/li&gt;
&lt;li&gt;right join(右联接) ：返回包括右表中的所有记录和左表中联结字段相等的记录&lt;/li&gt;
&lt;li&gt;inner join(等值连接)： 只返回两个表中联结字
      
    
    </summary>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://yuanrengu.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>获取对象属性类型、属性名称、属性值的研究：反射和JEXL解析引擎</title>
    <link href="https://yuanrengu.com/2020/513ead88.html"/>
    <id>https://yuanrengu.com/2020/513ead88.html</id>
    <published>2020-02-26T06:33:09.000Z</published>
    <updated>2020-02-26T06:45:54.134Z</updated>
    
    <content type="html"><![CDATA[<p>先简单介绍下反射的概念：java反射机制是在<code>运行状态</code>中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的<code>反射机制</code>。</p><p>反射是java中一种强大的工具，能够使我们很方便的创建灵活的代码，这些代码可以在运行时装配。在实际的业务中，可能会动态根据属性去获取值。</p><p>工具类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yaoguang.common.utils.field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.BeanInfo;</span><br><span class="line"><span class="keyword">import</span> java.beans.Introspector;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实体属性操作工具类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> heyonggang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年5月10日下午5:56:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFieldUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(ObjectFieldUtil.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据属性名获取属性值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fieldName  字段名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getFieldValueByName</span><span class="params">(String fieldName, Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String firstLetter = fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase();</span><br><span class="line">String getter = <span class="string">"get"</span> + firstLetter + fieldName.substring(<span class="number">1</span>);</span><br><span class="line">Method method = o.getClass().getMethod(getter, <span class="keyword">new</span> Class[] &#123;&#125;);</span><br><span class="line">Object value = method.invoke(o, <span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(e.getMessage(), e);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取属性名数组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String[] getFiledName(Object o) &#123;</span><br><span class="line">Field[] fields = o.getClass().getDeclaredFields();</span><br><span class="line">String[] fieldNames = <span class="keyword">new</span> String[fields.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">System.out.println(fields[i].getType());</span><br><span class="line">fieldNames[i] = fields[i].getName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fieldNames;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取属性类型(type)，属性名(name)，属性值(value)的map组成的list</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; getFiledsInfo(Object o) &#123;</span><br><span class="line">Field[] fields = o.getClass().getDeclaredFields();</span><br><span class="line"><span class="comment">//String[] fieldNames = new String[fields.length];</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Map&lt;String, Object&gt; infoMap = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">infoMap = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">infoMap.put(<span class="string">"type"</span>, fields[i].getType().toString());</span><br><span class="line">infoMap.put(<span class="string">"name"</span>, fields[i].getName());</span><br><span class="line">infoMap.put(<span class="string">"value"</span>, getFieldValueByName(fields[i].getName(), o));</span><br><span class="line">list.add(infoMap);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取对象的所有属性值，返回一个对象数组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o  实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object[] getFiledValues(Object o) &#123;</span><br><span class="line">String[] fieldNames = getFiledName(o);</span><br><span class="line">Object[] value = <span class="keyword">new</span> Object[fieldNames.length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fieldNames.length; i++) &#123;</span><br><span class="line">value[i] = getFieldValueByName(fieldNames[i], o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据对象属性名设置属性值</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fieldName 字段名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value 字段值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> o 实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValueByName</span><span class="params">(String fieldName, Object o,Object value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanInfo obj =Introspector.getBeanInfo(o.getClass(), Object.class);</span><br><span class="line">PropertyDescriptor[] pds = obj.getPropertyDescriptors();</span><br><span class="line"><span class="keyword">for</span> (PropertyDescriptor pd : pds) &#123;</span><br><span class="line"><span class="keyword">if</span>(pd.getName().equals(fieldName))&#123;</span><br><span class="line">pd.getWriteMethod().invoke(o, value);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">log.error(e.getMessage(), e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据实体和属性名获取值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetField</span><span class="params">()</span></span>&#123;</span><br><span class="line">TruckBills truckBills = iTruckBillsService.geTruckBills(<span class="string">"02cb5069b44f45dca578e5ada08bf513"</span>, <span class="string">"88"</span>);</span><br><span class="line"></span><br><span class="line">String orderSn = (String) ObjectFieldUtil.getFieldValueByName(<span class="string">"orderSn"</span>, truckBills);</span><br><span class="line">String shipper = (String) ObjectFieldUtil.getFieldValueByName(<span class="string">"shipper"</span>, truckBills);</span><br><span class="line"></span><br><span class="line">String[] fieldNames = ObjectFieldUtil.getFiledName(truckBills);</span><br><span class="line"></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMap = ObjectFieldUtil.getFiledsInfo(truckBills);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">System.out.println(orderSn);</span><br><span class="line">System.out.println(shipper);</span><br><span class="line">System.out.println(Arrays.toString(fieldNames));</span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : listMap) &#123;</span><br><span class="line">System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">Set&lt;Entry&lt;String, Object&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line">System.out.println(entry.getKey() + <span class="string">"-----"</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"---------------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种将字符串转换成java代码并执行的方法：<code>Java Expression Language (JEXL)</code> 是一个表达式语言引擎，可以用来在应用或者框架中使用。</p><p>JEXL受Velocity和JSP 标签库 1.1 (JSTL) 的影响而产生的，需要注意的是，JEXL 并不是 JSTL 中的表达式语言的实现。</p><p>需要先添加jar包，maven配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-jexl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="主要实现步骤："><a href="#主要实现步骤：" class="headerlink" title="主要实现步骤："></a>主要实现步骤：</h4><ol><li>拿到结果集</li><li>构建语言表达式</li><li>动态构建</li></ol><h4 id="核心代码如下："><a href="#核心代码如下：" class="headerlink" title="核心代码如下："></a>核心代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DyMethodUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将字符串转换成java代码并执行</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> jexlExp 需要转换的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 参数集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 方法执行结果</span></span><br><span class="line"><span class="comment"> * 如：</span></span><br><span class="line"><span class="comment"> * String jexlExp="testService.save(person)"; </span></span><br><span class="line"><span class="comment"> * map.put("testService",testService);  </span></span><br><span class="line"><span class="comment"> * map.put("person",person);  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">invokeMethod</span><span class="params">(String jexlExp, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">JexlEngine jexl = <span class="keyword">new</span> JexlEngine();</span><br><span class="line">Expression e = jexl.createExpression(jexlExp);</span><br><span class="line">JexlContext jc = <span class="keyword">new</span> MapContext();</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">jc.set(key, map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == e.evaluate(jc)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e.evaluate(jc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态构建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTemple</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//1.拿到结果集</span></span><br><span class="line"><span class="comment">//2.构建语言表达式</span></span><br><span class="line"><span class="comment">//3.动态构建</span></span><br><span class="line"></span><br><span class="line">TruckBills truckBills = iTruckBillsService.geTruckBills(<span class="string">"02cb5069b44f45dca578e5ada08bf513"</span>, <span class="string">"88"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;TruckGoodsAddr&gt; truckGoodsAddrs = truckBills.getTruckGoodsAddrs();</span><br><span class="line">TruckOther truckOther = truckBills.getTruckOther();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"truckBills"</span>, truckBills);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">System.out.println(JsonBinder.buildNormalBinder().toJson(map));</span><br><span class="line">System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line"></span><br><span class="line">String expression = <span class="string">"truckBills.getTruckGoodsAddrs().get(0).getBillsId()"</span>;</span><br><span class="line"></span><br><span class="line">Object aa = DyMethodUtil.invokeMethod(expression, map);</span><br><span class="line">System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">System.out.println(JsonBinder.buildNormalBinder().toJson(aa));</span><br><span class="line">System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先简单介绍下反射的概念：java反射机制是在&lt;code&gt;运行状态&lt;/code&gt;中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的&lt;code&gt;反射机制&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="JEXL" scheme="https://yuanrengu.com/tags/JEXL/"/>
    
      <category term="解析引擎" scheme="https://yuanrengu.com/tags/%E8%A7%A3%E6%9E%90%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>JAVA设计模式之单例模式</title>
    <link href="https://yuanrengu.com/2020/25a3ff42.html"/>
    <id>https://yuanrengu.com/2020/25a3ff42.html</id>
    <published>2020-02-07T09:42:17.000Z</published>
    <updated>2020-04-14T07:21:40.402Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自：<a href="https://blog.csdn.net/jason0539/article/details/23297037/" target="_blank" rel="noopener">https://blog.csdn.net/jason0539/article/details/23297037/</a></p></blockquote><p><strong>概念</strong>：<code>单例模式指的是，保证一个类只有一个实例，并且提供一个可以全局访问的入口</code>。java中单例模式是一种常见的设计模式，单例模式的写法有好几种，这里主要介绍三种：<code>懒汉式单例</code>、<code>饿汉式单例</code>、<code>登记式单例</code>。</p><p>单例模式有以下特点：</p><ol><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li></ol><p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。在计算机系统中，线程池、缓存、日志对象、对话框、打印机、显卡的驱动程序对象常被设计成单例。这些应用都或多或少具有资源管理器的功能。每台计算机可以有若干个打印机，但只能有一个Printer Spooler，以避免两个打印作业同时输出到打印机中。每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。总之，<strong>选择单例模式就是为了避免不一致状态，避免政出多头。</strong></p><h2 id="1-懒汉式单例"><a href="#1-懒汉式单例" class="headerlink" title="1 懒汉式单例"></a>1 懒汉式单例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式单例类.在第一次调用的时候实例化自己 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton single = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;  </span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。</p><p>（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且掩耳盗铃地认为反射机制不存在。）</p><p>但是以上懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的，并发环境下很可能出现多个Singleton实例，要实现线程安全，有以下三种方式，都是对getInstance这个方法改造，保证了懒汉式单例的线程安全，如果你第一次接触单例模式，对线程安全不是很了解，可以先跳过下面这三小条，去看饿汉式单例，等看完后面再回头考虑线程安全的问题.</p><h3 id="1-1-在getInstance方法上加同步"><a href="#1-1-在getInstance方法上加同步" class="headerlink" title="1.1 在getInstance方法上加同步"></a>1.1 在getInstance方法上加同步</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (single == <span class="keyword">null</span>) &#123;  </span><br><span class="line">             single = <span class="keyword">new</span> Singleton();</span><br><span class="line">         &#125;  </span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-双重检查锁定"><a href="#1-2-双重检查锁定" class="headerlink" title="1.2 双重检查锁定"></a>1.2 双重检查锁定</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">               <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                  singleton = <span class="keyword">new</span> Singleton(); </span><br><span class="line">               &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> singleton; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两次if(singleton==null)检查，这就是<code>双重检查锁</code>这个名字的由来。这种写法是可以保证线程安全的，假设有两个线程同时到达synchronized语句块，那么实例化代码只会由其中先抢到锁的线程执行一次，而后抢到锁的线程会在第二个if判断中发现singleton不为null，所以跳过创建实例的语句。再后面的其他线程再来调用getInstance方法时，只需判断第一次的if(singleton==null)，然后会跳过整个if块，直接return实例化后的对象。</p><p>在双重检查锁模式中，给singleton这个对象加了<code>volatile</code>关键字，那为什么要用volatile呢？主要就在于singleton=newSingleton()，它并非是一个原子操作。</p><p>这种写法的优点是不仅<code>线程安全</code>，而且延迟加载、效率也更高。</p><h3 id="1-3-静态内部类"><a href="#1-3-静态内部类" class="headerlink" title="1.3 静态内部类"></a>1.3 静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> LazyHolder.INSTANCE;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种比上面两种都好一些，<code>既实现了线程安全，又避免了同步带来的性能影响</code>。</p><h2 id="2-饿汉式单例"><a href="#2-饿汉式单例" class="headerlink" title="2 饿汉式单例"></a>2 饿汉式单例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式单例类。在类初始化时，已经自行实例化 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1 single = <span class="keyword">new</span> Singleton1();</span><br><span class="line">    <span class="comment">//静态工厂方法 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式在类创建的同时就已经创建好一个静态的对象供系统使用，以后不再改变，所以<code>天生是线程安全</code>的。</p><h2 id="3-登记式单例-可忽略"><a href="#3-登记式单例-可忽略" class="headerlink" title="3 登记式单例(可忽略)"></a>3 登记式单例(可忽略)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类似Spring里面的方法，将类名注册，下次从里面直接获取。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Singleton3&gt; map = <span class="keyword">new</span> HashMap&lt;String,Singleton3&gt;();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        Singleton3 single = <span class="keyword">new</span> Singleton3();</span><br><span class="line">        map.put(single.getClass().getName(), single);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保护的默认构造</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//静态工厂方法,返还此类唯一的实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span>) &#123;</span><br><span class="line">            name = Singleton3.class.getName();</span><br><span class="line">            System.out.println(<span class="string">"name == null"</span>+<span class="string">"---&gt;name="</span>+name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(map.get(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                map.put(name, (Singleton3) Class.forName(name).newInstance());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个示意性的商业方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">about</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello, I am RegSingleton."</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton3 single3 = Singleton3.getInstance(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(single3.about());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>登记式单例实际上维护了一组单例类的实例，将这些实例存放在一个Map（登记薄）中，对于已经登记过的实例，则从Map直接返回，对于没有登记的，则先登记，然后返回。</strong> </p><p>这里我对登记式单例标记了可忽略，我的理解来说，首先它用的比较少，另外其实内部实现还是用的饿汉式单例，因为其中的static方法块，它的单例在类被装载的时候就被实例化了。</p><h2 id="4-饿汉式和懒汉式区别"><a href="#4-饿汉式和懒汉式区别" class="headerlink" title="4 饿汉式和懒汉式区别"></a>4 饿汉式和懒汉式区别</h2><h3 id="从名字上来说，饿汉和懒汉"><a href="#从名字上来说，饿汉和懒汉" class="headerlink" title="从名字上来说，饿汉和懒汉:"></a>从名字上来说，饿汉和懒汉:</h3><ul><li><code>饿汉</code>就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了；</li><li>而<code>懒汉</code>比较懒，只有当调用getInstance的时候，才会去初始化这个单例。</li></ul><h3 id="另外从以下两点再区分以下这两种方式："><a href="#另外从以下两点再区分以下这两种方式：" class="headerlink" title="另外从以下两点再区分以下这两种方式："></a>另外从以下两点再区分以下这两种方式：</h3><ul><li><strong>线程安全</strong><ul><li><code>饿汉式天生就是线程安全的</code>，可以直接用于多线程而不会出现问题;</li><li><code>懒汉式本身是非线程安全的</code>，为了实现线程安全有几种写法，分别是上面的1.1，1.2，1.3，这三种实现在资源加载和性能方面有些区别。</li></ul></li><li><strong>资源加载和性能</strong><ul><li>饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成；</li><li>而懒汉式顾名思义，会<code>延迟加载</code>，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。</li></ul></li></ul><h3 id="懒汉式中的1-1，1-2，1-3实现有什么区别："><a href="#懒汉式中的1-1，1-2，1-3实现有什么区别：" class="headerlink" title="懒汉式中的1.1，1.2，1.3实现有什么区别："></a>懒汉式中的1.1，1.2，1.3实现有什么区别：</h3><ul><li>第1种，在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟99%的情况下是不需要同步的；</li><li>第2种，在getInstance中做了两次null检查，确保了只有第一次调用单例的时候才会做同步，这样也是线程安全的，同时避免了每次都同步的性能损耗；</li><li>第3种，利用了<code>classloader的机制</code>来保证初始化instance时只有一个线程，所以也是线程安全的，同时没有性能损耗，所以一般我倾向于使用这一种。</li></ul><h3 id="什么是线程安全？"><a href="#什么是线程安全？" class="headerlink" title="什么是线程安全？"></a>什么是线程安全？</h3><p>如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是<code>线程安全</code>的。</p><p>或者说：一个类或者程序所提供的接口对于线程来说是原子操作，或者多个线程之间的切换不会导致该接口的执行结果存在二义性,也就是说我们不用考虑同步的问题，那就是线程安全的。</p><h2 id="5-应用"><a href="#5-应用" class="headerlink" title="5 应用"></a>5 应用</h2><p>以下是一个单例类使用的例子，以懒汉式为例，这里为了保证线程安全，使用了双重检查锁定的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSingleton</span> </span>&#123;</span><br><span class="line">String name = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TestSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> TestSingleton instance = <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">             <span class="keyword">synchronized</span> (TestSingleton.class) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                   instance = <span class="keyword">new</span> TestSingleton(); </span><br><span class="line">                &#125;  </span><br><span class="line">             &#125;  </span><br><span class="line">           &#125; </span><br><span class="line">           <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"the name is "</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到里面加了<code>volatile</code>关键字来声明单例对象，既然synchronized已经起到了多线程下原子性、有序性、可见性的作用，为什么还要加volatile呢，原因已经在下面评论中提到:<a href="http://www.iteye.com/topic/652440" target="_blank" rel="noopener">http://www.iteye.com/topic/652440</a>和<a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" target="_blank" rel="noopener">http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TMain</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">TestStream ts1 = TestSingleton.getInstance();</span><br><span class="line">ts1.setName(<span class="string">"jason"</span>);</span><br><span class="line">TestStream ts2 = TestSingleton.getInstance();</span><br><span class="line">ts2.setName(<span class="string">"0539"</span>);</span><br><span class="line"></span><br><span class="line">ts1.printInfo();</span><br><span class="line">ts2.printInfo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ts1 == ts2)&#123;</span><br><span class="line">System.out.println(<span class="string">"创建的是同一个实例"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"创建的不是同一个实例"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">the name is 0539</span><br><span class="line">the name is 0539</span><br><span class="line">创建的是同一个实例</span><br></pre></td></tr></table></figure><p><code>结论</code>：<strong>由结果可以得知单例模式为一个面向对象的应用程序提供了对象唯一的访问点，不管它实现何种功能，整个应用程序都会同享一个实例对象</strong>。</p><p>对于单例模式的几种实现方式，知道饿汉式和懒汉式的区别，线程安全，资源加载的时机，还有懒汉式为了实现线程安全的3种方式的细微差别。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;转自：&lt;a href=&quot;https://blog.csdn.net/jason0539/article/details/23297037/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://yuanrengu.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://yuanrengu.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis动态调用表名和字段名</title>
    <link href="https://yuanrengu.com/2020/2ecc1e06.html"/>
    <id>https://yuanrengu.com/2020/2ecc1e06.html</id>
    <published>2020-01-17T09:54:51.000Z</published>
    <updated>2020-01-17T09:56:31.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该篇文章写于2016年10月21日</p></blockquote><p>一直在使用Mybatis这个ORM框架，都是使用mybatis里的一些常用功能。今天在项目开发中有个业务是需要限制各个用户对某些表里的字段查询以及某些字段是否显示，如某张表的某些字段不让用户查询到。这种情况下，就需要构建sql来动态传入表名、字段名了。现在对解决方法进行下总结，希望对遇到同样问题的伙伴有些帮助。</p><p>动态SQL是mybatis的强大特性之一，mybatis在对sql语句进行预编译之前，会对sql进行动态解析，解析为一个BoundSql对象，也是在此处对动态sql进行处理。下面让我们先来熟悉下mybatis里<code>#{}</code>与<code>${}</code>的用法。</p><p>在动态sql解析过程，<code>#{}</code>与<code>${}</code>效果是不一样的：</p><blockquote><p><code>#{}</code> 解析为一个 JDBC 预编译语句（prepared statement）的参数标记符。</p></blockquote><p>如以下sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="comment">#&#123;name&#125;;</span></span><br></pre></td></tr></table></figure><p>会被解析为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = ?;</span><br></pre></td></tr></table></figure><p>可以看到#{}被解析为一个参数占位符<code>？</code>。</p><p><code>${ }</code> 仅仅为一个纯碎的 string 替换，在动态 SQL 解析阶段将会进行变量替换<br>如以下sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = $&#123;<span class="keyword">name</span>&#125;;</span><br></pre></td></tr></table></figure><p>当我们传递参数“yuanrengu”时，sql会解析为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">"yuanrengu"</span>;</span><br></pre></td></tr></table></figure><p>可以看到预编译之前的sql语句已经不包含变量name了。</p><p>综上所得， <code>${ }</code> 的变量的替换阶段是在动态 SQL <code>解析阶段</code>，而 <code>#{ }</code>的变量的替换是在 DBMS 中。</p><p><code>#{}</code>与<code>${}</code>的区别可以简单总结如下：</p><ul><li>#{}将传入的参数当成一个字符串，会给传入的参数加一个双引号</li><li><code>${}</code>将传入的参数直接显示生成在sql中，不会添加引号</li><li>#{}能够很大程度上防止sql注入，<code>${}</code>无法防止sql注入</li></ul><p><code>${}</code>在预编译之前已经被变量替换了，这会存在sql注入的风险。如下sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> $&#123;tableName&#125; <span class="keyword">where</span> <span class="keyword">name</span> = $&#123;<span class="keyword">name</span>&#125;</span><br></pre></td></tr></table></figure><p>如果传入的参数tableName为<code>user; delete user; —</code>，那么sql动态解析之后，预编译之前的sql将变为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>; <span class="keyword">delete</span> <span class="keyword">user</span>; <span class="comment">-- where name = ?;</span></span><br></pre></td></tr></table></figure><p><code>—</code>之后的语句将作为注释不起作用，顿时我和我的小伙伴惊呆了！！！看到没，本来的查询语句，竟然偷偷的包含了一个删除表数据的sql，是删除，删除，删除！！！重要的事情说三遍，可想而知，这个风险是有多大。</p><ul><li><code>${}</code>一般用于传输数据库的表名、字段名等</li><li>能用#{}的地方尽量别用<code>${}</code></li></ul><p>通过上面的分析，相信大家可能已经对如何动态调用表名和字段名有些思路了。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUser&quot; resultType=&quot;java.util.Map&quot; parameterType=&quot;java.lang.String&quot; statementType=&quot;STATEMENT&quot;&gt;</span><br><span class="line">  select </span><br><span class="line">      $&#123;columns&#125;</span><br><span class="line">  from $&#123;tableName&#125;</span><br><span class="line">      where COMPANY_REMARK = $&#123;company&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>要实现动态调用表名和字段名，就不能使用预编译了，需添加statementType=”STATEMENT”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statementType：STATEMENT（非预编译），PREPARED（预编译）或CALLABLE中的任意一个，这就告诉 MyBatis 分别使用Statement，PreparedStatement或者CallableStatement。默认：PREPARED。这里显然不能使用预编译，要改成非预编译。</span><br></pre></td></tr></table></figure><p>其次，sql里的变量取值是<code>${xxx}</code>,不是#{xxx}。</p><p>因为<code>${}</code>是将传入的参数直接显示生成sql，如${xxx}传入的参数为字符串数据，需在参数传入前加上引号，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">"sprite"</span>;</span><br><span class="line">name = <span class="string">"'"</span> + name + <span class="string">"'"</span>;</span><br></pre></td></tr></table></figure><p>mybatis动态调用表名和字段名，还可以应用于日志的收集上，如数据库的日志表，每隔一个月动态建一个日志表，表名前缀相同（如log_201610,log_201611等），这样实现日志的分月分表存储，方便日志的分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;该篇文章写于2016年10月21日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直在使用Mybatis这个ORM框架，都是使用mybatis里的一些常用功能。今天在项目开发中有个业务是需要限制各个用户对某些表里的字段查询以及某些字段是否显示，如某张
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://yuanrengu.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://yuanrengu.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>如何招聘程序猿？</title>
    <link href="https://yuanrengu.com/2020/2329b301.html"/>
    <id>https://yuanrengu.com/2020/2329b301.html</id>
    <published>2020-01-17T09:42:12.000Z</published>
    <updated>2020-01-19T03:45:35.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章写于2017年3月14日。虽然写的比较早了，但很多东西依然适用于如今的职场。</p></blockquote><p>近一年技术团队在不断扩充成员，一直忙于高级java工程师、Android工程师、iOS工程师的面试，很想写一篇和招聘程序猿相关的文章，特别是看到“酷壳”里皓哥写的一篇《我是怎么招聘程序员的》文章后，产生很多共鸣。</p><p>虽然工作年限还不够长，但也经历过很多大大小小的面试，即被面试过，也面试过很多人。经历过很多很专业的面试，也经历过一些非常BT和令人不怎么舒服的面试。一个好的面试体验，公司的考核流程和面试官就显得非常重要了，如果考核流程非常繁琐，会让面试者内心没有任何好感，如面试时在前台莫名其妙的被晾置一两个小时，笔试初试复试得跑三趟公司。面试官就更重要了，不要刚开始面试，就弄的像别人欠你钱或别人在挑战的技术能力似的，或者尽问些非常冷门而且工作中完全用不到的技术来彰显自己的博学。</p><p>公司招聘不要弄成一种买卖关系，应该是寻找一些志同道合和跟公司“气场”匹配的伙伴，这里的气场是指跟公司所需要的技能有一定的匹配度、跟公司的理念有一定程度的吻合。公司行政经常给我说：“技术人员是不是很矫情啊？说好来面试的，最后都不来，说好要入职的，入职前一天又说有公司给更高的待遇。”我只能微微一笑的给她说：“你见，或者不见我，我就在那里，不悲不喜。你来入职，或者不来入职，offer反正在你手里，不增只减”。因为我也曾经矫情过，研究生快毕业时，做了一堆的算法和数据结构方面的题，准备了一堆面试常问的题和一些面试技巧，就到处投简历面试（其实当时手里已经有几个不错的offer了），不为找工作，只为刷存在感，回想这年少无知的举动，倍感惭愧。技术圈说小不小，说大其实也不大，毕竟江湖不远，有缘再见，程序猿平时还是要多给自己攒攒口碑的。</p><p>如何去考核一个程序猿是否可以给offer？我在面试应聘者的时候，最主要是要弄清如下几件事：</p><ol><li>应聘者是否可以跟我“正常对话”？</li><li>应聘者的技能是否跟公司所需的技能达到一定的契合度？</li><li>应聘者是否有能力解决工作中的难题？</li><li>应聘者是否可以跟我们团队一起愉快的工作？</li></ol><p>我相信绝大部分的公司在考核应聘者时都会围绕上述四个问题来进行，可能有人会对第一个问题产生疑问，难道还有不能正常对话的人？还真别说，我就遇到几个性格比较“鲜明”的应聘者，面试时头抬的高高的，眼瞅着天花板，一副老子天下第一的表情，技术人员有傲骨可以理解，可是问几个技术问题，却一问三不知，问他之前团队如何协作的，只回答说公司安排的任务不喜欢就离职了，让人真的很难正常对话。对于第二个问题就更重要了，公司当然希望应聘者的技术越牛越好，梦想是美好的，能招到大神这肯定是公司之幸，现实终究还是很骨感，只希望能找到跟公司所需的技能契合度尽可能高的伙伴。</p><p>技术圈比较流行一句话：面试造火箭，工作拧螺丝。这种情况确实比较常见，从某个层面来看是大部分公司程序猿能力的美好愿景，也催促自己去不断完善自己的知识体系。对于第三个问题，程序猿最基本的技能就是要通过网络解决工作中的一些难题，多问度娘，多问谷歌，程序猿比较忌讳的一点就是“拿来主义”，遇到问题不动脑思考张口就问别人。第四个问题，基本就是考查人的社交能力和情商了，个人人为，团队氛围的整体和谐是做好所有项目的前提。毕竟如今的项目都是靠团战，一个人即使能力再强，也很难独立完成整个项目。</p><p>之前我经历过的一些比较传统的面试流程，基本是下面这样的：</p><ol><li>应聘者先做自我介绍</li><li>问一些比较难的非常细节的技术问题，基本就是快问快答的形式</li><li>给应聘者出一些比较怪异的算法题</li></ol><p>个人觉得这种面试形式不是太合适，可能会错过很多适合公司的程序猿。其实我个人不论是面试别人还是被面试时，都非常讨厌第一个问题，拿着别人简历难道不知道别人叫什么名字？技术面试，这种形式上的东西能少就尽量少即可。但应聘者一进来，总得有个关于介绍的开场。我面试应聘者时，别人一进来时我会先问好，给个微笑，让应聘者不要太紧张。让别人做下技术方面的简单介绍，如工作中主要处理哪里方面的业务（电商、金融等等）啊？主要用哪些编程语言？主要用哪些开发架构（dubbo、SOA等）？主要用哪些框架（Spring、mybatis等）？这样也方便对这个人有比较全面的了解，交流时也好针对性的问些问题，做偏技术方面的介绍也好了解这个人的沟通交流能力。毕竟很难从一个人的简历或自我阐述上来考核这个人是否合适。</p><p>我绝不会在面试应聘者时问一些非常细节的问题，我曾经就经历一个非常BT的面试，面试官据称刚从华为出来，一上来就问我是否用过mybatis，我说用过。接下来这哥们问，mybatis是哪一年被开源的？接手的是哪个开发团队？mybatis的升级历史？当然我觉得我可能听错了，我说记不清楚哪一年被开源的，是apache开源的项目，讲解了下mybatis对比hibernate的优势和缺点。这哥们说是都不知道哪一年开源的，也不知道是apache的哪个团队接手，真的用过mybatis？说是我肯定没用过mybatis。当时内心就千万只骏马奔腾而过啊，我真的是在应聘程序猿吗？敢情我用了几年假的mybatis？</p><p>还有一种面试流程是很多朋友都给我说过非常不喜欢的，就是跟hr的面聊，hr的小姐姐们一般都是聊家庭啊，聊什么让应聘者说自己目前做过最骄傲的事情是什么？最失败的事情是什么？还有问应聘者如何处理跟女票的矛盾，陪女票逛街时接到要加班的电话怎么办？还有非常多很奇怪的问题，其实程序猿虽然得到的评价是木讷，但都是很聪明的，这类问题都可以用些标准答案来应付，但不是内心真实的答案啊。例如陪女票逛街的问题，程序猿大都是很有责任心的，如果是项目非常忙，都会主动加班，如果项目没那么忙，好容易陪女票逛街要加啥班啊，毕竟程序猿有个女票还是非常不容易的，人艰不拆啊。</p><p>我在面试时一般会根据应聘者自己的项目描述来提问，考核下他自己说的技能的熟练程度。也遇到一些技术确实够菜，简历写的无比高大上，问他自己说的问题都回答不上来，你问东他答西，完全不在同一频道对话。碰到这种情况，我就会问笔试题里的SpringMVC工作原理(笔试只是公司要求的形式，我一般不会太看重笔试的成绩)，这个问题非常简单，只要用过这个框架的人都能说出个一二三来。这道题也是所有人都答的非常好的，因为网上一搜，答案一大推，问这个问题也是让应聘者放松些不要太紧张，毕竟自己刚写过。但有些人笔试题上答案写了好大一堆，但口述却一点都说不出来，知道什么问题了吧？我真的不介意你笔试时抄网上的东西，只要你能复述出来讲清楚我都算你掌握了这个问题，但假如是抄的东西连复述都说不出来，那面试还有什么可问的？碰到这种情况，我也不能直接打发别人，还得照顾应聘者的自尊心啊，我会跟应聘者聊聊人生聊聊理想，然后面试就愉快的结束了。</p><p>对于这里还得说一点，公司hr小姐姐要求即使面试遇到不合适的应聘者，说话也要照顾对方的面子，因为网络暴力真的很害人，但凡看一些招聘网站的面试分享，说公司好话的基本都是拿到offer了的，说不好话都是没拿到offer的，如果面试体验不好，就尽发些诋毁公司的言论，对后面要来公司应聘的伙伴来说起到非常不好的影响。网络暴力，确实。。。。。。</p><p>如果没有一起工作过，没有一些实际的项目做背景，单靠半个小时或一个多小时的面试，是比较难全面的了解一个人的。个人觉得在应聘程序猿职务时需要做好如下几个方面：</p><ol><li>穿着大方、简单、整洁。（不需穿个西装打个领带）</li><li>提前熟悉公司的业务、招聘需求，需要的技能可以提前准备下，有备无患嘛。这一点非常重要，知己知彼百战不殆。</li><li>对于面试官的问题，知之为知之不知为不知，技术这东西会就是会，不会就是不会，没法伪装或隐瞒，不然等着面试官问个问题而拆穿就尴尬了。</li><li>平时可以多写些技术博客、参入开源项目、参与技术活动，反正我是非常喜欢这样的程序猿，肯定能加分。</li></ol><p>所有的面试技巧都敌不过自己知识体系的深度、广度！不断提升自己，基础扎实，对某一个或几个业务有比较深入的熟悉，这样的小伙伴无论在哪家公司都是非常受欢迎的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章写于2017年3月14日。虽然写的比较早了，但很多东西依然适用于如今的职场。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近一年技术团队在不断扩充成员，一直忙于高级java工程师、Android工程师、iOS工程师的面试，很想写一篇和招聘程序
      
    
    </summary>
    
    
      <category term="奋斗" scheme="https://yuanrengu.com/categories/%E5%A5%8B%E6%96%97/"/>
    
    
      <category term="面试" scheme="https://yuanrengu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Lombok介绍、使用方法和总结</title>
    <link href="https://yuanrengu.com/2020/baec5dff.html"/>
    <id>https://yuanrengu.com/2020/baec5dff.html</id>
    <published>2020-01-13T06:25:00.000Z</published>
    <updated>2020-03-10T02:43:47.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Lombok背景介绍"><a href="#1-Lombok背景介绍" class="headerlink" title="1 Lombok背景介绍"></a>1 Lombok背景介绍</h1><p>官方介绍如下：        </p><blockquote><p>Project Lombok makes java a spicier language by adding ‘handlers’ that know how to build and compile simple, boilerplate-free, not-quite-java code.</p></blockquote><p>大致意思是Lombok通过增加一些“处理程序”，可以让java变得简洁、快速。</p><h1 id="2-Lombok使用方法"><a href="#2-Lombok使用方法" class="headerlink" title="2 Lombok使用方法"></a>2 Lombok使用方法</h1><p>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter/setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter/setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。</p><p>Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法。出现的神奇就是在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。</p><p>Lombok的使用跟引用jar包一样，可以在<a href="https://projectlombok.org/download" target="_blank" rel="noopener">官网</a>下载jar包，也可以使用maven添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们来分析Lombok中注解的具体用法。</p><h2 id="2-1-Data"><a href="#2-1-Data" class="headerlink" title="2.1 @Data"></a>2.1 @Data</h2><p>@Data注解在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</p><p>官方实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="meta">@Setter</span>(AccessLevel.PACKAGE) <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="meta">@Data</span>(staticConstructor=<span class="string">"of"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不使用Lombok，则实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataExample</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String[] getTags() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTags</span><span class="params">(String[] tags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tags = tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"DataExample("</span>   <span class="keyword">this</span>.getName()   <span class="string">", "</span>   <span class="keyword">this</span>.getAge()   <span class="string">", "</span>   <span class="keyword">this</span>.getScore()   <span class="string">", "</span>   Arrays.deepToString(<span class="keyword">this</span>.getTags())   <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> other <span class="keyword">instanceof</span> DataExample;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> DataExample)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    DataExample other = (DataExample) o;</span><br><span class="line">    <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getName() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getAge() != other.getAge()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (Double.compare(<span class="keyword">this</span>.getScore(), other.getScore()) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.deepEquals(<span class="keyword">this</span>.getTags(), other.getTags())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> temp1 = Double.doubleToLongBits(<span class="keyword">this</span>.getScore());</span><br><span class="line">    result = (result*PRIME)   (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">    result = (result*PRIME)   <span class="keyword">this</span>.getAge();</span><br><span class="line">    result = (result*PRIME)   (<span class="keyword">int</span>)(temp1 ^ (temp1 &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">    result = (result*PRIME)   Arrays.deepHashCode(<span class="keyword">this</span>.getTags());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Exercise</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Exercise&lt;T&gt; <span class="title">of</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Exercise&lt;T&gt;(name, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Exercise(name="</span>   <span class="keyword">this</span>.getName()   <span class="string">", value="</span>   <span class="keyword">this</span>.getValue()   <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> other <span class="keyword">instanceof</span> Exercise;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Exercise)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Exercise&lt;?&gt; other = (Exercise&lt;?&gt;) o;</span><br><span class="line">      <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getValue().equals(other.getValue())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">      result = (result*PRIME)   (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">      result = (result*PRIME)   (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getValue().hashCode());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Getter-Setter"><a href="#2-2-Getter-Setter" class="headerlink" title="2.2 @Getter/@Setter"></a>2.2 @Getter/@Setter</h2><p>如果觉得@Data太过残暴（因为@Data集合了@ToString、@EqualsAndHashCode、@Getter/@Setter、@RequiredArgsConstructor的所有特性）不够精细，可以使用@Getter/@Setter注解，此注解在属性上，可以为相应的属性自动生成Getter/Setter方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Setter</span>(AccessLevel.PROTECTED) <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s (age: %d)"</span>, name, age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s (age: %d)"</span>, name, age);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-NonNull"><a href="#2-3-NonNull" class="headerlink" title="2.3 @NonNull"></a>2.3 @NonNull</h2><p>该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">if</span> (person == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-Cleanup"><a href="#2-4-Cleanup" class="headerlink" title="2.4 @Cleanup"></a>2.4 @Cleanup</h2><p>该注解能帮助我们自动调用close()方法，很大的简化了代码。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Cleanup;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="meta">@Cleanup</span> InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="meta">@Cleanup</span> OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">      <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">      out.write(b, <span class="number">0</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不使用Lombok，则需如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">          <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">          out.write(b, <span class="number">0</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">          out.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">        in.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-EqualsAndHashCode"><a href="#2-5-EqualsAndHashCode" class="headerlink" title="2.5 @EqualsAndHashCode"></a>2.5 @EqualsAndHashCode</h2><p>默认情况下，会使用所有非静态（non-static）和非瞬态（non-transient）属性来生成equals和hasCode，也能通过exclude注解来排除一些属性。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(exclude=&#123;<span class="string">"id"</span>, <span class="string">"shape"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsAndHashCodeExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> transientVar = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@EqualsAndHashCode</span>(callSuper=<span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-ToString"><a href="#2-6-ToString" class="headerlink" title="2.6 @ToString"></a>2.6 @ToString</h2><p>类使用@ToString注解，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。</p><p>通过将includeFieldNames参数设为true，就能明确的输出toString()属性。这一点是不是有点绕口，通过代码来看会更清晰些。</p><p>使用Lombok的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span>(exclude=<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(callSuper=<span class="keyword">true</span>, includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Square(super="</span>   <span class="keyword">super</span>.toString()   <span class="string">", width="</span>   <span class="keyword">this</span>.width   <span class="string">", height="</span>   <span class="keyword">this</span>.height   <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ToStringExample("</span>   <span class="keyword">this</span>.getName()   <span class="string">", "</span>   <span class="keyword">this</span>.shape   <span class="string">", "</span>   Arrays.deepToString(<span class="keyword">this</span>.tags)   <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor"><a href="#2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor" class="headerlink" title="2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor"></a>2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</h2><p>无参构造器、部分参数构造器、全参构造器。Lombok没法实现多种参数构造器的重载。</p><p>Lombok示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(staticName = <span class="string">"of"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PROTECTED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="meta">@NonNull</span> <span class="keyword">private</span> T description;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@NoArgsConstructor</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="meta">@NonNull</span> <span class="keyword">private</span> T description;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ConstructorExample</span><span class="params">(T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (description == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"description"</span>);</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ConstructorExample&lt;T&gt; <span class="title">of</span><span class="params">(T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConstructorExample&lt;T&gt;(description);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@java</span>.beans.ConstructorProperties(&#123;<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"description"</span>&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">ConstructorExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (description == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"description"</span>);</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoArgsExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Lombok工作原理分析"><a href="#3-Lombok工作原理分析" class="headerlink" title="3 Lombok工作原理分析"></a>3 Lombok工作原理分析</h1><p>会发现在Lombok使用的过程中，只需要添加相应的注解，无需再为此写任何代码。自动生成的代码到底是如何产生的呢？</p><p>核心之处就是对于注解的解析上。JDK5引入了注解的同时，也提供了两种解析方式。</p><ul><li>运行时解析</li></ul><p>运行时能够解析的注解，必须将@Retention设置为RUNTIME，这样就可以通过反射拿到该注解。java.lang,reflect反射包中提供了一个接口AnnotatedElement，该接口定义了获取注解信息的几个方法，Class、Constructor、Field、Method、Package等都实现了该接口，对反射熟悉的朋友应该都会很熟悉这种解析方式。</p><ul><li>编译时解析</li></ul><p>编译时解析有两种机制，分别简单描述下：</p><p>1）Annotation Processing Tool</p><p>apt自JDK5产生，JDK7已标记为过期，不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因：</p><ul><li>api都在com.sun.mirror非标准包下</li><li>没有集成到javac中，需要额外运行<br>2）Pluggable Annotation Processing API</li></ul><p>JSR 269自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：<br><img src="http://cdn.yuanrengu.com/img/20200113153249.png" alt><br>Lombok本质上就是一个实现了“JSR 269 API”的程序。在使用javac的过程中，它产生作用的具体流程如下：</p><ol><li>javac对源代码进行分析，生成了一棵抽象语法树（AST）</li><li>运行过程中调用实现了“JSR 269 API”的Lombok程序<br>3, 此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点</li><li>javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）</li></ol><p>拜读了Lombok源码，对应注解的实现都在HandleXXX中，比如@Getter注解的实现时HandleGetter.handle()。还有一些其它类库使用这种方式实现，比如Google Auto、Dagger等等。</p><h1 id="4-Lombok的优缺点"><a href="#4-Lombok的优缺点" class="headerlink" title="4 Lombok的优缺点"></a>4 Lombok的优缺点</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol><li>能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率</li><li>让代码变得简洁，不用过多的去关注相应的方法</li><li>属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等</li></ol><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ol><li>不支持多种参数构造器的重载</li><li>虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</li></ol><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>Lombok虽然有很多优点，但Lombok更类似于一种IDE插件，项目也需要依赖相应的jar包。Lombok依赖jar包是因为编译时要用它的注解，为什么说它又类似插件？因为在使用时，eclipse或IntelliJ IDEA都需要安装相应的插件，在编译器编译时通过操作AST（抽象语法树）改变字节码生成，变向的就是说它在改变java语法。它不像spring的依赖注入或者mybatis的ORM一样是运行时的特性，而是编译时的特性。这里我个人最感觉不爽的地方就是对插件的依赖！因为Lombok只是省去了一些人工生成代码的麻烦，但IDE都有快捷键来协助生成getter/setter等方法，也非常方便。</p><p><strong>知乎上有位大神发表过对Lombok的一些看法：</strong></p><blockquote><p><strong>这是一种低级趣味的插件，不建议使用。JAVA发展到今天，各种插件层出不穷，如何甄别各种插件的优劣？<br>能从架构上优化你的设计的，能提高应用程序性能的 ，实现高度封装可扩展的…，<br>像lombok这种，像这种插件，已经不仅仅是插件了，改变了你如何编写源码，<br>事实上，少去了代码你写上去又如何？<br>如果JAVA家族到处充斥这样的东西，那只不过是一坨披着金属颜色的屎，迟早会被其它的语言取代。</strong></p></blockquote><p>虽然话糙但理确实不糙，试想一个项目有非常多类似Lombok这样的插件，个人觉得真的会极大的降低阅读源代码的舒适度。</p><p>虽然非常不建议在属性的getter/setter写一些业务代码，但在多年项目的实战中，有时通过给getter/setter加一点点业务代码，能极大的简化某些业务场景的代码。所谓取舍，也许就是这时的舍弃一定的规范，取得极大的方便。</p><p>我现在非常坚信一条理念，任何编程语言或插件，都仅仅只是工具而已，即使工具再强大也在于用的人，就如同小米加步枪照样能赢飞机大炮的道理一样。结合具体业务场景和项目实际情况，无需一味追求高大上的技术，适合的才是王道。</p><p><strong>Lombok有它的得天独厚的优点，也有它避之不及的缺点，熟知其优缺点，在实战中灵活运用才是王道。</strong></p><p>参考：<br><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a><br><a href="https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv</a><br><a href="https://www.zhihu.com/question/42348457" target="_blank" rel="noopener">https://www.zhihu.com/question/42348457</a><br><a href="https://blog.csdn.net/ghsau/article/details/52334762" target="_blank" rel="noopener">https://blog.csdn.net/ghsau/article/details/52334762</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Lombok背景介绍&quot;&gt;&lt;a href=&quot;#1-Lombok背景介绍&quot; class=&quot;headerlink&quot; title=&quot;1 Lombok背景介绍&quot;&gt;&lt;/a&gt;1 Lombok背景介绍&lt;/h1&gt;&lt;p&gt;官方介绍如下：        &lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="Lombok" scheme="https://yuanrengu.com/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Integer和Integer比较以及Integer和Int的比较分析</title>
    <link href="https://yuanrengu.com/2020/6bbb74ca.html"/>
    <id>https://yuanrengu.com/2020/6bbb74ca.html</id>
    <published>2020-01-13T06:24:18.000Z</published>
    <updated>2020-01-13T06:42:16.347Z</updated>
    
    <content type="html"><![CDATA[<p>发现做项目的过程中，在数值类型的比较上容易犯错，特别是Integer和Integer的比较，Integer和int的比较。虽然这些都是些基础语法，但稍不留意就容易犯错，在实际开发过程中如果出现这类失误，很容易失之毫厘谬以千里。在这里，总结下这些基础知识点。</p><p>java虽然宣称一切都是对象，但原始数据类型是例外。int是整形数字，是java的9个原始数据类型（Primitive Types）（boolean、byte、short、char、int、float、double、long、void）之一。Integer是int对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。在<strong>java 5中引入了自动装箱和自动拆箱功能（boxing/unboxing）</strong>，java可以根据上下文，自动进行转换，极大地简化了相关编程。javac自动把<strong>装箱</strong>转换为<strong>Integer.valueOf()</strong>,把<strong>拆箱</strong>替换为<strong>Integer.intValue()</strong>。</p><p>自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，他们发生在<code>编译阶段</code>，也就是生产的字节码是一致的。（此句摘自极客时间专栏）</p><p>原始数据类型的变量，需要使用并发相关手段才能保证线程安全。如果有线程安全的计算需要，建议考虑使用类似AtomicInteger、AtomicLong这样的线程安全类。</p><p><code>原始数据类型和java泛型并不能配合使用</code>。因为java的泛型某种程度上可以算作伪泛型，它完全是一种<code>编译期</code>的技巧，java编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为Object。</p><p>废话不多说，直接来demo，这样效果更直接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Integer a1 = <span class="number">6</span>;</span><br><span class="line">Integer a2 = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> a11 = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a1 == a2); <span class="comment">//true</span></span><br><span class="line">System.out.println(a1 == a11); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">int</span> a33 = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a3 == a4); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//Integer会自动拆箱为int，所以为true</span></span><br><span class="line">System.out.println(a3 == a33); <span class="comment">//true</span></span><br><span class="line">System.out.println(a3.equals(a4)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">Integer a5 = <span class="keyword">new</span> Integer(<span class="number">6</span>);</span><br><span class="line">Integer a6 = <span class="keyword">new</span> Integer(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a5 == a6); <span class="comment">//false</span></span><br><span class="line">System.out.println(a5.equals(a6)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要明确的一点是，包装型（Integer）和基本型（int）比较会自动拆箱（jdk1.5以上）。</p><p>在这里很多人比较容易迷惑的是如下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer a1 = <span class="number">6</span>;</span><br><span class="line">Integer a2 = <span class="number">6</span>;</span><br><span class="line">System.out.println(a1 == a2); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line">System.out.println(a3 == a4); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>如果研究过jdk源码，你就会发现Integer a3 = 128;在java编译时会被翻译成 Integer a3 = Integer.valueOf(128); 我们再来看看valueOf()的源码就更清晰了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上源码就会发现，<code>对于-128到127之间的数，会进行缓存</code>，Integer a1 = 6时，会将6进行缓存，下次再写Integer a2 = 6;时，就会直接从缓存中取，也就不用new一个对象了，所以a1和a2比较时就为true。但a3和a4是超过范围，会new一个对象，<code>==是进行地址和值比较，是比较两个对象在JVM中的地址</code>，这时a3和a4虽然值相同但地址是不一样的，所以比较就为false了。</p><p>通过上面的分析可知：</p><ul><li>两个都不是new出来的Integer，且数值在-128~127之间，用==比较时，基本值相等时为true，否则为false；</li><li>两个都是new出来的Integer，为false</li><li>int和Integer比较，数值相同，用==比较时为true。（因为Integer会自动拆箱为int去比较）</li></ul><blockquote><p><code>所有包装类对象之间值的比较，建议使用equals方法比较</code>。</p></blockquote><p><code>==</code>判断对象是否同一个。</p><p>Integer var = ?在<code>缓存区间</code>的赋值，会复用已有对象，因此这个区间内的Integer使用==进行判断可通过，但是区间之外的所有数据，则会在<code>堆</code>上新产生，不会通过。</p><p>因此如果用== 来比较数值，很可能在小的测试数据中通过，而到了生产环境才出问题。</p><p>为了节省内容，对与下列包装对象的两个实例，当他们的基本值相同时，用==判断会为true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Boolean  </span><br><span class="line">Byte  </span><br><span class="line">Character, \u0000 - \u007f(7f是十进制的127)  </span><br><span class="line">Integer, -128 — 127</span><br></pre></td></tr></table></figure><p>我们也可以看看其它包装型的缓存情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Boolean：(全部缓存)</span><br><span class="line">Byte：(全部缓存)</span><br><span class="line"></span><br><span class="line">Character(缓存范围<span class="string">'\u0000'</span>到<span class="string">'\u007F'</span>)</span><br><span class="line">Short(-<span class="number">128</span> — <span class="number">127</span>缓存)</span><br><span class="line">Long(-<span class="number">128</span> — <span class="number">127</span>缓存)</span><br><span class="line"></span><br><span class="line">Float(没有缓存)</span><br><span class="line">﻿﻿﻿﻿﻿﻿Doulbe(没有缓存)</span><br></pre></td></tr></table></figure><p>﻿﻿﻿﻿﻿﻿<br>如果要比较两个Integer对象的值（均为new的对象），可以通过<code>.intValue()</code>进行转换后来比较，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line">System.out.println(a3.intValue() == a4.intValue());</span><br></pre></td></tr></table></figure><p>也可以使用<code>equal()</code>来进行比较，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line">System.out.println(a3.equals(a4)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现做项目的过程中，在数值类型的比较上容易犯错，特别是Integer和Integer的比较，Integer和int的比较。虽然这些都是些基础语法，但稍不留意就容易犯错，在实际开发过程中如果出现这类失误，很容易失之毫厘谬以千里。在这里，总结下这些基础知识点。&lt;/p&gt;
&lt;p&gt;j
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="java" scheme="https://yuanrengu.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>1.Apollo本地运行环境搭建</title>
    <link href="https://yuanrengu.com/2020/49f0797e.html"/>
    <id>https://yuanrengu.com/2020/49f0797e.html</id>
    <published>2020-01-13T06:20:20.000Z</published>
    <updated>2020-01-13T07:35:10.863Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Apollo官方文档的介绍其实已经很详细，出一个Apollo系列主要是对自己学习的一个归纳、源码解读以及踩坑的总结。大家还是以阅读官方文档为主！<br>Apollo系列会分篇介绍环境的搭建、常用场景的配置分析、源码解读等。<strong>系列文章均以官方文档为主！！！</strong><br><code>希望大家能积极讨论，有问题可随时留言，一起学习！</code></p></blockquote><p>在实际的项目开发中经常会遇到配置信息的场景，常见的有两种配置形式：1.基于<strong>本地配置形式（通常有两种做法：将配置信息耦合在业务代码中；将配置信息配置在配置文</strong>件）；2.适用于大规模分布式场景的<strong>集中式配置</strong>形式。</p><p>本地配置会有非常多的痛点，如修改代码带来的麻烦、修改配置后获取新配置不实时等。集中式配置好处非常多（虽然也会带来麻烦，但相比于好处，这些麻烦还是可以接受的），结合猿人谷多年的实战，在下面几点非常有效果：</p><ul><li>配置信息统一管理</li><li>动态获取/更新配置信息</li><li>降低运维人员的维护成本</li><li>降低配置出错率</li></ul><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><p>服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。</p><p>Java客户端不依赖任何框架，能够运行于所有Java运行时环境，同时对Spring/Spring Boot环境也有较好的支持。</p><p>本篇介绍如何在本地使用IDE编译、运行Apollo。Talk is cheap，Show me the code. 学习开源最有效的方式就是将项目实实在在的跑起来，边踩坑边学习边总结，这样才能收获更多。</p><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1 环境搭建"></a>1 环境搭建</h1><h2 id="1-1-本地运行环境"><a href="#1-1-本地运行环境" class="headerlink" title="1.1 本地运行环境"></a>1.1 本地运行环境</h2><p>本地开发需要如下组件：</p><ul><li>Java：1.8+</li><li>MySQL：5.6.5+</li><li>IDE：IntelliJ IDEA 2018.1.8(Ultimate Edition) ,版本可以更新一点，但某些低版本的IDEA可能会出一些奇奇怪怪的小问题。</li></ul><p><code>踩坑</code>：IDEA在2018.1.8之前的版本debug时报程序包<strong>com.netflix.servo.util</strong>不存在，其实这个包是有的。当时百思不得其解，检查之后再检查，也没发现啥问题，升级IDEA版本后，世界安静了，你说意外不意外！<br><img src="https://img-blog.csdnimg.cn/20191213154638291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-2-导入数据库信息"><a href="#1-2-导入数据库信息" class="headerlink" title="1.2 导入数据库信息"></a>1.2 导入数据库信息</h2><p>Apollo配置信息的存储是适用的<code>Mysql</code>，需要一些初始化的数据库信息。市面上还有一些配置中心的相关开源项目，如百度开源的DisConf（也是适用Mysql存储配置信息）、360开源的QConf（使用的是ZooKeeper）、Spring Cloud的组件Spring Cloud Config等。</p><h3 id="1-2-1-创建ApolloPortalDB"><a href="#1-2-1-创建ApolloPortalDB" class="headerlink" title="1.2.1 创建ApolloPortalDB"></a>1.2.1 创建ApolloPortalDB</h3><p><strong>apolloportaldb.sql</strong>的信息如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Database</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ApolloPortalDB <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Use</span> ApolloPortalDB;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table app</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`App`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`App`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'应用名'</span>,</span><br><span class="line">  <span class="string">`OrgId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门Id'</span>,</span><br><span class="line">  <span class="string">`OrgName`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门名字'</span>,</span><br><span class="line">  <span class="string">`OwnerName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerName'</span>,</span><br><span class="line">  <span class="string">`OwnerEmail`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerEmail'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Name`</span> (<span class="string">`Name`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table appnamespace</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`AppNamespace`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`AppNamespace`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'namespace名字，注意，需要全局唯一'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'app id'</span>,</span><br><span class="line">  <span class="string">`Format`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'properties'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace的format类型'</span>,</span><br><span class="line">  <span class="string">`IsPublic`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace是否为公共'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_AppId`</span> (<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`Name_AppId`</span> (<span class="string">`Name`</span>,<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用namespace定义'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumer</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Consumer`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Consumer`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'应用名'</span>,</span><br><span class="line">  <span class="string">`OrgId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门Id'</span>,</span><br><span class="line">  <span class="string">`OrgName`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门名字'</span>,</span><br><span class="line">  <span class="string">`OwnerName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerName'</span>,</span><br><span class="line">  <span class="string">`OwnerEmail`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerEmail'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'开放API消费者'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumeraudit</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ConsumerAudit`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ConsumerAudit`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`ConsumerId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Consumer Id'</span>,</span><br><span class="line">  <span class="string">`Uri`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'访问的Uri'</span>,</span><br><span class="line">  <span class="string">`Method`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'访问的Method'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ConsumerId`</span> (<span class="string">`ConsumerId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'consumer审计表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumerrole</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ConsumerRole`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ConsumerRole`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`ConsumerId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Consumer Id'</span>,</span><br><span class="line">  <span class="string">`RoleId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Role Id'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleId`</span> (<span class="string">`RoleId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ConsumerId_RoleId`</span> (<span class="string">`ConsumerId`</span>,<span class="string">`RoleId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'consumer和role的绑定表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumertoken</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ConsumerToken`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ConsumerToken`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`ConsumerId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'ConsumerId'</span>,</span><br><span class="line">  <span class="string">`Token`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'token'</span>,</span><br><span class="line">  <span class="string">`Expires`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'2099-01-01 00:00:00'</span> <span class="keyword">COMMENT</span> <span class="string">'token失效时间'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_Token`</span> (<span class="string">`Token`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'consumer token表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table favorite</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Favorite`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Favorite`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`UserId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'收藏的用户'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Position`</span> <span class="built_in">int</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'10000'</span> <span class="keyword">COMMENT</span> <span class="string">'收藏顺序'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_UserId`</span> (<span class="string">`UserId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">23</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用收藏表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table permission</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Permission`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Permission`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`PermissionType`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'权限类型'</span>,</span><br><span class="line">  <span class="string">`TargetId`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'权限对象类型'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_TargetId_PermissionType`</span> (<span class="string">`TargetId`</span>(<span class="number">191</span>),<span class="string">`PermissionType`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'permission表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table role</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Role`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`RoleName`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'Role name'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleName`</span> (<span class="string">`RoleName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'角色表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table rolepermission</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`RolePermission`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`RolePermission`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`RoleId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Role Id'</span>,</span><br><span class="line">  <span class="string">`PermissionId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Permission Id'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleId`</span> (<span class="string">`RoleId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_PermissionId`</span> (<span class="string">`PermissionId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'角色和权限的绑定表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table serverconfig</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ServerConfig`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ServerConfig`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Key`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项Key'</span>,</span><br><span class="line">  <span class="string">`Value`</span> <span class="built_in">varchar</span>(<span class="number">2048</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项值'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Key`</span> (<span class="string">`Key`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'配置服务自身配置'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table userrole</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`UserRole`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`UserRole`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`UserId`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户身份标识'</span>,</span><br><span class="line">  <span class="string">`RoleId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Role Id'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleId`</span> (<span class="string">`RoleId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_UserId_RoleId`</span> (<span class="string">`UserId`</span>,<span class="string">`RoleId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户和role的绑定表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table Users</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Users`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Users`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`Password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`Email`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱地址'</span>,</span><br><span class="line">  <span class="string">`Enabled`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table Authorities</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Authorities`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Authorities`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Authority`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`ServerConfig`</span> (<span class="string">`Key`</span>, <span class="string">`Value`</span>, <span class="string">`Comment`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'apollo.portal.envs'</span>, <span class="string">'dev'</span>, <span class="string">'可支持的环境列表'</span>),</span><br><span class="line">    (<span class="string">'organizations'</span>, <span class="string">'[&#123;\"orgId\":\"TEST1\",\"orgName\":\"样例部门1\"&#125;,&#123;\"orgId\":\"TEST2\",\"orgName\":\"样例部门2\"&#125;]'</span>, <span class="string">'部门列表'</span>),</span><br><span class="line">    (<span class="string">'superAdmin'</span>, <span class="string">'apollo'</span>, <span class="string">'Portal超级管理员'</span>),</span><br><span class="line">    (<span class="string">'api.readTimeout'</span>, <span class="string">'10000'</span>, <span class="string">'http接口read timeout'</span>),</span><br><span class="line">    (<span class="string">'consumer.token.salt'</span>, <span class="string">'someSalt'</span>, <span class="string">'consumer token salt'</span>),</span><br><span class="line">    (<span class="string">'admin.createPrivateNamespace.switch'</span>, <span class="string">'true'</span>, <span class="string">'是否允许项目管理员创建私有namespace'</span>),</span><br><span class="line">    (<span class="string">'configView.memberOnly.envs'</span>, <span class="string">'pro'</span>, <span class="string">'只对项目成员显示配置信息的环境列表，多个env以英文逗号分隔'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Users`</span> (<span class="string">`Username`</span>, <span class="string">`Password`</span>, <span class="string">`Email`</span>, <span class="string">`Enabled`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'apollo'</span>, <span class="string">'$2a$10$7r20uS.BQ9uBpf3Baj3uQOZvMVvB1RN3PYoKE94gtz2.WAOuiiwXS'</span>, <span class="string">'apollo@acme.com'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Authorities`</span> (<span class="string">`Username`</span>, <span class="string">`Authority`</span>) <span class="keyword">VALUES</span> (<span class="string">'apollo'</span>, <span class="string">'ROLE_user'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-创建ApolloConfigDB"><a href="#1-2-2-创建ApolloConfigDB" class="headerlink" title="1.2.2 创建ApolloConfigDB"></a>1.2.2 创建ApolloConfigDB</h3><p><strong>apolloconfigdb.sql</strong>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Database</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ApolloConfigDB <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Use</span> ApolloConfigDB;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table app</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`App`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`App`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'应用名'</span>,</span><br><span class="line">  <span class="string">`OrgId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门Id'</span>,</span><br><span class="line">  <span class="string">`OrgName`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门名字'</span>,</span><br><span class="line">  <span class="string">`OwnerName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerName'</span>,</span><br><span class="line">  <span class="string">`OwnerEmail`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerEmail'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Name`</span> (<span class="string">`Name`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table appnamespace</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`AppNamespace`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`AppNamespace`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'namespace名字，注意，需要全局唯一'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'app id'</span>,</span><br><span class="line">  <span class="string">`Format`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'properties'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace的format类型'</span>,</span><br><span class="line">  <span class="string">`IsPublic`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace是否为公共'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_AppId`</span> (<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`Name_AppId`</span> (<span class="string">`Name`</span>,<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用namespace定义'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table audit</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Audit`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Audit`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`EntityName`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'表名'</span>,</span><br><span class="line">  <span class="string">`EntityId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'记录ID'</span>,</span><br><span class="line">  <span class="string">`OpName`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'操作类型'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'日志审计表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table cluster</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Cluster`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Cluster`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'集群名字'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'App id'</span>,</span><br><span class="line">  <span class="string">`ParentClusterId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父cluster'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_AppId_Name`</span> (<span class="string">`AppId`</span>,<span class="string">`Name`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ParentClusterId`</span> (<span class="string">`ParentClusterId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'集群'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table commit</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Commit`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Commit`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`ChangeSets`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改变更集'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'namespaceName'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`ClusterName`</span> (<span class="string">`ClusterName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`NamespaceName`</span> (<span class="string">`NamespaceName`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'commit 历史表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table grayreleaserule</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`GrayReleaseRule`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`GrayReleaseRule`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Cluster Name'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Namespace Name'</span>,</span><br><span class="line">  <span class="string">`BranchName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'branch name'</span>,</span><br><span class="line">  <span class="string">`Rules`</span> <span class="built_in">varchar</span>(<span class="number">16000</span>) <span class="keyword">DEFAULT</span> <span class="string">'[]'</span> <span class="keyword">COMMENT</span> <span class="string">'灰度规则'</span>,</span><br><span class="line">  <span class="string">`ReleaseId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'灰度对应的release'</span>,</span><br><span class="line">  <span class="string">`BranchStatus`</span> <span class="built_in">tinyint</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'灰度分支状态: 0:删除分支,1:正在使用的规则 2：全量发布'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Namespace`</span> (<span class="string">`AppId`</span>,<span class="string">`ClusterName`</span>,<span class="string">`NamespaceName`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'灰度规则表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table instance</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Instance`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Instance`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`DataCenter`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Data Center Name'</span>,</span><br><span class="line">  <span class="string">`Ip`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'instance ip'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_UNIQUE_KEY`</span> (<span class="string">`AppId`</span>,<span class="string">`ClusterName`</span>,<span class="string">`Ip`</span>,<span class="string">`DataCenter`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_IP`</span> (<span class="string">`Ip`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'使用配置的应用实例'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table instanceconfig</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`InstanceConfig`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`InstanceConfig`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`InstanceId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Instance Id'</span>,</span><br><span class="line">  <span class="string">`ConfigAppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Config App Id'</span>,</span><br><span class="line">  <span class="string">`ConfigClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Config Cluster Name'</span>,</span><br><span class="line">  <span class="string">`ConfigNamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Config Namespace Name'</span>,</span><br><span class="line">  <span class="string">`ReleaseKey`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'发布的Key'</span>,</span><br><span class="line">  <span class="string">`ReleaseDeliveryTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'配置获取时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_UNIQUE_KEY`</span> (<span class="string">`InstanceId`</span>,<span class="string">`ConfigAppId`</span>,<span class="string">`ConfigNamespaceName`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ReleaseKey`</span> (<span class="string">`ReleaseKey`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Valid_Namespace`</span> (<span class="string">`ConfigAppId`</span>,<span class="string">`ConfigClusterName`</span>,<span class="string">`ConfigNamespaceName`</span>,<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用实例的配置信息'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table item</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Item`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Item`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`NamespaceId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'集群NamespaceId'</span>,</span><br><span class="line">  <span class="string">`Key`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项Key'</span>,</span><br><span class="line">  <span class="string">`Value`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'配置项值'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`LineNum`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'行号'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_GroupId`</span> (<span class="string">`NamespaceId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'配置项目'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table namespace</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Namespace`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Namespace`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Cluster Name'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Namespace Name'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId_ClusterName_NamespaceName`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>),<span class="string">`ClusterName`</span>(<span class="number">191</span>),<span class="string">`NamespaceName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_NamespaceName`</span> (<span class="string">`NamespaceName`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'命名空间'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table namespacelock</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`NamespaceLock`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`NamespaceLock`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">  <span class="string">`NamespaceId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'集群NamespaceId'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'软删除'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_NamespaceId`</span> (<span class="string">`NamespaceId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'namespace的编辑锁'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table release</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Release`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Release`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`ReleaseKey`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'发布的Key'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'发布名字'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发布说明'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'namespaceName'</span>,</span><br><span class="line">  <span class="string">`Configurations`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发布配置'</span>,</span><br><span class="line">  <span class="string">`IsAbandoned`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'是否废弃'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId_ClusterName_GroupName`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>),<span class="string">`ClusterName`</span>(<span class="number">191</span>),<span class="string">`NamespaceName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ReleaseKey`</span> (<span class="string">`ReleaseKey`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'发布'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table releasehistory</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ReleaseHistory`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ReleaseHistory`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'namespaceName'</span>,</span><br><span class="line">  <span class="string">`BranchName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'发布分支名'</span>,</span><br><span class="line">  <span class="string">`ReleaseId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'关联的Release Id'</span>,</span><br><span class="line">  <span class="string">`PreviousReleaseId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'前一次发布的ReleaseId'</span>,</span><br><span class="line">  <span class="string">`Operation`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'发布类型，0: 普通发布，1: 回滚，2: 灰度发布，3: 灰度规则更新，4: 灰度合并回主分支发布，5: 主分支发布灰度自动发布，6: 主分支回滚灰度自动发布，7: 放弃灰度'</span>,</span><br><span class="line">  <span class="string">`OperationContext`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发布上下文信息'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Namespace`</span> (<span class="string">`AppId`</span>,<span class="string">`ClusterName`</span>,<span class="string">`NamespaceName`</span>,<span class="string">`BranchName`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ReleaseId`</span> (<span class="string">`ReleaseId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'发布历史'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table releasemessage</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ReleaseMessage`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ReleaseMessage`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Message`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'发布的消息内容'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Message`</span> (<span class="string">`Message`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'发布消息'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table serverconfig</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ServerConfig`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ServerConfig`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Key`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项Key'</span>,</span><br><span class="line">  <span class="string">`Cluster`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置对应的集群，default为不针对特定的集群'</span>,</span><br><span class="line">  <span class="string">`Value`</span> <span class="built_in">varchar</span>(<span class="number">2048</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项值'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Key`</span> (<span class="string">`Key`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'配置服务自身配置'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`ServerConfig`</span> (<span class="string">`Key`</span>, <span class="string">`Cluster`</span>, <span class="string">`Value`</span>, <span class="string">`Comment`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'eureka.service.url'</span>, <span class="string">'default'</span>, <span class="string">'http://localhost:8080/eureka/'</span>, <span class="string">'Eureka服务Url，多个service以英文逗号分隔'</span>),</span><br><span class="line">    (<span class="string">'namespace.lock.switch'</span>, <span class="string">'default'</span>, <span class="string">'false'</span>, <span class="string">'一次发布只能有一个人修改开关'</span>),</span><br><span class="line">    (<span class="string">'item.key.length.limit'</span>, <span class="string">'default'</span>, <span class="string">'128'</span>, <span class="string">'item key 最大长度限制'</span>),</span><br><span class="line">    (<span class="string">'item.value.length.limit'</span>, <span class="string">'default'</span>, <span class="string">'20000'</span>, <span class="string">'item value最大长度限制'</span>),</span><br><span class="line">    (<span class="string">'config-service.cache.enabled'</span>, <span class="string">'default'</span>, <span class="string">'false'</span>, <span class="string">'ConfigService是否开启缓存，开启后能提高性能，但是会增大内存消耗！'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br></pre></td></tr></table></figure><h1 id="2-本地启动"><a href="#2-本地启动" class="headerlink" title="2 本地启动"></a>2 本地启动</h1><h2 id="2-1-Apollo-Config-Service和Apollo-Admin-Service"><a href="#2-1-Apollo-Config-Service和Apollo-Admin-Service" class="headerlink" title="2.1 Apollo Config Service和Apollo Admin Service"></a>2.1 Apollo Config Service和Apollo Admin Service</h2><p>在本地开发时，一般会同时启动<code>apollo-configservice</code>和<code>apollo-adminservice</code>,是基于<strong>appollo-assembly</strong>来启动的，后面会进行详细介绍。</p><h3 id="2-1-1-新建运行配置"><a href="#2-1-1-新建运行配置" class="headerlink" title="2.1.1 新建运行配置"></a>2.1.1 新建运行配置</h3><p>如下图所示，点击Edit Configurations…<br><img src="https://img-blog.csdnimg.cn/20191213160123359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建Application：<br><img src="https://img-blog.csdnimg.cn/20191213160505542.png" alt="在这里插入图片描述"></p><h3 id="2-1-2-配置Application"><a href="#2-1-2-配置Application" class="headerlink" title="2.1.2 配置Application"></a>2.1.2 配置Application</h3><p><img src="https://img-blog.csdnimg.cn/20191213160242149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示：</p><ul><li><p><strong>Name</strong>：ConfigAdminApplication</p></li><li><p><strong>Main class配置</strong>：<code>com.ctrip.framework.apollo.assembly.ApolloApplication</code></p><blockquote><p>如果希望独立启动apollo-configservice和apollo-adminservice，可以把Main Class分别换成 com.ctrip.framework.apollo.configservice.ConfigServiceApplication和 com.ctrip.framework.apollo.adminservice.AdminServiceApplication</p></blockquote></li><li><p><strong>VM options配置</strong>:username和password要填对。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Dapollo_profile=github</span><br><span class="line">-Dspring.datasource.url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8</span><br><span class="line">-Dspring.datasource.username=root</span><br><span class="line">-Dspring.datasource.password=123456</span><br></pre></td></tr></table></figure><p> 可以指定日志文件的路径。</p><blockquote><p>程序默认日志输出为/opt/logs/100003171/apollo-assembly.log，如果需要修改日志文件路径，可以增加logging.file参数，如下：</p></blockquote></li><li><p>Dlogging.file=/your-path/apollo-assembly.log</p></li><li><p><strong>Program arguments配置</strong>: –configservice –adminservice</p></li></ul><p>启动完成后，打开<code>http://localhost:8080</code>可以看到apollo-configservice和apollo-adminservice都已经启动完成并注册到Eureka。</p><p><img src="https://img-blog.csdnimg.cn/20191213161451583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-Apollo-Portal"><a href="#2-2-Apollo-Portal" class="headerlink" title="2.2 Apollo-Portal"></a>2.2 Apollo-Portal</h2><p>本地启动apollo-portal跟上面启动apollo-configservice和apollo-adminservice很相似。</p><p>跟上面一样，创建Application：<br><img src="https://img-blog.csdnimg.cn/20191213160505542.png" alt="在这里插入图片描述"><br>配置Application：<br><img src="https://img-blog.csdnimg.cn/20191213161818943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示：</p><ul><li><strong>Name</strong>：PortalApplication</li><li><strong>Main class配置</strong>：<code>com.ctrip.framework.apollo.portal.PortalApplication</code></li><li><strong>VM options配置</strong>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Dapollo_profile=github,auth</span><br><span class="line">-Ddev_meta=http://localhost:8080/</span><br><span class="line">-Dserver.port=8070</span><br><span class="line">-Dspring.datasource.url=jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8</span><br><span class="line">-Dspring.datasource.username=root</span><br><span class="line">-Dspring.datasource.password=123456</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li>这里指定了apollo_profile是github和auth，其中github是Apollo必须的一个profile，用于数据库的配置，auth是从0.9.0新增的，用来支持使用apollo提供的Spring Security简单认证。</li><li>程序默认日志输出为/opt/logs/100003173/apollo-portal.log，如果需要修改日志文件路径，可以增加logging.file参数，如下：</li><li>Dlogging.file=/your-path/apollo-portal.log</li></ul></blockquote><p>启动完后，打开 <a href="http://localhost:8070" target="_blank" rel="noopener">http://localhost:8070</a> 就可以看到Apollo配置中心界面了。<br><img src="https://img-blog.csdnimg.cn/20191213162330903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以在上面做些创建项目的测试。<br><img src="https://img-blog.csdnimg.cn/20191213162634846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以创建anna2019项目为例。下图为创建项目后，添加了两个配置。（<strong>建议大家一定一定要动手操作下，放心的做测试，不会删库的</strong>）<br><img src="https://img-blog.csdnimg.cn/20191213170515790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-Demo应用接入"><a href="#3-Demo应用接入" class="headerlink" title="3 Demo应用接入"></a>3 Demo应用接入</h1><p>项目中有一个样例客户端的项目：apollo-demo。</p><p>跟上面一样，创建Application。<br><img src="https://img-blog.csdnimg.cn/20191213165652992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示：</p><ul><li><strong>Name</strong>：SimpleApolloConfigDemo</li><li><strong>Main class配置</strong>：<code>com.ctrip.framework.apollo.demo.api.SimpleApolloConfigDemo</code></li><li><strong>VM options配置：</strong>-Dapollo.meta=<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></li></ul><p>apollo-demo项目的app.properties文件中：apollo-demo/src/main/resources/META-INF/app.properties会有app.id的配置，这里修改为刚才创建的anna2019.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.id=anna2019</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>AppId是应用的唯一身份标识</code>，Apollo客户端使用这个标识来获取应用自己的私有Namespace配置。<br>对于公共Namespace的配置，没有AppId也可以获取到配置，但是就失去了应用覆盖公共Namespace配置的能力。</p></blockquote><p>运行SimpleApolloConfigDemo，启动成功后，可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apollo Config Demo. Please input key to get the value. Input quit to exit.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在anna2019项目里我们配置了两个配置，Key分别为：yuanrengu、anna999 。</p><p>输入：<code>yuanrengu</code>。可以看到结果如下：<br><img src="https://img-blog.csdnimg.cn/20191213165234482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>至此完成Apollo的本地运行环境已经搭建完成，并创建项目做了测试。再次重申，大家一定一定要动手操作，这样才能对项目理解更深刻。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Apollo开发指南</a><br><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Apollo官方文档的介绍其实已经很详细，出一个Apollo系列主要是对自己学习的一个归纳、源码解读以及踩坑的总结。大家还是以阅读官方文档为主！&lt;br&gt;Apollo系列会分篇介绍环境的搭建、常用场景的配置分析、源码解读等。&lt;strong&gt;系列文章均
      
    
    </summary>
    
    
      <category term="Apollo" scheme="https://yuanrengu.com/categories/Apollo/"/>
    
    
      <category term="环境搭建" scheme="https://yuanrengu.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>面试官，不要再问我三次握手和四次挥手</title>
    <link href="https://yuanrengu.com/2020/77eef79f.html"/>
    <id>https://yuanrengu.com/2020/77eef79f.html</id>
    <published>2020-01-10T08:07:33.000Z</published>
    <updated>2020-06-12T15:39:57.642Z</updated>
    
    <content type="html"><![CDATA[<p>三次握手和四次挥手是各个公司常见的考点，也具有一定的水平区分度，也被一些面试官作为热身题。很多小伙伴说这个问题刚开始回答的挺好，但是后面越回答越冒冷汗，最后就歇菜了。</p><p>见过比较典型的面试场景是这样的:</p><blockquote><p>面试官：请介绍下三次握手<br>求职者：第一次握手就是客户端给服务器端发送一个报文，第二次就是服务器收到报文之后，会应答一个报文给客户端，第三次握手就是客户端收到报文后再给服务器发送一个报文，三次握手就成功了。<br>面试官：然后呢？<br>求职者：这就是三次握手的过程，很简单的。<br>面试官：。。。。。。<br>（<strong>番外篇：一首凉凉送给你</strong>）</p></blockquote><p>记住猿人谷一句话：<strong>面试时越简单的问题，一般就是隐藏着比较大的坑，一般都是需要将问题扩展的</strong>。上面求职者的回答不对吗？当然对，但距离面试官的期望可能还有点距离。</p><p>希望大家能带着如下问题进行阅读，收获会更大。</p><ol><li>请画出三次握手和四次挥手的示意图</li><li>为什么连接的时候是三次握手？</li><li>什么是半连接队列？</li><li>ISN(Initial Sequence Number)是固定的吗？</li><li>三次握手过程中可以携带数据吗？</li><li>如果第三次握手丢失了，客户端服务端会如何处理？</li><li>SYN攻击是什么？</li><li>挥手为什么需要四次？</li><li>四次挥手释放连接时，等待2MSL的意义?</li></ol><p><img src="http://cdn.yuanrengu.com/img/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.jpg" alt="三次握手和四次挥手"></p><h2 id="1-三次握手"><a href="#1-三次握手" class="headerlink" title="1. 三次握手"></a>1. 三次握手</h2><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换<code>TCP窗口大小</code>信息。</p><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p><ul><li><p>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 <code>SYN_SENT</code> 状态。</p><p>首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</p></li><li><p>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <code>SYN_RCVD</code> 的状态。</p><p>在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。</p></li><li><p>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 <code>ESTABLISHED</code> 状态。服务器收到 ACK 报文之后，也处于 <code>ESTABLISHED</code> 状态，此时，双方已建立起了连接。</p><p>确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p></li></ul><p>发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。</p><p>在socket编程中，客户端执行connect()时，将触发三次握手。</p><p><img src="http://cdn.yuanrengu.com/img/20200210134500.png" alt></p><p>用更通俗的语言来解释三次握手过程：</p><ul><li>服务端调用listen系统命令，进入监听状态，等待客户端的连接。</li><li>客户端向服务端发送<code>连接请求报文</code>，其中TCP标志位里SYN=1，ACK=0，选择一个初始的序号x。</li><li>服务端收到请求报文，向 客户端 发送<code>连接确认报文</code>，SYN=1，ACK=1，确认号为 x+1，同时也选择一个初始的序号 y。</li><li>客户端 收到 服务端的连接确认报文后，还要向 服务端 <code>发出确认</code>，确认号为 y+1，序号为 x+1。</li><li>服务端 收到 客户端 的确认后，<code>连接建立</code>。</li></ul><h3 id="1-1-为什么需要三次握手，两次不行吗？"><a href="#1-1-为什么需要三次握手，两次不行吗？" class="headerlink" title="1.1 为什么需要三次握手，两次不行吗？"></a>1.1 为什么需要三次握手，两次不行吗？</h3><p>第三次握手是为了防止<code>失效的连接请求到达服务器，让服务器错误打开连接</code>。</p><p>弄清这个问题，我们需要先弄明白三次握手的目的是什么，能不能只用两次握手来达到同样的目的。</p><ul><li>第一次握手：客户端发送网络包，服务端收到了。<br>  这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手：服务端发包，客户端收到了。<br> 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</li><li>第三次握手：客户端发包，服务端收到了。<br> 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</li></ul><p>因此，需要三次握手才能确认双方的接收与发送能力是否正常。</p><p>试想如果是用两次握手，则会出现下面这种情况：</p><blockquote><p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在<strong>某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端</strong>，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</p></blockquote><h3 id="1-2-什么是半连接队列？"><a href="#1-2-什么是半连接队列？" class="headerlink" title="1.2 什么是半连接队列？"></a>1.2 什么是半连接队列？</h3><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个<strong>队列</strong>里，我们把这种队列称之为<strong>半连接队列</strong>。</p><p>当然还有一个<strong>全连接队列</strong>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p><p>这里再补充一点关于<strong>SYN-ACK 重传次数</strong>的问题：<br>服务器发送完SYN-ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。<br>注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s……</p><blockquote><p>关于建连接时<code>SYN超时</code>。试想一下，如果server端接到了clien发的SYN后回了SYN-ACK后client掉线了，server端没有收到client回来的ACK，那么，这个连接处于一个中间状态，即没成功，也没失败。于是，server端如果在一定时间内没有收到的TCP会重发SYN-ACK。在Linux下，默认重试次数为<code>5次</code>，重试的间隔时间从1s开始每次都翻售，5次的重试时间间隔为1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s + 2s + 4s+ 8s+ 16s + 32s = 2^6 -1 = <code>63s</code>，TCP才会把断开这个连接。</p></blockquote><h3 id="1-3-ISN-Initial-Sequence-Number-是固定的吗？"><a href="#1-3-ISN-Initial-Sequence-Number-是固定的吗？" class="headerlink" title="1.3 ISN(Initial Sequence Number)是固定的吗？"></a>1.3 ISN(Initial Sequence Number)是固定的吗？</h3><p>当一端为建立连接而发送它的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每个连接都将具有不同的ISN。ISN可以看作是一个32比特的计数器，每4ms加1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。</p><p><strong>三次握手的其中一个重要功能是客户端和服务端交换 ISN(Initial Sequence Number)，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的</strong>。</p><blockquote><p>对于连接的3次握手，主要是要初始化Sequence Number 的初始值。通信的双方要互相通知对方自己的初始化的Sequence Number（缩写为ISN：Inital Sequence Number）。<code>这个号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输的问题而乱序</code>（TCP会用这个序号来拼接数据）。</p></blockquote><h3 id="1-4-三次握手过程中可以携带数据吗？"><a href="#1-4-三次握手过程中可以携带数据吗？" class="headerlink" title="1.4 三次握手过程中可以携带数据吗？"></a>1.4 三次握手过程中可以携带数据吗？</h3><p>其实第三次握手的时候，是可以携带数据的。但是，<strong>第一次、第二次握手不可以携带数据</strong>。</p><p>为什么这样呢?大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据。因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。</p><p>也就是说，<strong>第一次握手不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。</strong></p><h3 id="1-5-SYN攻击是什么？"><a href="#1-5-SYN攻击是什么？" class="headerlink" title="1.5 SYN攻击是什么？"></a>1.5 SYN攻击是什么？</h3><p><strong>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的</strong>，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。</p><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的<code>半连接状态</code>时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstat 命令来检测 SYN 攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n -p TCP | grep SYN_RECV</span><br></pre></td></tr></table></figure><p>常见的防御 SYN 攻击的方法有如下几种：</p><ul><li>缩短超时（SYN Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies技术</li></ul><blockquote><p>关于SYN Flood攻击。一些恶意的人就为此制造了SYN Flood攻击——给服务器发了一个SYN后，就下线了，于是服务器需要默认等<code>63s</code>才会断开连接，这样，攻击者就可以把服务器的syn连接的队列耗尽，让正常的连接请求不能处理。于是，Linux下给了一个叫<code>tcp_syncookies</code>的参数来应对这个事——当SYN队列满了后，TCP会通过源地址端口、目标地址端口和时间戳打造出一个特别的Sequence Number发回去（又叫cookie），如果是攻击者则不会有响应，如果是正常连接，则会把这个 SYN Cookie发回来，然后服务端可以通过cookie建连接（即使你不在SYN队列中）。请注意，请先千万别用tcp_syncookies来处理正常的大负载的连接的情况。因为，synccookies是妥协版的TCP协议，并不严谨。对于正常的请求，你应该调整三个TCP参数可供你选择，第一个是：<code>tcp_synack_retries</code> 可以用他来减少重试次数；第二个是：<code>tcp_max_syn_backlog</code>，可以增大SYN连接数；第三个是：<code>tcp_abort_on_overflow</code> 处理不过来干脆就直接拒绝连接了。</p></blockquote><h3 id="1-6-第三次握手失败怎么办？"><a href="#1-6-第三次握手失败怎么办？" class="headerlink" title="1.6 第三次握手失败怎么办？"></a>1.6 第三次握手失败怎么办？</h3><p>当第三次握手失败时，服务器并不会重传ack报文，而是直接发送<code>RST报文段，进入CLOSED状态</code>。这样做的目的是为了<code>防止SYN洪泛攻击</code>。</p><h3 id="1-7-三次握手小结"><a href="#1-7-三次握手小结" class="headerlink" title="1.7 三次握手小结"></a>1.7 三次握手小结</h3><p>三次握手建立连接的首要目的是<code>同步序列号</code>。只有同步了序列号才有可靠的传输，TCP 协议的许多特性都是依赖序列号实现的，比如流量控制、消息丢失后的重发等等，这也是三次握手中的报文被称为 SYN 的原因，因为 SYN 的全称就叫做 Synchronize Sequence Numbers。</p><h4 id="1-7-1-客户端"><a href="#1-7-1-客户端" class="headerlink" title="1.7.1 客户端"></a>1.7.1 客户端</h4><p>客户端发送 SYN 开启了三次握手，之后客户端连接的状态是 SYN_SENT，然后等待服务器回复 ACK 报文。正常情况下，服务器会在几毫秒内返回 ACK，但如果客户端迟迟没有收到 ACK 会怎么样呢？客户端会重发 SYN，重试的次数由 <code>tcp_syn_retries</code> 参数控制，默认是 6 次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_syn_retries = 6</span><br></pre></td></tr></table></figure><p>第 1 次重试发生在 1 秒钟后，接着会以翻倍的方式在第 2、4、8、16、32 秒共做 6 次重试，最后一次重试会等待 64 秒，如果仍然没有返回 ACK，才会终止三次握手。所以，总耗时是 1+2+4+8+16+32+64=<code>127 秒</code>，超过 2 分钟。</p><p>如果这是一台有明确任务的服务器，你可以根据网络的稳定性和目标服务器的繁忙程度修改重试次数，调整客户端的三次握手时间上限。比如内网中通讯时，就可以适当调低重试次数，尽快把错误暴露给应用程序。</p><h4 id="1-7-2-服务端"><a href="#1-7-2-服务端" class="headerlink" title="1.7.2 服务端"></a>1.7.2 服务端</h4><p>当服务器收到 SYN 报文后，服务器会立刻回复 <code>SYN+ACK</code>报文，<code>既确认了客户端的序列号，也把自己的序列号发给了对方</code>。此时，服务器端出现了新连接，状态是 SYN_RCVD。这个状态下，服务器必须建立一个 <code>SYN 半连接队列</code>来维护未完成的握手信息，当这个队列溢出后，服务器将无法再建立新连接。<br><img src="http://cdn.yuanrengu.com/img/20200522104931.png" alt></p><p>如果 SYN 半连接队列已满，只能丢弃连接吗？并不是这样，开启 <code>syncookies</code> 功能就可以在不使用 SYN 队列的情况下成功建立连接。syncookies 是这么做的：<strong>服务器根据当前状态计算出一个值，放在己方发出的 SYN+ACK 报文中发出，当客户端返回 ACK 报文时，取出该值验证，如果合法，就认为连接建立成功</strong>，如下图所示。<br><img src="http://cdn.yuanrengu.com/img/20200522105033.png" alt></p><p>Linux 下怎样开启 syncookies 功能呢？修改 <code>tcp_syncookies</code> 参数即可，其中值为 0 时表示关闭该功能，2 表示无条件开启功能，而 1 则表示仅当 SYN 半连接队列放不下时，再启用它。由于 syncookie 仅用于应对 <code>SYN 泛洪攻击</code>（攻击者恶意构造大量的 SYN 报文发送给服务器，造成 SYN 半连接队列溢出，导致正常客户端的连接无法建立），这种方式建立的连接，许多 TCP 特性都无法使用。所以，<code>应当把 tcp_syncookies 设置为 1，仅在队列满时再启用</code>。</p><p>当客户端接收到服务器发来的 SYN+ACK 报文后，就会回复 ACK 去通知服务器，同时己方连接状态从 SYN_SENT 转换为 ESTABLISHED，表示连接建立成功。服务器端连接成功建立的时间还要再往后，到它收到 ACK 后状态才变为 ESTABLISHED。如果服务器没有收到 ACK，就会一直重发 SYN+ACK 报文。当网络繁忙、不稳定时，报文丢失就会变严重，此时应该调大重发次数。反之则可以调小重发次数。</p><p><code>tcp_synack_retries</code> 的默认重试次数是<code>5 次</code>，与客户端重发 SYN 类似，它的重试会经历 1、2、4、8、16 秒，最后一次重试后等待 32 秒，若仍然没有收到 ACK，才会关闭连接，故共需要等待 <code>63 秒</code>。</p><p>服务器收到 ACK 后连接建立成功，此时，<code>内核会把连接从 SYN 半连接队列中移出，再移入 accept 队列，等待进程调用 accept 函数时把连接取出来</code>。如果进程不能及时地调用 accept 函数，就会造成 accept 队列溢出，最终导致建立好的 TCP 连接被丢弃。</p><p>实际上，丢弃连接只是 Linux 的默认行为，我们还可以选择向客户端发送 <code>RST 复位报文</code>，告诉客户端<code>连接已经建立失败</code>。打开这一功能需要将 <code>tcp_abort_on_overflow</code> 参数设置为 1。</p><h2 id="2-四次挥手"><a href="#2-四次挥手" class="headerlink" title="2. 四次挥手"></a>2. 四次挥手</h2><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的<strong>半关闭</strong>（half-close）造成的。所谓的<code>半关闭</code>，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p><p>刚开始双方都处于<code>ESTABLISHED</code> 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p><ul><li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 <code>FIN_WAIT1</code> 状态。<br>即发出<strong>连接释放报文段</strong>（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 <code>CLOSE_WAIT</code> 状态。<br>即服务端收到连接释放报文段后即发出<strong>确认报文段</strong>（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li><li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态。<br>即服务端没有要向客户端发出的数据，服务端发出<strong>连接释放报文段</strong>（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 <code>TIME_WAIT</code> 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 <code>CLOSED</code> 状态。<br>即客户端收到服务端的连接释放报文段后，对此发出<strong>确认报文段</strong>（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li></ul><p>收到一个FIN只意味着在这一方向上没有数据流动。<strong>客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。</strong></p><p>在socket编程中，任何一方执行close()操作即可产生挥手操作。<br><img src="http://cdn.yuanrengu.com/img/20200210134547.png" alt></p><p>通过上面的分析，可以看出四次挥手涉及两种报文：FIN 和 ACK。<code>FIN 就是 Finish 结束连接的意思，谁发出 FIN 报文，就表示它将不再发送任何数据，关闭这一方向的传输通道。ACK 是 Acknowledge 确认的意思，它用来通知对方：你方的发送通道已经关闭</code>。</p><p>四次挥手过程总结：</p><ul><li>当主动方关闭连接时，会发送 FIN 报文，此时主动方的连接状态由 ESTABLISHED 变为 <code>FIN_WAIT1</code>。当被动方收到 FIN 报文后，内核自动回复 ACK 报文，连接状态由 ESTABLISHED 变为 <code>CLOSE_WAIT</code>，顾名思义，它在等待进程调用 close 函数关闭连接。当主动方接收到这个 ACK 报文后，连接状态由 FIN_WAIT1 变为 <code>FIN_WAIT2</code>，主动方的发送通道就关闭了。</li><li>再来看被动方的发送通道是如何关闭的。当被动方进入 CLOSE_WAIT 状态时，进程的 read 函数会返回 0，这样开发人员就会有针对性地调用 <code>close 函数</code>，进而触发内核发送 FIN 报文，此时被动方连接的状态变为 <code>LAST_ACK</code>。当主动方收到这个 FIN 报文时，内核会自动回复 ACK，同时连接的状态由 FIN_WAIT2 变为 TIME_WAIT，Linux 系统下大约 <code>1 分钟</code>后 TIME_WAIT 状态的连接才会彻底关闭。而被动方收到 ACK 报文后，连接就会关闭。</li></ul><h3 id="2-1-挥手为什么需要四次？"><a href="#2-1-挥手为什么需要四次？" class="headerlink" title="2.1 挥手为什么需要四次？"></a>2.1 挥手为什么需要四次？</h3><p>这是因为 TCP 不允许连接处于<code>半打开状态</code>时就单向传输数据，所以在三次握手建立连接时，服务器会把 ACK 和 SYN 放在一起发给客户端，其中，ACK 用来打开客户端的发送通道，SYN 用来打开服务器的发送通道。这样，原本的四次握手就降为三次握手了。</p><p>但是当连接处于<code>半关闭状态</code>时，TCP 是允许单向传输数据的。为便于理解，我们把先关闭连接的一方叫做主动方，后关闭连接的一方叫做被动方。当主动方关闭连接时，被动方仍然可以在不调用 close 函数的状态下，长时间发送数据，此时连接处于<strong>半关闭状态</strong>。这一特性是 TCP 的<code>双向通道互相独立所致</code>，却也使得关闭连接必须通过四次挥手才能做到。</p><h3 id="2-2-2MSL等待状态"><a href="#2-2-2MSL等待状态" class="headerlink" title="2.2 2MSL等待状态"></a>2.2 2MSL等待状态</h3><p>TIME_WAIT状态也称为<code>2MSL等待状态</code>。每个具体TCP实现必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段。</p><p>对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防这个ACK丢失（另一端超时并重发最后的FIN）。</p><p>这种2MSL等待的另一个结果是这个TCP连接在2MSL等待期间，定义这个连接的插口（客户的IP地址和端口号，服务器的IP地址和端口号）不能再被使用。这个连接只能在2MSL结束后才能再被使用。</p><h3 id="2-3-四次挥手释放连接时，等待2MSL的意义"><a href="#2-3-四次挥手释放连接时，等待2MSL的意义" class="headerlink" title="2.3 四次挥手释放连接时，等待2MSL的意义?"></a>2.3 四次挥手释放连接时，等待2MSL的意义?</h3><blockquote><p><strong>MSL</strong>是Maximum Segment Lifetime的英文缩写，可译为“最长报文段寿命”，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。</p></blockquote><p>为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间<code>等待计时器</code>。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。</p><h4 id="两个理由："><a href="#两个理由：" class="headerlink" title="两个理由："></a>两个理由：</h4><ol><li><p><strong>保证客户端发送的最后一个ACK报文段能够到达服务端</strong>。</p><p> 这个ACK报文段有可能丢失，使得处于LAST-ACK状态的服务端收不到对已发送的FIN+ACK报文段的确认，服务端超时重传FIN+ACK报文段，而客户端能在2MSL时间内收到这个重传的FIN+ACK报文段，接着客户端重传一次确认，重新启动2MSL计时器，最后客户端和服务端都进入到CLOSED状态，若客户端在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到服务端重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则服务端无法正常进入到CLOSED状态。</p></li><li><p><strong>防止“已失效的连接请求报文段”出现在本连接中</strong>。</p><p>客户端在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。</p></li></ol><blockquote><p>关于 MSL 和 TIME_WAIT。通过上面的ISN的描述，相信你也知道MSL是怎么来的了。我们注意到，在TCP的状态图中，从TIME_WAIT状态到CLOSED状态，有一个超时设置，这个超时设置是 2*MSL（<a href="https://tools.ietf.org/html/rfc793" target="_blank" rel="noopener">RFC793</a>定义了MSL为2分钟，Linux设置成了30s）为什么要这有TIME_WAIT？为什么不直接给转成CLOSED状态呢？主要有两个原因：1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到Ack，就会触发<code>被动端重发Fin，一来一去正好2个MSL</code>，2）有足够的时间让这个连接不会跟后面的连接混在一起（你要知道，有些自做主张的路由器会缓存IP数据包，如果连接被重用了，那么这些延迟收到的包就有可能会跟新连接混在一起）。</p></blockquote><h3 id="2-4-为什么TIME-WAIT状态需要经过2MSL才能返回到CLOSE状态？"><a href="#2-4-为什么TIME-WAIT状态需要经过2MSL才能返回到CLOSE状态？" class="headerlink" title="2.4 为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？"></a>2.4 为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？</h3><p>TIME_WAIT 状态的连接，在主动方看来确实已经关闭了。然而，被动方没有收到 ACK 报文前，连接还处于 LAST_ACK 状态。如果这个 ACK 报文没有到达被动方，被动方就会<code>重发</code> FIN 报文。</p><p><code>如果主动方不保留 TIME_WAIT 状态，会发生什么呢？</code>此时连接的端口恢复了自由身，可以<code>复用于新连接了</code>。然而，被动方的 FIN 报文可能再次到达，这既可能是网络中的路由器重复发送，也有可能是被动方没收到 ACK 时基于 tcp_orphan_retries 参数重发。这样，<code>正常通讯的新连接就可能被重复发送的 FIN 报文误关闭</code>。保留 TIME_WAIT 状态，就可以应付重发的 FIN 报文，当然，其他数据报文也有可能重发，所以 TIME_WAIT 状态还能避免数据错乱。</p><p>理论上，四个报文都发送完毕，就可以直接进入CLOSE状态了，但是可能网络是不可靠的，有可能最后一个ACK丢失。所以<strong>TIME_WAIT状态就是用来重发可能丢失的ACK报文</strong>。</p><h3 id="2-5-TIME-WAIT状态过多怎么办"><a href="#2-5-TIME-WAIT状态过多怎么办" class="headerlink" title="2.5 TIME-WAIT状态过多怎么办"></a>2.5 TIME-WAIT状态过多怎么办</h3><p>TIME-WAIT状态如果过多，会占用系统资源。Linux下有几个参数可以调整TIME-WAIT状态时间：</p><ul><li>net.ipv4.tcp_tw_reuse = 1 表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭。</li><li>net.ipv4.tcp_tw_recycle = 1 表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭。</li><li>net.ipv4.tcp_max_tw_buckets = 5000表示系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息。默认为180000，改为5000。</li></ul><p><code>在socket的TIME_WAIT状态结束之前，该socket所占用的本地端口号将一直无法释放。高TCP并发并且采用短连接方式进行通讯的通讯系统在高并发高负载下运行一段时间后，就常常会出现做为客户端的程序无法向服务端建立新的socket连接的情况。</code>此时用“netstat -tanlp”命令查看系统将会发现机器上存在大量处于TIME_WAIT状态的socket连接，并且占用大量的<code>本地端口号</code>。最后，当该机器上的可用本地端口号被占完（或者达到用户可使用的文件句柄上限），而旧的大量处于TIME_WAIT状态的socket尚未被系统回收时，就会出现无法向服务端创建新的socket连接的情况。此时系统几乎停转，空有再好的性能也发挥不出来。</p><p>解决TIME-WAIT状态过多的情况，一般做法是<code>打开系统的TIMEWAIT重用和快速回收</code>。然而，<code>主动进行关闭的链接才会进入TIME-WAIT状态</code>，所以最好的办法：尽量不要让服务器主动关闭链接，除非一些异常情况，如客户端协议错误、客户端超时等等。</p><p>解决方法？</p><ul><li>修改TIME_WAIT连接状态的上限值</li><li>启动快速回收机制</li><li>开启复用机制</li><li>修改短连接为长连接方式</li><li>由客户端来主动断开连接</li></ul><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>《TCP/IP详解 卷1:协议》有一张TCP状态变迁图，很具有代表性，有助于大家理解三次握手和四次挥手的状态变化。如下图所示，粗的实线箭头表示正常的客户端状态变迁，粗的虚线箭头表示正常的服务器状态变迁。</p><p><img src="http://cdn.yuanrengu.com/img/20200210134621.png" alt></p><p><strong>以后面试官再问你三次握手和四次挥手，直接把这一篇文章丢给他就可以了，他想问的都在这里。</strong></p><p><strong>参考</strong>：<br>《TCP/IP详解 卷1:协议》<br> <a href="http://cdn.yuanrengu.com/img/040315115571.png" target="_blank" rel="noopener">状态转换伪代码</a><br> <a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noopener">https://coolshell.cn/articles/11564.html</a><br> <a href="https://time.geekbang.org/column/article/237612" target="_blank" rel="noopener">极客时间：系统性能调优必知必会</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三次握手和四次挥手是各个公司常见的考点，也具有一定的水平区分度，也被一些面试官作为热身题。很多小伙伴说这个问题刚开始回答的挺好，但是后面越回答越冒冷汗，最后就歇菜了。&lt;/p&gt;
&lt;p&gt;见过比较典型的面试场景是这样的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试官：请介绍下三
      
    
    </summary>
    
    
      <category term="TCP" scheme="https://yuanrengu.com/categories/TCP/"/>
    
    
      <category term="面试" scheme="https://yuanrengu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="三次握手" scheme="https://yuanrengu.com/tags/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    
      <category term="四次挥手" scheme="https://yuanrengu.com/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    
      <category term="TCP" scheme="https://yuanrengu.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>【面试必备】小伙伴栽在了JVM的内存分配策略。。。</title>
    <link href="https://yuanrengu.com/2020/1977ac11.html"/>
    <id>https://yuanrengu.com/2020/1977ac11.html</id>
    <published>2020-01-10T08:00:00.000Z</published>
    <updated>2020-03-05T06:02:23.387Z</updated>
    
    <content type="html"><![CDATA[<p>周末有小伙伴留言说上周面试时被问到内存分配策略的问题，但回答的不够理想，小伙伴说之前公号里看过这一块的文章的，当时看时很清楚，也知道各个策略是干嘛的，但面试时脑子里清楚，心里很明白，但嘴里就是说不清楚，说出来的就是像云像雾又像风，最后面试官说他应该是不清楚这一块的内容</p><p>这里给小伙伴要再次说明下，任何知识点，<strong>先抓主干，再摸细节</strong>。对于面试来说，能把各个主干捋清楚，只要面试官要求不是太高，都是能过关的。毕竟jvm参数那么多，难不成面试官揪着各个参数的作用不放？如果真遇到这种太过揪细节的，只能说江湖路远，有缘再见！</p><p>对象的内存分配，往大方向上讲，就是在<strong>堆</strong>上分配（但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配），<strong>对象主要分配在新生代的Eden区上</strong>，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下可能会直接分配在老年代中。</p><h3 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h3><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC（前面篇章中有介绍过Minor GC）。但也有一种情况，在内存担保机制下，无法安置的对象会直接进到老年代。</p><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>大对象时指需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。</p><p>虚拟机提供了一个-XX：PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配。目的就是避免在Eden区及两个Survivor区之间发生大量的内存复制。</p><h3 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h3><p>虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1 。对象在Survivor区中没经过一次Minor GC，年龄就加1岁，当年龄达到15岁（默认值），就会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过参数-XX：MaxTenuringThreshold设置。</p><h4 id="接下来我们来回答JVM的分代年龄为什么是15？而不是16-20之类的呢？"><a href="#接下来我们来回答JVM的分代年龄为什么是15？而不是16-20之类的呢？" class="headerlink" title="接下来我们来回答JVM的分代年龄为什么是15？而不是16,20之类的呢？"></a>接下来我们来回答JVM的分代年龄为什么是15？而不是16,20之类的呢？</h4><p>真的不是为什么不能是其它数（除了15），着实是臣妾做不到啊！</p><p>事情是这样的，HotSpot虚拟机的对象头其中一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“Mark word”。</p><p>例如，在32位的HotSpot虚拟机中，如果对象处于未被锁定的状态下，那么Mark Word的32bit空间中25bit用于存储对象哈希码，4bit用于存储对象分代年龄，2bit用于存储锁标志位，1bit固定为0 。</p><p>明白是什么原因了吗？对象的分代年龄占4位，也就是0000，最大值为1111也就是最大为15，而不可能为16，20之类的了。</p><h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>为了能更好的适应不同程序的内存状况，虚拟机并不是永远地要求兑现过的年龄必须达到了MaxTenuringThreshold才能晋升老年代。</p><h4 id="满足如下条件之一，对象能晋升老年代："><a href="#满足如下条件之一，对象能晋升老年代：" class="headerlink" title="满足如下条件之一，对象能晋升老年代："></a>满足如下条件之一，对象能晋升老年代：</h4><ol><li>对象的年龄达到了MaxTenuringThreshold（默认15）能晋升老年代。</li><li>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</li></ol><p>很多文章都只是注意到了上面描述的情况（包括阿里中间件公众号发的一篇文章里也只是这么简单的介绍），但如果只是这么认识的话，会发现在实际的内存回收中有悖于此条规定。</p><p><strong>举个小栗子，如对象年龄5的占34%，年龄6的占36%，年龄7的占30%，按那两个标准，对象是不能进入老年代的，但Survivor都已经100%了啊？</strong></p><p>大家可以关注这个参数<strong>TargetSurvivorRatio</strong>，目标存活率，默认为50%。大致意思就是说年龄从小到大累加，如加入某个年龄段（如栗子中的年龄6）后，总占用超过Survivor空间TargetSurvivorRatio的时候，从该年龄段开始及大于的年龄对象就要进入老年代（即栗子中的年龄6,7对象）。动态对象年龄判断，主要是被TargetSurvivorRatio这个参数来控制。而且算的是年龄从小到大的累加和，而不是某个年龄段对象的大小。</p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC 。</p><p>上面说的风险是什么呢？我们知道，新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。</p><p>总结脑图：<br><img src="http://cdn.yuanrengu.com/img/20200110160547.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周末有小伙伴留言说上周面试时被问到内存分配策略的问题，但回答的不够理想，小伙伴说之前公号里看过这一块的文章的，当时看时很清楚，也知道各个策略是干嘛的，但面试时脑子里清楚，心里很明白，但嘴里就是说不清楚，说出来的就是像云像雾又像风，最后面试官说他应该是不清楚这一块的内容&lt;/p
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="面试" scheme="https://yuanrengu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>弄明白CMS和G1，就靠这一篇了</title>
    <link href="https://yuanrengu.com/2020/4c889127.html"/>
    <id>https://yuanrengu.com/2020/4c889127.html</id>
    <published>2020-01-10T08:00:00.000Z</published>
    <updated>2021-05-23T09:34:53.749Z</updated>
    
    <content type="html"><![CDATA[<p>在开始介绍CMS和G1前，我们可以剧透几点：</p><ul><li>根据不同分代的特点，收集器可能不同。有些收集器可以同时用于新生代和老年代，而有些时候，则需要分别为新生代或老年代选用合适的收集器。一般来说，新生代收集器的收集频率较高，应选用性能高效的收集器；而老年代收集器收集次数相对较少，对空间较为敏感，应当避免选择基于复制算法的收集器。</li><li><strong>在垃圾收集执行的时刻，应用程序需要暂停运行</strong>。</li><li>可以串行收集，也可以并行收集。</li><li>如果能做到并发收集（应用程序不必暂停），那绝对是很妙的事情。</li><li>如果收集行为可控，那也是很妙的事情。</li></ul><p>CMS和G1作为垃圾收集器里的大杀器，是需要好好弄明白的，而且面试中也经常被问到。</p><p><strong>希望大家带着下面的问题进行阅读，有目标的阅读，收获更多:</strong></p><ol><li>为什么没有一种牛逼的收集器像银弹一样适配所有场景？</li><li>CMS的优点、缺点、适用场景？</li><li>为什么CMS只能用作老年代收集器，而不能应用在新生代的收集？</li><li>G1的优点、缺点、适用场景？</li></ol><h2 id="1-CMS收集器"><a href="#1-CMS收集器" class="headerlink" title="1 CMS收集器"></a>1 CMS收集器</h2><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器</strong>。这是因为CMS收集器工作时，GC工作线程与用户线程可以<code>并发</code>执行，以此来达到降低收集停顿时间的目的。</p><p>CMS收集器仅作用于<strong>老年代</strong>的收集，是基于<code>标记-清除算法</code>的，它的运作过程分为4个步骤：</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ul><p>其中，<code>初始标记</code>、<code>重新标记</code>这两个步骤仍然需要Stop-the-world。<strong>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始阶段稍长一些，但远比并发标记的时间短。</strong></p><blockquote><p>CMS以流水线方式拆分了收集周期，将耗时长的操作单元保持与应用线程并发执行。只将那些必需STW才能执行的操作单元单独拎出来，控制这些单元在恰当的时机运行，并能保证仅需短暂的时间就可以完成。这样，在整个收集周期内，只有<strong>两次短暂的暂停（初始标记和重新标记）</strong>，<strong>达到了近似并发的目的</strong>。</p></blockquote><p>CMS收集器<strong>优点</strong>：并发收集、低停顿。</p><p>CMS收集器<strong>缺点</strong>：</p><ul><li>CMS收集器对CPU资源非常敏感。</li><li>CMS收集器无法处理浮动垃圾（Floating Garbage）。</li><li>CMS收集器是基于标记-清除算法，该算法的缺点都有（内存碎片）。</li><li>停顿时间是不可预期的。</li></ul><p>CMS收集器之所以能够做到并发，根本原因在于<strong>采用基于“标记-清除”的算法并对算法过程进行了细粒度的分解</strong>。前面篇章介绍过标记-清除算法将产生大量的内存碎片这对新生代来说是难以接受的，因此新生代的收集器并未提供CMS版本。</p><p>另外要补充一点，JVM在暂停的时候，需要选准一个时机。由于JVM系统运行期间的复杂性，不可能做到随时暂停，因此引入了安全点的概念。</p><p>CMS在JDK9中已经被标记deprecated，目前被广泛使用的垃圾回收器是 <code>G1</code>，通过很少的参数配置，内存即可高效回收。CMS 垃圾回收器已经在 Java 14 中被移除，由于它的 GC 时间不可控，有条件应该尽量避免使用。</p><h3 id="安全点-Safepoint"><a href="#安全点-Safepoint" class="headerlink" title="安全点(Safepoint)"></a>安全点(Safepoint)</h3><p><strong>安全点，即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停</strong>。Safepoint的选定既不能太少以至于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。</p><p>安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，Java虚拟机的堆栈不会发生变化。这么一来，垃圾回收器便能够“安全”地执行可达性分析。只要不离开这个安全点，Java虚拟机便能够在垃圾回收的同时，继续运行这段本地代码。</p><p>程序运行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的。“<strong>长时间执行</strong>”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。</p><p>对于安全点，另一个需要考虑的问题就是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。</p><p>两种解决方案：</p><ul><li><p>抢先式中断（Preemptive Suspension）</p><p>抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机采用这种方式来暂停线程从而响应GC事件。</p></li><li><p>主动式中断（Voluntary Suspension）</p><p>主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p></li></ul><h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>指在一段代码片段中，引用关系不会发生变化。在这个区域中任意地方开始GC都是安全的。也可以把Safe Region看作是被扩展了的Safepoint。</p><h2 id="2-G1收集器"><a href="#2-G1收集器" class="headerlink" title="2 G1收集器"></a>2 G1收集器</h2><p>默认收集器：</p><ul><li>jdk1.7，1.8 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）</li><li>jdk1.9 默认垃圾收集器G1</li></ul><p>G1重新定义了堆空间，打破了原有的分代模型，将堆划分为一个个区域。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。区域划分的好处就是带来了<code>停顿时间可预测</code>的收集模型：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。G1 的主要关注点在于达到可控的停顿时间，在这个基础上尽可能提高吞吐量。</p><p>G1 使用了停顿预测模型来满足用户指定的停顿时间目标，并基于目标来选择进行垃圾回收的区块数量。G1 采用<code>增量回收</code>的方式，每次回收一些区块，而不是整堆回收。要清楚 G1 不是一个实时收集器（只是接近实时），它会尽力满足我们的停顿时间要求，但也不是绝对的，它基于之前垃圾收集的数据统计，估计出在用户指定的停顿时间内能收集多少个区块。</p><p>G1与CMS的特征对比如下：</p><table><thead><tr><th>特征</th><th>G1</th><th>CMS</th></tr></thead><tbody><tr><td>并发和分代</td><td>是</td><td>是</td></tr><tr><td>最大化释放堆内存</td><td>是</td><td>否</td></tr><tr><td>低延时</td><td>是</td><td>是</td></tr><tr><td>吞吐量</td><td>高</td><td>低</td></tr><tr><td>压实</td><td>是</td><td>否</td></tr><tr><td>可预测性</td><td>强</td><td>弱</td></tr><tr><td>新生代和老年代的物理隔离</td><td>否</td><td>是</td></tr></tbody></table><p><strong>G1具备如下特点：</strong></p><ul><li><strong>并行与并发</strong>：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-the-world停顿的时间，部分其他收集器原来需要停顿Java线程执行的GC操作，G1收集器仍然可以通过<strong>并发</strong>的方式让Java程序继续运行。</li><li>分代收集</li><li>空间整合：与CMS的标记-清除算法不同，G1从整体来看是基于<strong>标记-整理算法</strong>实现的收集器，从局部（两个Region之间）上来看是基于“<strong>复制</strong>”算法实现的。但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。<strong>这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC</strong>。</li><li>可预测的停顿：这是G1相对于CMS的一个优势，降低停顿时间是G1和CMS共同的关注点。</li></ul><p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。在堆的结构设计时，G1打破了以往将收集范围固定在新生代或老年代的模式，G1收集器将整个Java堆划分为多个大小相等的独立区域（Region）。Region是一块地址连续的内存空间，G1模块的组成如下图所示：</p><p><img src="http://cdn.yuanrengu.com/img/20200110154339.png" alt="G1堆的Region布局.png"></p><p>虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。Region的大小是一致的，数值是在<code>1M到64M</code>字节之间的一个2的幂值数，JVM会尽量划分<code>2048</code>个左右(默认情况下，它期望堆中区域的数量在2048到4095之间，如果不在，它会调整区域的大小来实现这个目标)、同等大小的Region，这一点可以参看如下<a href="http://hg.openjdk.java.net/jdk/jdk/file/fa2f93f99dbc/src/hotspot/share/gc/g1/heapRegionBounds.hpp" target="_blank" rel="noopener">源码</a>。其实这个数字既可以手动调整，G1也会根据堆大小自动进行调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#ifndef SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span><br><span class="line">#define SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span><br><span class="line"></span><br><span class="line">#include &quot;memory/allocation.hpp&quot;</span><br><span class="line"></span><br><span class="line">class HeapRegionBounds : public AllStatic &#123;</span><br><span class="line">private:</span><br><span class="line">  // Minimum region size; we won&apos;t go lower than that.</span><br><span class="line">  // We might want to decrease this in the future, to deal with small</span><br><span class="line">  // heaps a bit more efficiently.</span><br><span class="line">  static const size_t MIN_REGION_SIZE = 1024 * 1024;</span><br><span class="line"></span><br><span class="line">  // Maximum region size; we don&apos;t go higher than that. There&apos;s a good</span><br><span class="line">  // reason for having an upper bound. We don&apos;t want regions to get too</span><br><span class="line">  // large, otherwise cleanup&apos;s effectiveness would decrease as there</span><br><span class="line">  // will be fewer opportunities to find totally empty regions after</span><br><span class="line">  // marking.</span><br><span class="line">  static const size_t MAX_REGION_SIZE = 32 * 1024 * 1024;</span><br><span class="line"></span><br><span class="line">  // The automatic region size calculation will try to have around this</span><br><span class="line">  // many regions in the heap (based on the min heap size).</span><br><span class="line">  static const size_t TARGET_REGION_NUMBER = 2048;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">  static inline size_t min_size();</span><br><span class="line">  static inline size_t max_size();</span><br><span class="line">  static inline size_t target_number();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span><br></pre></td></tr></table></figure><p><strong>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集</strong>。G1会通过一个合理的计算模型，计算出每个Region的收集成本并量化，这样一来，收集器在给定了“停顿”时间限制的情况下，总是能选择一组恰当的Regions作为收集目标，让其收集开销满足这个限制条件，以此达到实时收集的目的。</p><p>对于打算从CMS或者ParallelOld收集器迁移过来的应用，按照<a href="https://www.oracle.com/technetwork/java/javase/tech/g1-intro-jsp-135488.html" target="_blank" rel="noopener">官方</a> 的建议，如果发现符合如下特征，可以考虑更换成G1收集器以追求更佳性能：</p><ul><li>实时数据占用了超过半数的堆空间；</li><li>对象分配率或“晋升”的速度变化明显；</li><li>期望消除耗时较长的GC或停顿（超过0.5——1秒）。</li></ul><blockquote><p>原文如下：<br>Applications running today with either the CMS or the ParallelOld garbage collector would benefit switching to G1 if the application has one or more of the following traits.</p><ul><li>More than 50% of the Java heap is occupied with live data.</li><li>The rate of object allocation rate or promotion varies significantly.</li><li>Undesired long garbage collection or compaction pauses (longer than 0.5 to 1 second)</li></ul></blockquote><p><strong>G1收集的运作过程大致如下：</strong></p><ul><li><strong>初始标记（Initial Marking）</strong>：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，<strong>这阶段需要<code>停顿线程</code>，但耗时很短</strong>。</li><li><strong>并发标记（Concurrent Marking）</strong>：是从GC Roots开始堆中对象进行可达性分析，找出存活的对象，<strong>这阶段耗时较长</strong>，但可与用户程序并发执行。</li><li><strong>最终标记（Final Marking）</strong>：是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，<strong>这阶段需要<code>停顿线程</code>，但是可并行执行</strong>。</li><li><strong>筛选回收（Live Data Counting and Evacuation）</strong>：首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li></ul><p>全局变量和栈中引用的对象是可以列入根集合的，这样在寻找垃圾时，就可以从根集合出发扫描堆空间。在G1中，引入了一种新的能加入根集合的类型，就是<code>记忆集</code>（Remembered Set）。Remembered Sets（也叫RSets）用来跟踪对象引用。G1的很多开源都是源自Remembered Set，例如，它通常约占Heap大小的20%或更高。并且，我们进行对象复制的时候，因为需要扫描和更改Card Table的信息，这个速度影响了复制的速度，进而影响暂停时间。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTkvblRneGVCUG1HOWhWc1c0LnBuZw?x-oss-process=image/format,png" alt="image.png"></p><p>G1 比 ParallelOld 和 CMS 会需要更多的内存消耗，那是因为有部分内存消耗于簿记（accounting）上，如以下两个数据结构：</p><ul><li>Remembered Sets：每个区块都有一个 RSet，用于记录进入该区块的对象引用（如区块 A 中的对象引用了区块 B，区块 B 的 Rset 需要记录这个信息），它用于实现收集过程的并行化以及使得区块能进行独立收集。</li><li>Collection Sets：将要被回收的区块集合。GC 时，在这些区块中的对象会被复制到其他区块中，总体上 Collection Sets 消耗的内存小于 1%。</li></ul><h3 id="卡表（Card-Table）"><a href="#卡表（Card-Table）" class="headerlink" title="卡表（Card Table）"></a>卡表（Card Table）</h3><p>有个场景，老年代的对象可能引用新生代的对象，那标记存活对象的时候，需要扫描老年代中的所有对象。因为该对象拥有对新生代对象的引用，那么这个引用也会被称为GC Roots。那不是得又做全堆扫描？成本太高了吧。</p><p>HotSpot给出的解决方案是一项叫做<code>卡表</code>（Card Table）的技术。该技术将整个堆划分为一个个大小为512字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。</p><p>在进行Minor GC的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到Minor GC的GC Roots里。当完成所有脏卡的扫描之后，Java虚拟机便会将所有脏卡的标识位清零。</p><p>想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么Java虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p><p><strong>卡表能用于减少老年代的全堆空间扫描，这能很大的提升GC效率</strong>。</p><p>我们可以看下官方文档对G1的展望（这段英文描述比较简单，我就不翻译了）：</p><blockquote><p>Future:<br>G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS). Comparing G1 with CMS, there are differences that make G1 a better solution. One difference is that G1 is a compacting collector. G1 compacts sufficiently to completely avoid the use of fine-grained free lists for allocation, and instead relies on regions. This considerably simplifies parts of the collector, and mostly eliminates potential fragmentation issues. Also, G1 offers more predictable garbage collection pauses than the CMS collector, and allows users to specify desired pause targets.</p></blockquote><h3 id="调优G1"><a href="#调优G1" class="headerlink" title="调优G1"></a>调优G1</h3><p>在G1的情况下，只要收集器能跟上分配率，那么<code>增量压缩</code>就可能完全避免并发模式失败。对于分配率高且稳定，而且大部分对象寿命很短的应用程序，我们可以通过如下方式进行调优：</p><ul><li><code>将新生代设置得较大</code></li><li>增加晋升阈值，可能达到最大值（15）</li><li>设置该应用程序可以忍受的最长暂停时间</li></ul><p>以这种方式配置Eden和Survivor空间，可以尽可能使真正的短寿命对象不被晋升。</p><h2 id="3-ZGC"><a href="#3-ZGC" class="headerlink" title="3 ZGC"></a>3 ZGC</h2><p>ZGC(Z Garbage Collector)作为一种比较新的收集器，目前还没有得到大范围的关注。作为一款低延迟的垃圾收集器，它有如下几个亮点：</p><ul><li>亚毫秒级别的停顿时间（Sub-millisecond max pause times） <del>停顿时间不会超过 10ms</del></li><li>停顿时间不会随着堆的增大而增大</li><li>支持堆的大小范围很广（8MB-16TB）</li></ul><blockquote><p>去年看官网文档时，写的还是停顿时间不超10ms，现在竟然将停顿时间控制在亚毫秒级别，大写的服气！！！</p></blockquote><p>在ZGC中，连逻辑上的也是重新定义了堆空间（不区分年轻代和老年代），只分为一块块的page，每次进行GC时，都会对page进行压缩操作，所以没有碎片问题。虽然ZGC属于很新的GC技术, 但优点不一定真的出众，ZGC只在特定情况下具有绝对的优势, 如<code>巨大的堆和极低的暂停需求</code>。而实际上大多数开发在这两方面都不太成问题(尤其是在服务器端), 而对GC的性能/效率更在意。也有一种观点认为ZGC是为大内存、多cpu而生，它通过分区的思路来降低STW。</p><p>ZGC在JDK14前只支持Linux, 从JDK14开始支持Mac和Windows。</p><p>可以从官网看下ZGC的Change Log：</p><ul><li>JDK 16<ul><li>Concurrent Thread Stack Scanning (JEP 376)</li><li>Support for in-place relocation</li><li>Performance improvements (allocation/initialization of forwarding tables, etc)</li></ul></li><li>JDK 15<ul><li>Production ready (JEP 377)</li><li>Improved NUMA awareness</li><li>Improved allocation concurrency</li><li>Support for Class Data Sharing (CDS)</li><li>Support for placing the heap on NVRAM</li><li>Support for compressed class pointers</li><li>Support for incremental uncommit</li><li>Fixed support for transparent huge pages</li><li>Additional JFR events</li></ul></li><li>JDK 14<ul><li>macOS support (JEP 364)</li><li>Windows support (JEP 365)</li><li>Support for tiny/small heaps (down to 8M)</li><li>Support for JFR leak profiler</li><li>Support for limited and discontiguous address space</li><li>Parallel pre-touch (when using -XX:+AlwaysPreTouch)</li><li>Performance improvements (clone intrinsic, etc)</li><li>Stability improvements</li></ul></li><li>JDK 13<ul><li>Increased max heap size from 4TB to 16TB</li><li>Support for uncommitting unused memory (JEP 351)</li><li>Support for -XX:SoftMaxHeapSIze</li><li>Support for the Linux/AArch64 platform</li><li>Reduced Time-To-Safepoint</li></ul></li><li>JDK 12<ul><li>Support for concurrent class unloading</li><li>Further pause time reductions</li></ul></li><li>JDK 11<ul><li>Initial version of ZGC</li><li>Does not support class unloading (using -XX:+ClassUnloading has no effect)</li></ul></li></ul><p>可以看出ZGC未来可期，让我们拭目以待吧。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>目前被广泛使用的垃圾回收器是 <code>G1</code>，通过很少的参数配置，内存即可高效回收。CMS在JDK9中已经被标记deprecated，更高版本中（Java 14 ）已经被彻底移除，由于它的 GC 时间不可控，有条件应该尽量避免使用。</p><p>查了下度娘有关G1的文章，绝大部分文章对G1的介绍都是停留在JDK7或更早期的实现很多结论已经存在较大偏差了，甚至一些过去的GC选项已经不再推荐使用。举个例子，JDK9中JVM和GC日志进行了重构，如PrintGCDetails已经被标记为废弃，而PrintGCDateStamps已经被移除，指定它会导致JVM无法启动。</p><p>本文对CMS和G1的介绍绝大部分内容也是基于JDK7，新版本中的内容有一点介绍，倒没做过多介绍（本人对新版本JVM还没有深入研究），后面有机会可以再出专门的文章来重点介绍。</p><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h2><p>《深入理解Java虚拟机》<br>《HotSpot实战》<br><a href="https://wiki.openjdk.java.net/display/zgc/Main" target="_blank" rel="noopener">https://wiki.openjdk.java.net/display/zgc/Main</a><br><a href="https://plumbr.io/handbook/garbage-collection-algorithms-implementations#g1" target="_blank" rel="noopener">https://plumbr.io/handbook/garbage-collection-algorithms-implementations#g1</a><br><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开始介绍CMS和G1前，我们可以剧透几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据不同分代的特点，收集器可能不同。有些收集器可以同时用于新生代和老年代，而有些时候，则需要分别为新生代或老年代选用合适的收集器。一般来说，新生代收集器的收集频率较高，应选用性能高效的收集器；而老年代收
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="CMS" scheme="https://yuanrengu.com/tags/CMS/"/>
    
      <category term="G1" scheme="https://yuanrengu.com/tags/G1/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】6.创建对象及对象的访问定位</title>
    <link href="https://yuanrengu.com/2020/d386b2ef.html"/>
    <id>https://yuanrengu.com/2020/d386b2ef.html</id>
    <published>2020-01-10T07:39:12.000Z</published>
    <updated>2020-03-07T03:34:58.186Z</updated>
    
    <content type="html"><![CDATA[<p>《JVM从小白学成大佬》系列推出到现在，收到了很多小伙伴的好评，也收到了一些小伙伴的建议，在此表示感谢。</p><p>有几个小伙伴提出了希望出一篇介绍对象的创建及访问，猿人谷向来是没有原则的，小伙们要求啥，咱就尽力满足，毕竟文章就是对自己学习的一个总结及和各位小伙伴交流学习的机会。话不多说，直接开撸！</p><h2 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1 创建对象"></a>1 创建对象</h2><p>在Java程序运行过程中无时无刻都有对象被创建出来，<strong>java中对象可以采用new或反射或clone或反序列化的方法创建</strong>。接下来我们我们介绍在虚拟机中，对象（限于普通Java对象，不包括数组和Class对象等）的创建过程。</p><p>字节码new表示创建对象，虚拟机遇到该指令时，从栈顶取得目标对象在常量池中的索引，接着定位到目标对象的类型。接下来，虚拟机将根据该类的状态，采取相应的内存分配技术，在内存中分配实例空间，并完成实例数据和对象头的初始化。这样，一个对象就在JVM中创建好了。</p><p>实例的创建过程，首先根据从类常量池中获取对象类型信息并验证类是否已被解析过，若确保该类<strong>已被加载和正确解析</strong>，使用<strong>快速分配</strong>（fast allocation）技术为该类分配对象空间；若该类<strong>尚未解析过</strong>，则只能通过<strong>慢速分配</strong>（slow allocation）方式分配实例对象。实例的创建流程如下图所示。</p><p><img src="http://cdn.yuanrengu.com/img/20200110154819.png" alt></p><p>对象创建的基本流程：</p><ol><li>验证类已被解析。</li><li>获取instanceKlass，确保Klass已完全初始化。</li><li>若满足快速分配条件，则进入快速分配流程。</li><li>若不满足快速分配条件，或者快速分配失败，则进入慢速分配流程。</li></ol><h3 id="1-1-快速分配"><a href="#1-1-快速分配" class="headerlink" title="1.1 快速分配"></a>1.1 快速分配</h3><p>如果在实例分配之前已经完成了类型的解析，那么分配操作仅仅是在内存空间中划分可用内存，因此能以较高效率实现内存分配，这就是<strong>快速分配</strong>。</p><p>根据分配空间是来自于线程私有区域还是共享的堆空间，快速分配可以分为两种空间选择策略。HotSpot通过线程局部分配缓存技术(Thread-Local Allocation Buffers,即TLABs)可以在线程私有区域实现空间的分配。</p><blockquote><p>可以通过VM选项UseTLAB来开启或关闭TLAB功能。</p></blockquote><p>根据是否使用TLAB，快速分配方式有两种选择策略：</p><ul><li><strong>选择TLAB</strong>：首先尝试在TLAB中分配，因为TLAB是线程私有区域，故不需要加锁便能够确保线程安全。在分配一个新的对象空间时，将首先尝试在TLAB空间中分配对象空间，若分配空间的请求失败，则再尝试使用加锁机制在Eden区分配对象。</li><li><strong>选择Eden空间</strong>：若失败，则尝试在共享的Eden区进行分配，Eden区是所有线程共享区域，需要保证线程安全，故采用<strong>原子操作</strong>进行分配。若分配失败，则再次尝试该操作，直到分配成功为止。</li></ul><p>实例空间分配成功以后，将对实例进行初始化。待完成对象的空间分配和初始化后，就可以设置栈顶对象引用。当然，<strong>对象的空间分配和初始化操作都是基于从类常量池中获取对象类型并确保该类已被加载和正确解析的前提下进行的</strong>，如果类未被解析，则需要进行慢速分配。</p><h3 id="1-2-慢速分配"><a href="#1-2-慢速分配" class="headerlink" title="1.2 慢速分配"></a>1.2 慢速分配</h3><p>之所以成为慢速分配，<strong>正是因为在分配实例前需要对类进行解析，确保类及依赖类已得到正确的解析和初始化</strong>。慢速分配是调用InterpreterRuntime模块_new()进行的，实现代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 确保要初始化的类不是抽象类型</span><br><span class="line">klass-&gt;check_valid_for_instantiation(true, CHECK);</span><br><span class="line">// 确保类已初始化</span><br><span class="line">klass-&gt;initialize(CHECK);</span><br><span class="line">// 分配实例</span><br><span class="line">oop obj = klass-&gt;allocate_instance(CHECK);</span><br><span class="line">// 在线程栈中设置对象引用</span><br><span class="line">thread-&gt;set_vm_result(obj);</span><br></pre></td></tr></table></figure><h3 id="1-3-小结"><a href="#1-3-小结" class="headerlink" title="1.3 小结"></a>1.3 小结</h3><p><code>对象分配流程大致如下</code>：首先如果开启栈上分配，JVM会先进行栈上分配，如果没有开启栈上分配或不符合条件则会进行TLAB分配，如果TLAB分配不成功，再尝试在eden区分配，如果对象满足了直接进入老年代的条件，那就直接分配在老年代。在eden区和老年代分配主要通过“指针碰撞”和“空闲列表”两种方式实现，通过CAS解决堆上“非TLAB方式分配”的并发问题。</p><h2 id="2-对象的访问定位"><a href="#2-对象的访问定位" class="headerlink" title="2 对象的访问定位"></a>2 对象的访问定位</h2><p>建立对象是为了使用对象，Java程序需要通过栈上的reference数据来操作<strong>堆</strong>上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。</p><p>目前主流的访问方式有使用<strong>句柄</strong>和<strong>直接指针</strong>两种：</p><ul><li><p>如果使用<strong>句柄</strong>访问的话，那么Java堆中将会划分出一块内存来作为<strong>句柄池</strong>，reference中存储的就是<strong>对象的句柄地址</strong>，而句柄中包含了对象实例数据与类型数据各自的具体地址信息，如下图所示。<br><img src="http://cdn.yuanrengu.com/img/20200110154850.png" alt></p></li><li><p>如果使用<strong>直接指针</strong>访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是<strong>对象地址</strong>。即使用直接指针访问在对象被移动时<strong>reference本身需要被修改</strong>，reference存储的就是对象地址。如下图所示。<br><img src="http://cdn.yuanrengu.com/img/20200110154917.png" alt></p></li></ul><p>这两种对象访问方式各有优势：</p><ul><li>使用句柄来访问的最大好处就是reference中存储的是<strong>稳定的句柄地址</strong>，在对象被移动（垃圾收集时移动对象时非常普遍的行为）时只会改变句柄中的<strong>实例数据指针</strong>，而reference本身不需要修改。</li><li>使用直接指针访问方式的最大好处就是<strong>速度更快，它节省了一次指针定位的时间开销</strong>，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。</li></ul><p>HotSpot就是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《JVM从小白学成大佬》系列推出到现在，收到了很多小伙伴的好评，也收到了一些小伙伴的建议，在此表示感谢。&lt;/p&gt;
&lt;p&gt;有几个小伙伴提出了希望出一篇介绍对象的创建及访问，猿人谷向来是没有原则的，小伙们要求啥，咱就尽力满足，毕竟文章就是对自己学习的一个总结及和各位小伙伴交流学
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="句柄" scheme="https://yuanrengu.com/tags/%E5%8F%A5%E6%9F%84/"/>
    
      <category term="直接指针" scheme="https://yuanrengu.com/tags/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
</feed>
