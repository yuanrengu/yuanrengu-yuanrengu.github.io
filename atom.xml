<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>猿人谷</title>
  
  <subtitle>技术成长，没有捷径，唯有积累</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yuanrengu.com/"/>
  <updated>2020-01-17T09:56:31.744Z</updated>
  <id>https://yuanrengu.com/</id>
  
  <author>
    <name>猿人谷</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis动态调用表名和字段名</title>
    <link href="https://yuanrengu.com/2020/2ecc1e06.html"/>
    <id>https://yuanrengu.com/2020/2ecc1e06.html</id>
    <published>2020-01-17T09:54:51.000Z</published>
    <updated>2020-01-17T09:56:31.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该篇文章写于2016年10月21日</p></blockquote><p>一直在使用Mybatis这个ORM框架，都是使用mybatis里的一些常用功能。今天在项目开发中有个业务是需要限制各个用户对某些表里的字段查询以及某些字段是否显示，如某张表的某些字段不让用户查询到。这种情况下，就需要构建sql来动态传入表名、字段名了。现在对解决方法进行下总结，希望对遇到同样问题的伙伴有些帮助。</p><p>动态SQL是mybatis的强大特性之一，mybatis在对sql语句进行预编译之前，会对sql进行动态解析，解析为一个BoundSql对象，也是在此处对动态sql进行处理。下面让我们先来熟悉下mybatis里<code>#{}</code>与<code>${}</code>的用法。</p><p>在动态sql解析过程，<code>#{}</code>与<code>${}</code>效果是不一样的：</p><blockquote><p><code>#{}</code> 解析为一个 JDBC 预编译语句（prepared statement）的参数标记符。</p></blockquote><p>如以下sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="comment">#&#123;name&#125;;</span></span><br></pre></td></tr></table></figure><p>会被解析为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = ?;</span><br></pre></td></tr></table></figure><p>可以看到#{}被解析为一个参数占位符<code>？</code>。</p><p><code>${ }</code> 仅仅为一个纯碎的 string 替换，在动态 SQL 解析阶段将会进行变量替换<br>如以下sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = $&#123;<span class="keyword">name</span>&#125;;</span><br></pre></td></tr></table></figure><p>当我们传递参数“yuanrengu”时，sql会解析为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">"yuanrengu"</span>;</span><br></pre></td></tr></table></figure><p>可以看到预编译之前的sql语句已经不包含变量name了。</p><p>综上所得， <code>${ }</code> 的变量的替换阶段是在动态 SQL <code>解析阶段</code>，而 <code>#{ }</code>的变量的替换是在 DBMS 中。</p><p><code>#{}</code>与<code>${}</code>的区别可以简单总结如下：</p><ul><li>#{}将传入的参数当成一个字符串，会给传入的参数加一个双引号</li><li><code>${}</code>将传入的参数直接显示生成在sql中，不会添加引号</li><li>#{}能够很大程度上防止sql注入，<code>${}</code>无法防止sql注入</li></ul><p><code>${}</code>在预编译之前已经被变量替换了，这会存在sql注入的风险。如下sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> $&#123;tableName&#125; <span class="keyword">where</span> <span class="keyword">name</span> = $&#123;<span class="keyword">name</span>&#125;</span><br></pre></td></tr></table></figure><p>如果传入的参数tableName为<code>user; delete user; —</code>，那么sql动态解析之后，预编译之前的sql将变为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>; <span class="keyword">delete</span> <span class="keyword">user</span>; <span class="comment">-- where name = ?;</span></span><br></pre></td></tr></table></figure><p><code>—</code>之后的语句将作为注释不起作用，顿时我和我的小伙伴惊呆了！！！看到没，本来的查询语句，竟然偷偷的包含了一个删除表数据的sql，是删除，删除，删除！！！重要的事情说三遍，可想而知，这个风险是有多大。</p><ul><li><code>${}</code>一般用于传输数据库的表名、字段名等</li><li>能用#{}的地方尽量别用<code>${}</code></li></ul><p>通过上面的分析，相信大家可能已经对如何动态调用表名和字段名有些思路了。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getUser&quot; resultType=&quot;java.util.Map&quot; parameterType=&quot;java.lang.String&quot; statementType=&quot;STATEMENT&quot;&gt;</span><br><span class="line">  select </span><br><span class="line">      $&#123;columns&#125;</span><br><span class="line">  from $&#123;tableName&#125;</span><br><span class="line">      where COMPANY_REMARK = $&#123;company&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>要实现动态调用表名和字段名，就不能使用预编译了，需添加statementType=”STATEMENT”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">statementType：STATEMENT（非预编译），PREPARED（预编译）或CALLABLE中的任意一个，这就告诉 MyBatis 分别使用Statement，PreparedStatement或者CallableStatement。默认：PREPARED。这里显然不能使用预编译，要改成非预编译。</span><br></pre></td></tr></table></figure><p>其次，sql里的变量取值是<code>${xxx}</code>,不是#{xxx}。</p><p>因为<code>${}</code>是将传入的参数直接显示生成sql，如${xxx}传入的参数为字符串数据，需在参数传入前加上引号，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">"sprite"</span>;</span><br><span class="line">name = <span class="string">"'"</span> + name + <span class="string">"'"</span>;</span><br></pre></td></tr></table></figure><p>mybatis动态调用表名和字段名，还可以应用于日志的收集上，如数据库的日志表，每隔一个月动态建一个日志表，表名前缀相同（如log_201610,log_201611等），这样实现日志的分月分表存储，方便日志的分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;该篇文章写于2016年10月21日&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一直在使用Mybatis这个ORM框架，都是使用mybatis里的一些常用功能。今天在项目开发中有个业务是需要限制各个用户对某些表里的字段查询以及某些字段是否显示，如某张
      
    
    </summary>
    
    
      <category term="Mybatis" scheme="https://yuanrengu.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="https://yuanrengu.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>如何招聘程序猿？</title>
    <link href="https://yuanrengu.com/2020/2329b301.html"/>
    <id>https://yuanrengu.com/2020/2329b301.html</id>
    <published>2020-01-17T09:42:12.000Z</published>
    <updated>2020-01-19T03:45:35.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇文章写于2017年3月14日。虽然写的比较早了，但很多东西依然适用于如今的职场。</p></blockquote><p>近一年技术团队在不断扩充成员，一直忙于高级java工程师、Android工程师、iOS工程师的面试，很想写一篇和招聘程序猿相关的文章，特别是看到“酷壳”里皓哥写的一篇《我是怎么招聘程序员的》文章后，产生很多共鸣。</p><p>虽然工作年限还不够长，但也经历过很多大大小小的面试，即被面试过，也面试过很多人。经历过很多很专业的面试，也经历过一些非常BT和令人不怎么舒服的面试。一个好的面试体验，公司的考核流程和面试官就显得非常重要了，如果考核流程非常繁琐，会让面试者内心没有任何好感，如面试时在前台莫名其妙的被晾置一两个小时，笔试初试复试得跑三趟公司。面试官就更重要了，不要刚开始面试，就弄的像别人欠你钱或别人在挑战的技术能力似的，或者尽问些非常冷门而且工作中完全用不到的技术来彰显自己的博学。</p><p>公司招聘不要弄成一种买卖关系，应该是寻找一些志同道合和跟公司“气场”匹配的伙伴，这里的气场是指跟公司所需要的技能有一定的匹配度、跟公司的理念有一定程度的吻合。公司行政经常给我说：“技术人员是不是很矫情啊？说好来面试的，最后都不来，说好要入职的，入职前一天又说有公司给更高的待遇。”我只能微微一笑的给她说：“你见，或者不见我，我就在那里，不悲不喜。你来入职，或者不来入职，offer反正在你手里，不增只减”。因为我也曾经矫情过，研究生快毕业时，做了一堆的算法和数据结构方面的题，准备了一堆面试常问的题和一些面试技巧，就到处投简历面试（其实当时手里已经有几个不错的offer了），不为找工作，只为刷存在感，回想这年少无知的举动，倍感惭愧。技术圈说小不小，说大其实也不大，毕竟江湖不远，有缘再见，程序猿平时还是要多给自己攒攒口碑的。</p><p>如何去考核一个程序猿是否可以给offer？我在面试应聘者的时候，最主要是要弄清如下几件事：</p><ol><li>应聘者是否可以跟我“正常对话”？</li><li>应聘者的技能是否跟公司所需的技能达到一定的契合度？</li><li>应聘者是否有能力解决工作中的难题？</li><li>应聘者是否可以跟我们团队一起愉快的工作？</li></ol><p>我相信绝大部分的公司在考核应聘者时都会围绕上述四个问题来进行，可能有人会对第一个问题产生疑问，难道还有不能正常对话的人？还真别说，我就遇到几个性格比较“鲜明”的应聘者，面试时头抬的高高的，眼瞅着天花板，一副老子天下第一的表情，技术人员有傲骨可以理解，可是问几个技术问题，却一问三不知，问他之前团队如何协作的，只回答说公司安排的任务不喜欢就离职了，让人真的很难正常对话。对于第二个问题就更重要了，公司当然希望应聘者的技术越牛越好，梦想是美好的，能招到大神这肯定是公司之幸，现实终究还是很骨感，只希望能找到跟公司所需的技能契合度尽可能高的伙伴。</p><p>技术圈比较流行一句话：面试造火箭，工作拧螺丝。这种情况确实比较常见，从某个层面来看是大部分公司程序猿能力的美好愿景，也催促自己去不断完善自己的知识体系。对于第三个问题，程序猿最基本的技能就是要通过网络解决工作中的一些难题，多问度娘，多问谷歌，程序猿比较忌讳的一点就是“拿来主义”，遇到问题不动脑思考张口就问别人。第四个问题，基本就是考查人的社交能力和情商了，个人人为，团队氛围的整体和谐是做好所有项目的前提。毕竟如今的项目都是靠团战，一个人即使能力再强，也很难独立完成整个项目。</p><p>之前我经历过的一些比较传统的面试流程，基本是下面这样的：</p><ol><li>应聘者先做自我介绍</li><li>问一些比较难的非常细节的技术问题，基本就是快问快答的形式</li><li>给应聘者出一些比较怪异的算法题</li></ol><p>个人觉得这种面试形式不是太合适，可能会错过很多适合公司的程序猿。其实我个人不论是面试别人还是被面试时，都非常讨厌第一个问题，拿着别人简历难道不知道别人叫什么名字？技术面试，这种形式上的东西能少就尽量少即可。但应聘者一进来，总得有个关于介绍的开场。我面试应聘者时，别人一进来时我会先问好，给个微笑，让应聘者不要太紧张。让别人做下技术方面的简单介绍，如工作中主要处理哪里方面的业务（电商、金融等等）啊？主要用哪些编程语言？主要用哪些开发架构（dubbo、SOA等）？主要用哪些框架（Spring、mybatis等）？这样也方便对这个人有比较全面的了解，交流时也好针对性的问些问题，做偏技术方面的介绍也好了解这个人的沟通交流能力。毕竟很难从一个人的简历或自我阐述上来考核这个人是否合适。</p><p>我绝不会在面试应聘者时问一些非常细节的问题，我曾经就经历一个非常BT的面试，面试官据称刚从华为出来，一上来就问我是否用过mybatis，我说用过。接下来这哥们问，mybatis是哪一年被开源的？接手的是哪个开发团队？mybatis的升级历史？当然我觉得我可能听错了，我说记不清楚哪一年被开源的，是apache开源的项目，讲解了下mybatis对比hibernate的优势和缺点。这哥们说是都不知道哪一年开源的，也不知道是apache的哪个团队接手，真的用过mybatis？说是我肯定没用过mybatis。当时内心就千万只骏马奔腾而过啊，我真的是在应聘程序猿吗？敢情我用了几年假的mybatis？</p><p>还有一种面试流程是很多朋友都给我说过非常不喜欢的，就是跟hr的面聊，hr的小姐姐们一般都是聊家庭啊，聊什么让应聘者说自己目前做过最骄傲的事情是什么？最失败的事情是什么？还有问应聘者如何处理跟女票的矛盾，陪女票逛街时接到要加班的电话怎么办？还有非常多很奇怪的问题，其实程序猿虽然得到的评价是木讷，但都是很聪明的，这类问题都可以用些标准答案来应付，但不是内心真实的答案啊。例如陪女票逛街的问题，程序猿大都是很有责任心的，如果是项目非常忙，都会主动加班，如果项目没那么忙，好容易陪女票逛街要加啥班啊，毕竟程序猿有个女票还是非常不容易的，人艰不拆啊。</p><p>我在面试时一般会根据应聘者自己的项目描述来提问，考核下他自己说的技能的熟练程度。也遇到一些技术确实够菜，简历写的无比高大上，问他自己说的问题都回答不上来，你问东他答西，完全不在同一频道对话。碰到这种情况，我就会问笔试题里的SpringMVC工作原理(笔试只是公司要求的形式，我一般不会太看重笔试的成绩)，这个问题非常简单，只要用过这个框架的人都能说出个一二三来。这道题也是所有人都答的非常好的，因为网上一搜，答案一大推，问这个问题也是让应聘者放松些不要太紧张，毕竟自己刚写过。但有些人笔试题上答案写了好大一堆，但口述却一点都说不出来，知道什么问题了吧？我真的不介意你笔试时抄网上的东西，只要你能复述出来讲清楚我都算你掌握了这个问题，但假如是抄的东西连复述都说不出来，那面试还有什么可问的？碰到这种情况，我也不能直接打发别人，还得照顾应聘者的自尊心啊，我会跟应聘者聊聊人生聊聊理想，然后面试就愉快的结束了。</p><p>对于这里还得说一点，公司hr小姐姐要求即使面试遇到不合适的应聘者，说话也要照顾对方的面子，因为网络暴力真的很害人，但凡看一些招聘网站的面试分享，说公司好话的基本都是拿到offer了的，说不好话都是没拿到offer的，如果面试体验不好，就尽发些诋毁公司的言论，对后面要来公司应聘的伙伴来说起到非常不好的影响。网络暴力，确实。。。。。。</p><p>如果没有一起工作过，没有一些实际的项目做背景，单靠半个小时或一个多小时的面试，是比较难全面的了解一个人的。个人觉得在应聘程序猿职务时需要做好如下几个方面：</p><ol><li>穿着大方、简单、整洁。（不需穿个西装打个领带）</li><li>提前熟悉公司的业务、招聘需求，需要的技能可以提前准备下，有备无患嘛。这一点非常重要，知己知彼百战不殆。</li><li>对于面试官的问题，知之为知之不知为不知，技术这东西会就是会，不会就是不会，没法伪装或隐瞒，不然等着面试官问个问题而拆穿就尴尬了。</li><li>平时可以多写些技术博客、参入开源项目、参与技术活动，反正我是非常喜欢这样的程序猿，肯定能加分。</li></ol><p>所有的面试技巧都敌不过自己知识体系的深度、广度！不断提升自己，基础扎实，对某一个或几个业务有比较深入的熟悉，这样的小伙伴无论在哪家公司都是非常受欢迎的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇文章写于2017年3月14日。虽然写的比较早了，但很多东西依然适用于如今的职场。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;近一年技术团队在不断扩充成员，一直忙于高级java工程师、Android工程师、iOS工程师的面试，很想写一篇和招聘程序
      
    
    </summary>
    
    
      <category term="奋斗" scheme="https://yuanrengu.com/categories/%E5%A5%8B%E6%96%97/"/>
    
    
      <category term="面试" scheme="https://yuanrengu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Lombok介绍、使用方法和总结</title>
    <link href="https://yuanrengu.com/2020/baec5dff.html"/>
    <id>https://yuanrengu.com/2020/baec5dff.html</id>
    <published>2020-01-13T06:25:45.000Z</published>
    <updated>2020-01-13T07:39:16.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Lombok背景介绍"><a href="#1-Lombok背景介绍" class="headerlink" title="1 Lombok背景介绍"></a>1 Lombok背景介绍</h1><p>官方介绍如下：        </p><blockquote><p>Project Lombok makes java a spicier language by adding ‘handlers’ that know how to build and compile simple, boilerplate-free, not-quite-java code.</p></blockquote><p>大致意思是Lombok通过增加一些“处理程序”，可以让java变得简洁、快速。</p><h1 id="2-Lombok使用方法"><a href="#2-Lombok使用方法" class="headerlink" title="2 Lombok使用方法"></a>2 Lombok使用方法</h1><p>Lombok能以简单的注解形式来简化java代码，提高开发人员的开发效率。例如开发中经常需要写的javabean，都需要花时间去添加相应的getter/setter，也许还要去写构造器、equals等方法，而且需要维护，当属性多时会出现大量的getter/setter方法，这些显得很冗长也没有太多技术含量，一旦修改属性，就容易出现忘记修改对应方法的失误。</p><p>Lombok能通过注解的方式，在编译时自动为属性生成构造器、getter/setter、equals、hashcode、toString方法。出现的神奇就是在源码中没有getter和setter方法，但是在编译生成的字节码文件中有getter和setter方法。这样就省去了手动重建这些代码的麻烦，使代码看起来更简洁些。</p><p>Lombok的使用跟引用jar包一样，可以在<a href="https://projectlombok.org/download" target="_blank" rel="noopener">官网</a>下载jar包，也可以使用maven添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来我们来分析Lombok中注解的具体用法。</p><h2 id="2-1-Data"><a href="#2-1-Data" class="headerlink" title="2.1 @Data"></a>2.1 @Data</h2><p>@Data注解在类上，会为类的所有属性自动生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。</p><p>官方实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="meta">@Setter</span>(AccessLevel.PACKAGE) <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="meta">@Data</span>(staticConstructor=<span class="string">"of"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不使用Lombok，则实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">DataExample</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.score = score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.score;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String[] getTags() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTags</span><span class="params">(String[] tags)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.tags = tags;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"DataExample("</span>   <span class="keyword">this</span>.getName()   <span class="string">", "</span>   <span class="keyword">this</span>.getAge()   <span class="string">", "</span>   <span class="keyword">this</span>.getScore()   <span class="string">", "</span>   Arrays.deepToString(<span class="keyword">this</span>.getTags())   <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> other <span class="keyword">instanceof</span> DataExample;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> DataExample)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    DataExample other = (DataExample) o;</span><br><span class="line">    <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getName() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getAge() != other.getAge()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (Double.compare(<span class="keyword">this</span>.getScore(), other.getScore()) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!Arrays.deepEquals(<span class="keyword">this</span>.getTags(), other.getTags())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> temp1 = Double.doubleToLongBits(<span class="keyword">this</span>.getScore());</span><br><span class="line">    result = (result*PRIME)   (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">    result = (result*PRIME)   <span class="keyword">this</span>.getAge();</span><br><span class="line">    result = (result*PRIME)   (<span class="keyword">int</span>)(temp1 ^ (temp1 &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">    result = (result*PRIME)   Arrays.deepHashCode(<span class="keyword">this</span>.getTags());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Exercise</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Exercise</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Exercise&lt;T&gt; <span class="title">of</span><span class="params">(String name, T value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Exercise&lt;T&gt;(name, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Exercise(name="</span>   <span class="keyword">this</span>.getName()   <span class="string">", value="</span>   <span class="keyword">this</span>.getValue()   <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">canEqual</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> other <span class="keyword">instanceof</span> Exercise;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Exercise)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      Exercise&lt;?&gt; other = (Exercise&lt;?&gt;) o;</span><br><span class="line">      <span class="keyword">if</span> (!other.canEqual((Object)<span class="keyword">this</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getName().equals(other.getName())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? other.getValue() != <span class="keyword">null</span> : !<span class="keyword">this</span>.getValue().equals(other.getValue())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="keyword">int</span> PRIME = <span class="number">59</span>;</span><br><span class="line">      <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">      result = (result*PRIME)   (<span class="keyword">this</span>.getName() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getName().hashCode());</span><br><span class="line">      result = (result*PRIME)   (<span class="keyword">this</span>.getValue() == <span class="keyword">null</span> ? <span class="number">43</span> : <span class="keyword">this</span>.getValue().hashCode());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Getter-Setter"><a href="#2-2-Getter-Setter" class="headerlink" title="2.2 @Getter/@Setter"></a>2.2 @Getter/@Setter</h2><p>如果觉得@Data太过残暴（因为@Data集合了@ToString、@EqualsAndHashCode、@Getter/@Setter、@RequiredArgsConstructor的所有特性）不够精细，可以使用@Getter/@Setter注解，此注解在属性上，可以为相应的属性自动生成Getter/Setter方法，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Getter</span> <span class="meta">@Setter</span> <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Setter</span>(AccessLevel.PROTECTED) <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s (age: %d)"</span>, name, age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetterSetterExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">"%s (age: %d)"</span>, name, age);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-NonNull"><a href="#2-3-NonNull" class="headerlink" title="2.3 @NonNull"></a>2.3 @NonNull</h2><p>该注解用在属性或构造器上，Lombok会生成一个非空的声明，可用于校验参数，能帮助避免空指针。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    <span class="keyword">if</span> (person == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-Cleanup"><a href="#2-4-Cleanup" class="headerlink" title="2.4 @Cleanup"></a>2.4 @Cleanup</h2><p>该注解能帮助我们自动调用close()方法，很大的简化了代码。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Cleanup;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="meta">@Cleanup</span> InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="meta">@Cleanup</span> OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">      <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">      out.write(b, <span class="number">0</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如不使用Lombok，则需如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanupExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> r = in.read(b);</span><br><span class="line">          <span class="keyword">if</span> (r == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">          out.write(b, <span class="number">0</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">          out.close();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">        in.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-EqualsAndHashCode"><a href="#2-5-EqualsAndHashCode" class="headerlink" title="2.5 @EqualsAndHashCode"></a>2.5 @EqualsAndHashCode</h2><p>默认情况下，会使用所有非静态（non-static）和非瞬态（non-transient）属性来生成equals和hasCode，也能通过exclude注解来排除一些属性。</p><p>示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span>(exclude=&#123;<span class="string">"id"</span>, <span class="string">"shape"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EqualsAndHashCodeExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> transientVar = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@EqualsAndHashCode</span>(callSuper=<span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-ToString"><a href="#2-6-ToString" class="headerlink" title="2.6 @ToString"></a>2.6 @ToString</h2><p>类使用@ToString注解，Lombok会生成一个toString()方法，默认情况下，会输出类名、所有属性（会按照属性定义顺序），用逗号来分割。</p><p>通过将includeFieldNames参数设为true，就能明确的输出toString()属性。这一点是不是有点绕口，通过代码来看会更清晰些。</p><p>使用Lombok的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span>(exclude=<span class="string">"id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@ToString</span>(callSuper=<span class="keyword">true</span>, includeFieldNames=<span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToStringExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATIC_VAR = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> Shape shape = <span class="keyword">new</span> Square(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">private</span> String[] tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width, height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.width = width;</span><br><span class="line">      <span class="keyword">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Square(super="</span>   <span class="keyword">super</span>.toString()   <span class="string">", width="</span>   <span class="keyword">this</span>.width   <span class="string">", height="</span>   <span class="keyword">this</span>.height   <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ToStringExample("</span>   <span class="keyword">this</span>.getName()   <span class="string">", "</span>   <span class="keyword">this</span>.shape   <span class="string">", "</span>   Arrays.deepToString(<span class="keyword">this</span>.tags)   <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor"><a href="#2-7-NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor" class="headerlink" title="2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor"></a>2.7 @NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor</h2><p>无参构造器、部分参数构造器、全参构造器。Lombok没法实现多种参数构造器的重载。</p><p>Lombok示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AccessLevel;</span><br><span class="line"><span class="keyword">import</span> lombok.RequiredArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(staticName = <span class="string">"of"</span>)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span>(access = AccessLevel.PROTECTED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="meta">@NonNull</span> <span class="keyword">private</span> T description;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@NoArgsConstructor</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用Lombok的示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorExample</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x, y;</span><br><span class="line">  <span class="meta">@NonNull</span> <span class="keyword">private</span> T description;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ConstructorExample</span><span class="params">(T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (description == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"description"</span>);</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ConstructorExample&lt;T&gt; <span class="title">of</span><span class="params">(T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ConstructorExample&lt;T&gt;(description);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@java</span>.beans.ConstructorProperties(&#123;<span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"description"</span>&#125;)</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="title">ConstructorExample</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, T description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (description == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"description"</span>);</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoArgsExample</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span> <span class="keyword">private</span> String field;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoArgsExample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Lombok工作原理分析"><a href="#3-Lombok工作原理分析" class="headerlink" title="3 Lombok工作原理分析"></a>3 Lombok工作原理分析</h1><p>会发现在Lombok使用的过程中，只需要添加相应的注解，无需再为此写任何代码。自动生成的代码到底是如何产生的呢？</p><p>核心之处就是对于注解的解析上。JDK5引入了注解的同时，也提供了两种解析方式。</p><ul><li>运行时解析</li></ul><p>运行时能够解析的注解，必须将@Retention设置为RUNTIME，这样就可以通过反射拿到该注解。java.lang,reflect反射包中提供了一个接口AnnotatedElement，该接口定义了获取注解信息的几个方法，Class、Constructor、Field、Method、Package等都实现了该接口，对反射熟悉的朋友应该都会很熟悉这种解析方式。</p><ul><li>编译时解析</li></ul><p>编译时解析有两种机制，分别简单描述下：</p><p>1）Annotation Processing Tool</p><p>apt自JDK5产生，JDK7已标记为过期，不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因：</p><ul><li>api都在com.sun.mirror非标准包下</li><li>没有集成到javac中，需要额外运行<br>2）Pluggable Annotation Processing API</li></ul><p>JSR 269自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：<br><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200113153249.png" alt><br>Lombok本质上就是一个实现了“JSR 269 API”的程序。在使用javac的过程中，它产生作用的具体流程如下：</p><ol><li>javac对源代码进行分析，生成了一棵抽象语法树（AST）</li><li>运行过程中调用实现了“JSR 269 API”的Lombok程序<br>3, 此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点</li><li>javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）</li></ol><p>拜读了Lombok源码，对应注解的实现都在HandleXXX中，比如@Getter注解的实现时HandleGetter.handle()。还有一些其它类库使用这种方式实现，比如Google Auto、Dagger等等。</p><h1 id="4-Lombok的优缺点"><a href="#4-Lombok的优缺点" class="headerlink" title="4 Lombok的优缺点"></a>4 Lombok的优缺点</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol><li>能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率</li><li>让代码变得简洁，不用过多的去关注相应的方法</li><li>属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等</li></ol><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ol><li>不支持多种参数构造器的重载</li><li>虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度</li></ol><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5 总结"></a>5 总结</h1><p>Lombok虽然有很多优点，但Lombok更类似于一种IDE插件，项目也需要依赖相应的jar包。Lombok依赖jar包是因为编译时要用它的注解，为什么说它又类似插件？因为在使用时，eclipse或IntelliJ IDEA都需要安装相应的插件，在编译器编译时通过操作AST（抽象语法树）改变字节码生成，变向的就是说它在改变java语法。它不像spring的依赖注入或者mybatis的ORM一样是运行时的特性，而是编译时的特性。这里我个人最感觉不爽的地方就是对插件的依赖！因为Lombok只是省去了一些人工生成代码的麻烦，但IDE都有快捷键来协助生成getter/setter等方法，也非常方便。</p><p><strong>知乎上有位大神发表过对Lombok的一些看法：</strong></p><blockquote><p><strong>这是一种低级趣味的插件，不建议使用。JAVA发展到今天，各种插件层出不穷，如何甄别各种插件的优劣？<br>能从架构上优化你的设计的，能提高应用程序性能的 ，实现高度封装可扩展的…，<br>像lombok这种，像这种插件，已经不仅仅是插件了，改变了你如何编写源码，<br>事实上，少去了代码你写上去又如何？<br>如果JAVA家族到处充斥这样的东西，那只不过是一坨披着金属颜色的屎，迟早会被其它的语言取代。</strong></p></blockquote><p>虽然话糙但理确实不糙，试想一个项目有非常多类似Lombok这样的插件，个人觉得真的会极大的降低阅读源代码的舒适度。</p><p>虽然非常不建议在属性的getter/setter写一些业务代码，但在多年项目的实战中，有时通过给getter/setter加一点点业务代码，能极大的简化某些业务场景的代码。所谓取舍，也许就是这时的舍弃一定的规范，取得极大的方便。</p><p>我现在非常坚信一条理念，任何编程语言或插件，都仅仅只是工具而已，即使工具再强大也在于用的人，就如同小米加步枪照样能赢飞机大炮的道理一样。结合具体业务场景和项目实际情况，无需一味追求高大上的技术，适合的才是王道。</p><p><strong>Lombok有它的得天独厚的优点，也有它避之不及的缺点，熟知其优缺点，在实战中灵活运用才是王道。</strong></p><p>参考：<br><a href="https://projectlombok.org/features/" target="_blank" rel="noopener">https://projectlombok.org/features/</a><br><a href="https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv" target="_blank" rel="noopener">https://github.com/rzwitserloot/lombok?spm=a2c4e.11153940.blogcont59972.5.2aeb6d32hayLHv</a><br><a href="https://www.zhihu.com/question/42348457" target="_blank" rel="noopener">https://www.zhihu.com/question/42348457</a><br><a href="https://blog.csdn.net/ghsau/article/details/52334762" target="_blank" rel="noopener">https://blog.csdn.net/ghsau/article/details/52334762</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Lombok背景介绍&quot;&gt;&lt;a href=&quot;#1-Lombok背景介绍&quot; class=&quot;headerlink&quot; title=&quot;1 Lombok背景介绍&quot;&gt;&lt;/a&gt;1 Lombok背景介绍&lt;/h1&gt;&lt;p&gt;官方介绍如下：        &lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="Lombok" scheme="https://yuanrengu.com/tags/Lombok/"/>
    
  </entry>
  
  <entry>
    <title>Integer和Integer比较以及Integer和Int的比较分析</title>
    <link href="https://yuanrengu.com/2020/6bbb74ca.html"/>
    <id>https://yuanrengu.com/2020/6bbb74ca.html</id>
    <published>2020-01-13T06:24:18.000Z</published>
    <updated>2020-01-13T06:42:16.347Z</updated>
    
    <content type="html"><![CDATA[<p>发现做项目的过程中，在数值类型的比较上容易犯错，特别是Integer和Integer的比较，Integer和int的比较。虽然这些都是些基础语法，但稍不留意就容易犯错，在实际开发过程中如果出现这类失误，很容易失之毫厘谬以千里。在这里，总结下这些基础知识点。</p><p>java虽然宣称一切都是对象，但原始数据类型是例外。int是整形数字，是java的9个原始数据类型（Primitive Types）（boolean、byte、short、char、int、float、double、long、void）之一。Integer是int对应的包装类，它有一个int类型的字段存储数据，并且提供了基本操作，比如数学运算、int和字符串之间转换等。在<strong>java 5中引入了自动装箱和自动拆箱功能（boxing/unboxing）</strong>，java可以根据上下文，自动进行转换，极大地简化了相关编程。javac自动把<strong>装箱</strong>转换为<strong>Integer.valueOf()</strong>,把<strong>拆箱</strong>替换为<strong>Integer.intValue()</strong>。</p><p>自动装箱实际上算是一种语法糖。什么是语法糖？可以简单理解为java平台为我们自动进行了一些转换，保证不同的写法在运行时等价，他们发生在<code>编译阶段</code>，也就是生产的字节码是一致的。（此句摘自极客时间专栏）</p><p>原始数据类型的变量，需要使用并发相关手段才能保证线程安全。如果有线程安全的计算需要，建议考虑使用类似AtomicInteger、AtomicLong这样的线程安全类。</p><p><code>原始数据类型和java泛型并不能配合使用</code>。因为java的泛型某种程度上可以算作伪泛型，它完全是一种<code>编译期</code>的技巧，java编译期会自动将类型转换为对应的特定类型。这就决定了使用泛型，必须保证相应类型可以转换为Object。</p><p>废话不多说，直接来demo，这样效果更直接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Integer a1 = <span class="number">6</span>;</span><br><span class="line">Integer a2 = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> a11 = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a1 == a2); <span class="comment">//true</span></span><br><span class="line">System.out.println(a1 == a11); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">int</span> a33 = <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(a3 == a4); <span class="comment">//false</span></span><br><span class="line"><span class="comment">//Integer会自动拆箱为int，所以为true</span></span><br><span class="line">System.out.println(a3 == a33); <span class="comment">//true</span></span><br><span class="line">System.out.println(a3.equals(a4)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">Integer a5 = <span class="keyword">new</span> Integer(<span class="number">6</span>);</span><br><span class="line">Integer a6 = <span class="keyword">new</span> Integer(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(a5 == a6); <span class="comment">//false</span></span><br><span class="line">System.out.println(a5.equals(a6)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要明确的一点是，包装型（Integer）和基本型（int）比较会自动拆箱（jdk1.5以上）。</p><p>在这里很多人比较容易迷惑的是如下情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer a1 = <span class="number">6</span>;</span><br><span class="line">Integer a2 = <span class="number">6</span>;</span><br><span class="line">System.out.println(a1 == a2); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line">System.out.println(a3 == a4); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>如果研究过jdk源码，你就会发现Integer a3 = 128;在java编译时会被翻译成 Integer a3 = Integer.valueOf(128); 我们再来看看valueOf()的源码就更清晰了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由以上源码就会发现，<code>对于-128到127之间的数，会进行缓存</code>，Integer a1 = 6时，会将6进行缓存，下次再写Integer a2 = 6;时，就会直接从缓存中取，也就不用new一个对象了，所以a1和a2比较时就为true。但a3和a4是超过范围，会new一个对象，<code>==是进行地址和值比较，是比较两个对象在JVM中的地址</code>，这时a3和a4虽然值相同但地址是不一样的，所以比较就为false了。</p><p>通过上面的分析可知：</p><ul><li>两个都不是new出来的Integer，且数值在-128~127之间，用==比较时，基本值相等时为true，否则为false；</li><li>两个都是new出来的Integer，为false</li><li>int和Integer比较，数值相同，用==比较时为true。（因为Integer会自动拆箱为int去比较）</li></ul><blockquote><p><code>所有包装类对象之间值的比较，建议使用equals方法比较</code>。</p></blockquote><p><code>==</code>判断对象是否同一个。</p><p>Integer var = ?在<code>缓存区间</code>的赋值，会复用已有对象，因此这个区间内的Integer使用==进行判断可通过，但是区间之外的所有数据，则会在<code>堆</code>上新产生，不会通过。</p><p>因此如果用== 来比较数值，很可能在小的测试数据中通过，而到了生产环境才出问题。</p><p>为了节省内容，对与下列包装对象的两个实例，当他们的基本值相同时，用==判断会为true：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Boolean  </span><br><span class="line">Byte  </span><br><span class="line">Character, \u0000 - \u007f(7f是十进制的127)  </span><br><span class="line">Integer, -128 — 127</span><br></pre></td></tr></table></figure><p>我们也可以看看其它包装型的缓存情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Boolean：(全部缓存)</span><br><span class="line">Byte：(全部缓存)</span><br><span class="line"></span><br><span class="line">Character(缓存范围<span class="string">'\u0000'</span>到<span class="string">'\u007F'</span>)</span><br><span class="line">Short(-<span class="number">128</span> — <span class="number">127</span>缓存)</span><br><span class="line">Long(-<span class="number">128</span> — <span class="number">127</span>缓存)</span><br><span class="line"></span><br><span class="line">Float(没有缓存)</span><br><span class="line">﻿﻿﻿﻿﻿﻿Doulbe(没有缓存)</span><br></pre></td></tr></table></figure><p>﻿﻿﻿﻿﻿﻿<br>如果要比较两个Integer对象的值（均为new的对象），可以通过<code>.intValue()</code>进行转换后来比较，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line">System.out.println(a3.intValue() == a4.intValue());</span><br></pre></td></tr></table></figure><p>也可以使用<code>equal()</code>来进行比较，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer a3 = <span class="number">128</span>;</span><br><span class="line">Integer a4 = <span class="number">128</span>;</span><br><span class="line">System.out.println(a3.equals(a4)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;发现做项目的过程中，在数值类型的比较上容易犯错，特别是Integer和Integer的比较，Integer和int的比较。虽然这些都是些基础语法，但稍不留意就容易犯错，在实际开发过程中如果出现这类失误，很容易失之毫厘谬以千里。在这里，总结下这些基础知识点。&lt;/p&gt;
&lt;p&gt;j
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="java" scheme="https://yuanrengu.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>1.Apollo本地运行环境搭建</title>
    <link href="https://yuanrengu.com/2020/49f0797e.html"/>
    <id>https://yuanrengu.com/2020/49f0797e.html</id>
    <published>2020-01-13T06:20:20.000Z</published>
    <updated>2020-01-13T07:35:10.863Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Apollo官方文档的介绍其实已经很详细，出一个Apollo系列主要是对自己学习的一个归纳、源码解读以及踩坑的总结。大家还是以阅读官方文档为主！<br>Apollo系列会分篇介绍环境的搭建、常用场景的配置分析、源码解读等。<strong>系列文章均以官方文档为主！！！</strong><br><code>希望大家能积极讨论，有问题可随时留言，一起学习！</code></p></blockquote><p>在实际的项目开发中经常会遇到配置信息的场景，常见的有两种配置形式：1.基于<strong>本地配置形式（通常有两种做法：将配置信息耦合在业务代码中；将配置信息配置在配置文</strong>件）；2.适用于大规模分布式场景的<strong>集中式配置</strong>形式。</p><p>本地配置会有非常多的痛点，如修改代码带来的麻烦、修改配置后获取新配置不实时等。集中式配置好处非常多（虽然也会带来麻烦，但相比于好处，这些麻烦还是可以接受的），结合猿人谷多年的实战，在下面几点非常有效果：</p><ul><li>配置信息统一管理</li><li>动态获取/更新配置信息</li><li>降低运维人员的维护成本</li><li>降低配置出错率</li></ul><p>Apollo（阿波罗）是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。</p><p>服务端基于Spring Boot和Spring Cloud开发，打包后可以直接运行，不需要额外安装Tomcat等应用容器。</p><p>Java客户端不依赖任何框架，能够运行于所有Java运行时环境，同时对Spring/Spring Boot环境也有较好的支持。</p><p>本篇介绍如何在本地使用IDE编译、运行Apollo。Talk is cheap，Show me the code. 学习开源最有效的方式就是将项目实实在在的跑起来，边踩坑边学习边总结，这样才能收获更多。</p><h1 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1 环境搭建"></a>1 环境搭建</h1><h2 id="1-1-本地运行环境"><a href="#1-1-本地运行环境" class="headerlink" title="1.1 本地运行环境"></a>1.1 本地运行环境</h2><p>本地开发需要如下组件：</p><ul><li>Java：1.8+</li><li>MySQL：5.6.5+</li><li>IDE：IntelliJ IDEA 2018.1.8(Ultimate Edition) ,版本可以更新一点，但某些低版本的IDEA可能会出一些奇奇怪怪的小问题。</li></ul><p><code>踩坑</code>：IDEA在2018.1.8之前的版本debug时报程序包<strong>com.netflix.servo.util</strong>不存在，其实这个包是有的。当时百思不得其解，检查之后再检查，也没发现啥问题，升级IDEA版本后，世界安静了，你说意外不意外！<br><img src="https://img-blog.csdnimg.cn/20191213154638291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-2-导入数据库信息"><a href="#1-2-导入数据库信息" class="headerlink" title="1.2 导入数据库信息"></a>1.2 导入数据库信息</h2><p>Apollo配置信息的存储是适用的<code>Mysql</code>，需要一些初始化的数据库信息。市面上还有一些配置中心的相关开源项目，如百度开源的DisConf（也是适用Mysql存储配置信息）、360开源的QConf（使用的是ZooKeeper）、Spring Cloud的组件Spring Cloud Config等。</p><h3 id="1-2-1-创建ApolloPortalDB"><a href="#1-2-1-创建ApolloPortalDB" class="headerlink" title="1.2.1 创建ApolloPortalDB"></a>1.2.1 创建ApolloPortalDB</h3><p><strong>apolloportaldb.sql</strong>的信息如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Database</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ApolloPortalDB <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Use</span> ApolloPortalDB;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table app</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`App`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`App`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'应用名'</span>,</span><br><span class="line">  <span class="string">`OrgId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门Id'</span>,</span><br><span class="line">  <span class="string">`OrgName`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门名字'</span>,</span><br><span class="line">  <span class="string">`OwnerName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerName'</span>,</span><br><span class="line">  <span class="string">`OwnerEmail`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerEmail'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Name`</span> (<span class="string">`Name`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table appnamespace</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`AppNamespace`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`AppNamespace`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'namespace名字，注意，需要全局唯一'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'app id'</span>,</span><br><span class="line">  <span class="string">`Format`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'properties'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace的format类型'</span>,</span><br><span class="line">  <span class="string">`IsPublic`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace是否为公共'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_AppId`</span> (<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`Name_AppId`</span> (<span class="string">`Name`</span>,<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用namespace定义'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumer</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Consumer`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Consumer`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'应用名'</span>,</span><br><span class="line">  <span class="string">`OrgId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门Id'</span>,</span><br><span class="line">  <span class="string">`OrgName`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门名字'</span>,</span><br><span class="line">  <span class="string">`OwnerName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerName'</span>,</span><br><span class="line">  <span class="string">`OwnerEmail`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerEmail'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'开放API消费者'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumeraudit</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ConsumerAudit`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ConsumerAudit`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`ConsumerId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Consumer Id'</span>,</span><br><span class="line">  <span class="string">`Uri`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'访问的Uri'</span>,</span><br><span class="line">  <span class="string">`Method`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'访问的Method'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ConsumerId`</span> (<span class="string">`ConsumerId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'consumer审计表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumerrole</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ConsumerRole`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ConsumerRole`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`ConsumerId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Consumer Id'</span>,</span><br><span class="line">  <span class="string">`RoleId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Role Id'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleId`</span> (<span class="string">`RoleId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ConsumerId_RoleId`</span> (<span class="string">`ConsumerId`</span>,<span class="string">`RoleId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'consumer和role的绑定表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table consumertoken</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ConsumerToken`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ConsumerToken`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`ConsumerId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'ConsumerId'</span>,</span><br><span class="line">  <span class="string">`Token`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'token'</span>,</span><br><span class="line">  <span class="string">`Expires`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'2099-01-01 00:00:00'</span> <span class="keyword">COMMENT</span> <span class="string">'token失效时间'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_Token`</span> (<span class="string">`Token`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'consumer token表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table favorite</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Favorite`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Favorite`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`UserId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'收藏的用户'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Position`</span> <span class="built_in">int</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'10000'</span> <span class="keyword">COMMENT</span> <span class="string">'收藏顺序'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_UserId`</span> (<span class="string">`UserId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">23</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用收藏表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table permission</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Permission`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Permission`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`PermissionType`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'权限类型'</span>,</span><br><span class="line">  <span class="string">`TargetId`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'权限对象类型'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_TargetId_PermissionType`</span> (<span class="string">`TargetId`</span>(<span class="number">191</span>),<span class="string">`PermissionType`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'permission表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table role</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Role`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Role`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`RoleName`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'Role name'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleName`</span> (<span class="string">`RoleName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'角色表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table rolepermission</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`RolePermission`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`RolePermission`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`RoleId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Role Id'</span>,</span><br><span class="line">  <span class="string">`PermissionId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Permission Id'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleId`</span> (<span class="string">`RoleId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_PermissionId`</span> (<span class="string">`PermissionId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'角色和权限的绑定表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table serverconfig</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ServerConfig`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ServerConfig`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Key`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项Key'</span>,</span><br><span class="line">  <span class="string">`Value`</span> <span class="built_in">varchar</span>(<span class="number">2048</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项值'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Key`</span> (<span class="string">`Key`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'配置服务自身配置'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table userrole</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`UserRole`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`UserRole`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`UserId`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户身份标识'</span>,</span><br><span class="line">  <span class="string">`RoleId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Role Id'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_RoleId`</span> (<span class="string">`RoleId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_UserId_RoleId`</span> (<span class="string">`UserId`</span>,<span class="string">`RoleId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户和role的绑定表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table Users</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Users`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Users`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`Password`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`Email`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱地址'</span>,</span><br><span class="line">  <span class="string">`Enabled`</span> <span class="built_in">tinyint</span>(<span class="number">4</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'是否有效'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table Authorities</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Authorities`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Authorities`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Username`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`Authority`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`ServerConfig`</span> (<span class="string">`Key`</span>, <span class="string">`Value`</span>, <span class="string">`Comment`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'apollo.portal.envs'</span>, <span class="string">'dev'</span>, <span class="string">'可支持的环境列表'</span>),</span><br><span class="line">    (<span class="string">'organizations'</span>, <span class="string">'[&#123;\"orgId\":\"TEST1\",\"orgName\":\"样例部门1\"&#125;,&#123;\"orgId\":\"TEST2\",\"orgName\":\"样例部门2\"&#125;]'</span>, <span class="string">'部门列表'</span>),</span><br><span class="line">    (<span class="string">'superAdmin'</span>, <span class="string">'apollo'</span>, <span class="string">'Portal超级管理员'</span>),</span><br><span class="line">    (<span class="string">'api.readTimeout'</span>, <span class="string">'10000'</span>, <span class="string">'http接口read timeout'</span>),</span><br><span class="line">    (<span class="string">'consumer.token.salt'</span>, <span class="string">'someSalt'</span>, <span class="string">'consumer token salt'</span>),</span><br><span class="line">    (<span class="string">'admin.createPrivateNamespace.switch'</span>, <span class="string">'true'</span>, <span class="string">'是否允许项目管理员创建私有namespace'</span>),</span><br><span class="line">    (<span class="string">'configView.memberOnly.envs'</span>, <span class="string">'pro'</span>, <span class="string">'只对项目成员显示配置信息的环境列表，多个env以英文逗号分隔'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Users`</span> (<span class="string">`Username`</span>, <span class="string">`Password`</span>, <span class="string">`Email`</span>, <span class="string">`Enabled`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'apollo'</span>, <span class="string">'$2a$10$7r20uS.BQ9uBpf3Baj3uQOZvMVvB1RN3PYoKE94gtz2.WAOuiiwXS'</span>, <span class="string">'apollo@acme.com'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Authorities`</span> (<span class="string">`Username`</span>, <span class="string">`Authority`</span>) <span class="keyword">VALUES</span> (<span class="string">'apollo'</span>, <span class="string">'ROLE_user'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br></pre></td></tr></table></figure><h3 id="1-2-2-创建ApolloConfigDB"><a href="#1-2-2-创建ApolloConfigDB" class="headerlink" title="1.2.2 创建ApolloConfigDB"></a>1.2.2 创建ApolloConfigDB</h3><p><strong>apolloconfigdb.sql</strong>如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create Database</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ApolloConfigDB <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">Use</span> ApolloConfigDB;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table app</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`App`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`App`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'应用名'</span>,</span><br><span class="line">  <span class="string">`OrgId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门Id'</span>,</span><br><span class="line">  <span class="string">`OrgName`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'部门名字'</span>,</span><br><span class="line">  <span class="string">`OwnerName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerName'</span>,</span><br><span class="line">  <span class="string">`OwnerEmail`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ownerEmail'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Name`</span> (<span class="string">`Name`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table appnamespace</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`AppNamespace`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`AppNamespace`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'namespace名字，注意，需要全局唯一'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'app id'</span>,</span><br><span class="line">  <span class="string">`Format`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'properties'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace的format类型'</span>,</span><br><span class="line">  <span class="string">`IsPublic`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'namespace是否为公共'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_AppId`</span> (<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`Name_AppId`</span> (<span class="string">`Name`</span>,<span class="string">`AppId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用namespace定义'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table audit</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Audit`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Audit`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`EntityName`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'表名'</span>,</span><br><span class="line">  <span class="string">`EntityId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'记录ID'</span>,</span><br><span class="line">  <span class="string">`OpName`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'操作类型'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'日志审计表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table cluster</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Cluster`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Cluster`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'集群名字'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'App id'</span>,</span><br><span class="line">  <span class="string">`ParentClusterId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父cluster'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_AppId_Name`</span> (<span class="string">`AppId`</span>,<span class="string">`Name`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ParentClusterId`</span> (<span class="string">`ParentClusterId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'集群'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table commit</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Commit`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Commit`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`ChangeSets`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'修改变更集'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'namespaceName'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`ClusterName`</span> (<span class="string">`ClusterName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`NamespaceName`</span> (<span class="string">`NamespaceName`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'commit 历史表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table grayreleaserule</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`GrayReleaseRule`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`GrayReleaseRule`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Cluster Name'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Namespace Name'</span>,</span><br><span class="line">  <span class="string">`BranchName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'branch name'</span>,</span><br><span class="line">  <span class="string">`Rules`</span> <span class="built_in">varchar</span>(<span class="number">16000</span>) <span class="keyword">DEFAULT</span> <span class="string">'[]'</span> <span class="keyword">COMMENT</span> <span class="string">'灰度规则'</span>,</span><br><span class="line">  <span class="string">`ReleaseId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'灰度对应的release'</span>,</span><br><span class="line">  <span class="string">`BranchStatus`</span> <span class="built_in">tinyint</span>(<span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'灰度分支状态: 0:删除分支,1:正在使用的规则 2：全量发布'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Namespace`</span> (<span class="string">`AppId`</span>,<span class="string">`ClusterName`</span>,<span class="string">`NamespaceName`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'灰度规则表'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table instance</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Instance`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Instance`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`DataCenter`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Data Center Name'</span>,</span><br><span class="line">  <span class="string">`Ip`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'instance ip'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_UNIQUE_KEY`</span> (<span class="string">`AppId`</span>,<span class="string">`ClusterName`</span>,<span class="string">`Ip`</span>,<span class="string">`DataCenter`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_IP`</span> (<span class="string">`Ip`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'使用配置的应用实例'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table instanceconfig</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`InstanceConfig`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`InstanceConfig`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`InstanceId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'Instance Id'</span>,</span><br><span class="line">  <span class="string">`ConfigAppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Config App Id'</span>,</span><br><span class="line">  <span class="string">`ConfigClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Config Cluster Name'</span>,</span><br><span class="line">  <span class="string">`ConfigNamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Config Namespace Name'</span>,</span><br><span class="line">  <span class="string">`ReleaseKey`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'发布的Key'</span>,</span><br><span class="line">  <span class="string">`ReleaseDeliveryTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'配置获取时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_UNIQUE_KEY`</span> (<span class="string">`InstanceId`</span>,<span class="string">`ConfigAppId`</span>,<span class="string">`ConfigNamespaceName`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ReleaseKey`</span> (<span class="string">`ReleaseKey`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Valid_Namespace`</span> (<span class="string">`ConfigAppId`</span>,<span class="string">`ConfigClusterName`</span>,<span class="string">`ConfigNamespaceName`</span>,<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'应用实例的配置信息'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table item</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Item`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Item`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`NamespaceId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'集群NamespaceId'</span>,</span><br><span class="line">  <span class="string">`Key`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项Key'</span>,</span><br><span class="line">  <span class="string">`Value`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'配置项值'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`LineNum`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'行号'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_GroupId`</span> (<span class="string">`NamespaceId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'配置项目'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table namespace</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Namespace`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Namespace`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Cluster Name'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'Namespace Name'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId_ClusterName_NamespaceName`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>),<span class="string">`ClusterName`</span>(<span class="number">191</span>),<span class="string">`NamespaceName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_NamespaceName`</span> (<span class="string">`NamespaceName`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'命名空间'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table namespacelock</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`NamespaceLock`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`NamespaceLock`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">  <span class="string">`NamespaceId`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'集群NamespaceId'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'软删除'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`IX_NamespaceId`</span> (<span class="string">`NamespaceId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'namespace的编辑锁'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table release</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`Release`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`Release`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`ReleaseKey`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'发布的Key'</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'发布名字'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发布说明'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'namespaceName'</span>,</span><br><span class="line">  <span class="string">`Configurations`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发布配置'</span>,</span><br><span class="line">  <span class="string">`IsAbandoned`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'是否废弃'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`AppId_ClusterName_GroupName`</span> (<span class="string">`AppId`</span>(<span class="number">191</span>),<span class="string">`ClusterName`</span>(<span class="number">191</span>),<span class="string">`NamespaceName`</span>(<span class="number">191</span>)),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ReleaseKey`</span> (<span class="string">`ReleaseKey`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'发布'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table releasehistory</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ReleaseHistory`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ReleaseHistory`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`AppId`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'AppID'</span>,</span><br><span class="line">  <span class="string">`ClusterName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'ClusterName'</span>,</span><br><span class="line">  <span class="string">`NamespaceName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'namespaceName'</span>,</span><br><span class="line">  <span class="string">`BranchName`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'发布分支名'</span>,</span><br><span class="line">  <span class="string">`ReleaseId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'关联的Release Id'</span>,</span><br><span class="line">  <span class="string">`PreviousReleaseId`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'前一次发布的ReleaseId'</span>,</span><br><span class="line">  <span class="string">`Operation`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'发布类型，0: 普通发布，1: 回滚，2: 灰度发布，3: 灰度规则更新，4: 灰度合并回主分支发布，5: 主分支发布灰度自动发布，6: 主分支回滚灰度自动发布，7: 放弃灰度'</span>,</span><br><span class="line">  <span class="string">`OperationContext`</span> longtext <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'发布上下文信息'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Namespace`</span> (<span class="string">`AppId`</span>,<span class="string">`ClusterName`</span>,<span class="string">`NamespaceName`</span>,<span class="string">`BranchName`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_ReleaseId`</span> (<span class="string">`ReleaseId`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'发布历史'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table releasemessage</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ReleaseMessage`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ReleaseMessage`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增主键'</span>,</span><br><span class="line">  <span class="string">`Message`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'发布的消息内容'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Message`</span> (<span class="string">`Message`</span>(<span class="number">191</span>))</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'发布消息'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dump of table serverconfig</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`ServerConfig`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`ServerConfig`</span> (</span><br><span class="line">  <span class="string">`Id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增Id'</span>,</span><br><span class="line">  <span class="string">`Key`</span> <span class="built_in">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项Key'</span>,</span><br><span class="line">  <span class="string">`Cluster`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置对应的集群，default为不针对特定的集群'</span>,</span><br><span class="line">  <span class="string">`Value`</span> <span class="built_in">varchar</span>(<span class="number">2048</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'配置项值'</span>,</span><br><span class="line">  <span class="string">`Comment`</span> <span class="built_in">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'注释'</span>,</span><br><span class="line">  <span class="string">`IsDeleted`</span> <span class="built_in">bit</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> b<span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'1: deleted, 0: normal'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'default'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_CreatedTime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastModifiedBy`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改人邮箱前缀'</span>,</span><br><span class="line">  <span class="string">`DataChange_LastTime`</span> <span class="built_in">timestamp</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'最后修改时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`IX_Key`</span> (<span class="string">`Key`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`DataChange_LastTime`</span> (<span class="string">`DataChange_LastTime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'配置服务自身配置'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Config</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`ServerConfig`</span> (<span class="string">`Key`</span>, <span class="string">`Cluster`</span>, <span class="string">`Value`</span>, <span class="string">`Comment`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">'eureka.service.url'</span>, <span class="string">'default'</span>, <span class="string">'http://localhost:8080/eureka/'</span>, <span class="string">'Eureka服务Url，多个service以英文逗号分隔'</span>),</span><br><span class="line">    (<span class="string">'namespace.lock.switch'</span>, <span class="string">'default'</span>, <span class="string">'false'</span>, <span class="string">'一次发布只能有一个人修改开关'</span>),</span><br><span class="line">    (<span class="string">'item.key.length.limit'</span>, <span class="string">'default'</span>, <span class="string">'128'</span>, <span class="string">'item key 最大长度限制'</span>),</span><br><span class="line">    (<span class="string">'item.value.length.limit'</span>, <span class="string">'default'</span>, <span class="string">'20000'</span>, <span class="string">'item value最大长度限制'</span>),</span><br><span class="line">    (<span class="string">'config-service.cache.enabled'</span>, <span class="string">'default'</span>, <span class="string">'false'</span>, <span class="string">'ConfigService是否开启缓存，开启后能提高性能，但是会增大内存消耗！'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br></pre></td></tr></table></figure><h1 id="2-本地启动"><a href="#2-本地启动" class="headerlink" title="2 本地启动"></a>2 本地启动</h1><h2 id="2-1-Apollo-Config-Service和Apollo-Admin-Service"><a href="#2-1-Apollo-Config-Service和Apollo-Admin-Service" class="headerlink" title="2.1 Apollo Config Service和Apollo Admin Service"></a>2.1 Apollo Config Service和Apollo Admin Service</h2><p>在本地开发时，一般会同时启动<code>apollo-configservice</code>和<code>apollo-adminservice</code>,是基于<strong>appollo-assembly</strong>来启动的，后面会进行详细介绍。</p><h3 id="2-1-1-新建运行配置"><a href="#2-1-1-新建运行配置" class="headerlink" title="2.1.1 新建运行配置"></a>2.1.1 新建运行配置</h3><p>如下图所示，点击Edit Configurations…<br><img src="https://img-blog.csdnimg.cn/20191213160123359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建Application：<br><img src="https://img-blog.csdnimg.cn/20191213160505542.png" alt="在这里插入图片描述"></p><h3 id="2-1-2-配置Application"><a href="#2-1-2-配置Application" class="headerlink" title="2.1.2 配置Application"></a>2.1.2 配置Application</h3><p><img src="https://img-blog.csdnimg.cn/20191213160242149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示：</p><ul><li><p><strong>Name</strong>：ConfigAdminApplication</p></li><li><p><strong>Main class配置</strong>：<code>com.ctrip.framework.apollo.assembly.ApolloApplication</code></p><blockquote><p>如果希望独立启动apollo-configservice和apollo-adminservice，可以把Main Class分别换成 com.ctrip.framework.apollo.configservice.ConfigServiceApplication和 com.ctrip.framework.apollo.adminservice.AdminServiceApplication</p></blockquote></li><li><p><strong>VM options配置</strong>:username和password要填对。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Dapollo_profile=github</span><br><span class="line">-Dspring.datasource.url=jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8</span><br><span class="line">-Dspring.datasource.username=root</span><br><span class="line">-Dspring.datasource.password=123456</span><br></pre></td></tr></table></figure><p> 可以指定日志文件的路径。</p><blockquote><p>程序默认日志输出为/opt/logs/100003171/apollo-assembly.log，如果需要修改日志文件路径，可以增加logging.file参数，如下：</p></blockquote></li><li><p>Dlogging.file=/your-path/apollo-assembly.log</p></li><li><p><strong>Program arguments配置</strong>: –configservice –adminservice</p></li></ul><p>启动完成后，打开<code>http://localhost:8080</code>可以看到apollo-configservice和apollo-adminservice都已经启动完成并注册到Eureka。</p><p><img src="https://img-blog.csdnimg.cn/20191213161451583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-2-Apollo-Portal"><a href="#2-2-Apollo-Portal" class="headerlink" title="2.2 Apollo-Portal"></a>2.2 Apollo-Portal</h2><p>本地启动apollo-portal跟上面启动apollo-configservice和apollo-adminservice很相似。</p><p>跟上面一样，创建Application：<br><img src="https://img-blog.csdnimg.cn/20191213160505542.png" alt="在这里插入图片描述"><br>配置Application：<br><img src="https://img-blog.csdnimg.cn/20191213161818943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示：</p><ul><li><strong>Name</strong>：PortalApplication</li><li><strong>Main class配置</strong>：<code>com.ctrip.framework.apollo.portal.PortalApplication</code></li><li><strong>VM options配置</strong>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Dapollo_profile=github,auth</span><br><span class="line">-Ddev_meta=http://localhost:8080/</span><br><span class="line">-Dserver.port=8070</span><br><span class="line">-Dspring.datasource.url=jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8</span><br><span class="line">-Dspring.datasource.username=root</span><br><span class="line">-Dspring.datasource.password=123456</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li>这里指定了apollo_profile是github和auth，其中github是Apollo必须的一个profile，用于数据库的配置，auth是从0.9.0新增的，用来支持使用apollo提供的Spring Security简单认证。</li><li>程序默认日志输出为/opt/logs/100003173/apollo-portal.log，如果需要修改日志文件路径，可以增加logging.file参数，如下：</li><li>Dlogging.file=/your-path/apollo-portal.log</li></ul></blockquote><p>启动完后，打开 <a href="http://localhost:8070" target="_blank" rel="noopener">http://localhost:8070</a> 就可以看到Apollo配置中心界面了。<br><img src="https://img-blog.csdnimg.cn/20191213162330903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以在上面做些创建项目的测试。<br><img src="https://img-blog.csdnimg.cn/20191213162634846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以创建anna2019项目为例。下图为创建项目后，添加了两个配置。（<strong>建议大家一定一定要动手操作下，放心的做测试，不会删库的</strong>）<br><img src="https://img-blog.csdnimg.cn/20191213170515790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="3-Demo应用接入"><a href="#3-Demo应用接入" class="headerlink" title="3 Demo应用接入"></a>3 Demo应用接入</h1><p>项目中有一个样例客户端的项目：apollo-demo。</p><p>跟上面一样，创建Application。<br><img src="https://img-blog.csdnimg.cn/20191213165652992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图所示：</p><ul><li><strong>Name</strong>：SimpleApolloConfigDemo</li><li><strong>Main class配置</strong>：<code>com.ctrip.framework.apollo.demo.api.SimpleApolloConfigDemo</code></li><li><strong>VM options配置：</strong>-Dapollo.meta=<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></li></ul><p>apollo-demo项目的app.properties文件中：apollo-demo/src/main/resources/META-INF/app.properties会有app.id的配置，这里修改为刚才创建的anna2019.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.id=anna2019</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>AppId是应用的唯一身份标识</code>，Apollo客户端使用这个标识来获取应用自己的私有Namespace配置。<br>对于公共Namespace的配置，没有AppId也可以获取到配置，但是就失去了应用覆盖公共Namespace配置的能力。</p></blockquote><p>运行SimpleApolloConfigDemo，启动成功后，可以看到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apollo Config Demo. Please input key to get the value. Input quit to exit.</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在anna2019项目里我们配置了两个配置，Key分别为：yuanrengu、anna999 。</p><p>输入：<code>yuanrengu</code>。可以看到结果如下：<br><img src="https://img-blog.csdnimg.cn/20191213165234482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>至此完成Apollo的本地运行环境已经搭建完成，并创建项目做了测试。再次重申，大家一定一定要动手操作，这样才能对项目理解更深刻。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/ctripcorp/apollo/wiki/Apollo%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Apollo开发指南</a><br><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Apollo官方文档的介绍其实已经很详细，出一个Apollo系列主要是对自己学习的一个归纳、源码解读以及踩坑的总结。大家还是以阅读官方文档为主！&lt;br&gt;Apollo系列会分篇介绍环境的搭建、常用场景的配置分析、源码解读等。&lt;strong&gt;系列文章均
      
    
    </summary>
    
    
      <category term="Apollo" scheme="https://yuanrengu.com/categories/Apollo/"/>
    
    
      <category term="环境搭建" scheme="https://yuanrengu.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>面试官，不要再问我三次握手和四次挥手</title>
    <link href="https://yuanrengu.com/2020/77eef79f.html"/>
    <id>https://yuanrengu.com/2020/77eef79f.html</id>
    <published>2020-01-10T08:07:33.000Z</published>
    <updated>2020-01-13T06:42:16.352Z</updated>
    
    <content type="html"><![CDATA[<p>三次握手和四次挥手是各个公司常见的考点，也具有一定的水平区分度，也被一些面试官作为热身题。很多小伙伴说这个问题刚开始回答的挺好，但是后面越回答越冒冷汗，最后就歇菜了。</p><p>见过比较典型的面试场景是这样的:</p><blockquote><p>面试官：请介绍下三次握手<br>求职者：第一次握手就是客户端给服务器端发送一个报文，第二次就是服务器收到报文之后，会应答一个报文给客户端，第三次握手就是客户端收到报文后再给服务器发送一个报文，三次握手就成功了。<br>面试官：然后呢？<br>求职者：这就是三次握手的过程，很简单的。<br>面试官：。。。。。。<br>（<strong>番外篇：一首凉凉送给你</strong>）</p></blockquote><p>记住猿人谷一句话：<strong>面试时越简单的问题，一般就是隐藏着比较大的坑，一般都是需要将问题扩展的</strong>。上面求职者的回答不对吗？当然对，但距离面试官的期望可能还有点距离。</p><p>希望大家能带着如下问题进行阅读，收获会更大。</p><ol><li>请画出三次握手和四次挥手的示意图</li><li>为什么连接的时候是三次握手？</li><li>什么是半连接队列？</li><li>ISN(Initial Sequence Number)是固定的吗？</li><li>三次握手过程中可以携带数据吗？</li><li>如果第三次握手丢失了，客户端服务端会如何处理？</li><li>SYN攻击是什么？</li><li>挥手为什么需要四次？</li><li>四次挥手释放连接时，等待2MSL的意义?</li></ol><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMDIvZlNHVGh0UEV3QXZSVmNVLnBuZw?x-oss-process=image/format,png" alt="三次握手和四次挥手.png"></p><h2 id="1-三次握手"><a href="#1-三次握手" class="headerlink" title="1. 三次握手"></a>1. 三次握手</h2><p>三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换<code>TCP窗口大小</code>信息。</p><p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。<br>进行三次握手：</p><ul><li><p>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN。此时客户端处于 <code>SYN_SENT</code> 状态。</p><p>首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</p></li><li><p>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 <code>SYN_RCVD</code> 的状态。</p><p>在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。</p></li><li><p>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 <code>ESTABLISHED</code> 状态。服务器收到 ACK 报文之后，也处于 <code>ESTABLISHED</code> 状态，此时，双方已建立起了连接。</p><p>确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</p></li></ul><p>发送第一个SYN的一端将执行主动打开（active open），接收这个SYN并发回下一个SYN的另一端执行被动打开（passive open）。</p><p>在socket编程中，客户端执行connect()时，将触发三次握手。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMDIvMWNUWVZNdkh0TGkyb0VJLnBuZw?x-oss-process=image/format,png" alt="三次握手.png"></p><h3 id="1-1-为什么需要三次握手，两次不行吗？"><a href="#1-1-为什么需要三次握手，两次不行吗？" class="headerlink" title="1.1 为什么需要三次握手，两次不行吗？"></a>1.1 为什么需要三次握手，两次不行吗？</h3><p>弄清这个问题，我们需要先弄明白三次握手的目的是什么，能不能只用两次握手来达到同样的目的。</p><ul><li>第一次握手：客户端发送网络包，服务端收到了。<br>  这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手：服务端发包，客户端收到了。<br> 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</li><li>第三次握手：客户端发包，服务端收到了。<br> 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</li></ul><p>因此，需要三次握手才能确认双方的接收与发送能力是否正常。</p><p>试想如果是用两次握手，则会出现下面这种情况：</p><blockquote><p>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在<strong>某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端</strong>，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</p></blockquote><h3 id="1-2-什么是半连接队列？"><a href="#1-2-什么是半连接队列？" class="headerlink" title="1.2 什么是半连接队列？"></a>1.2 什么是半连接队列？</h3><p>服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还没有完全建立其连接，服务器会把此种状态下请求连接放在一个<strong>队列</strong>里，我们把这种队列称之为<strong>半连接队列</strong>。</p><p>当然还有一个<strong>全连接队列</strong>，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。</p><p>这里在补充一点关于<strong>SYN-ACK 重传次数</strong>的问题：<br>服务器发送完SYN-ACK包，如果未收到客户确认包，服务器进行首次重传，等待一段时间仍未收到客户确认包，进行第二次重传。如果重传次数超过系统规定的最大重传次数，系统将该连接信息从半连接队列中删除。<br>注意，每次重传等待的时间不一定相同，一般会是指数增长，例如间隔时间为 1s，2s，4s，8s……</p><h3 id="1-3-ISN-Initial-Sequence-Number-是固定的吗？"><a href="#1-3-ISN-Initial-Sequence-Number-是固定的吗？" class="headerlink" title="1.3 ISN(Initial Sequence Number)是固定的吗？"></a>1.3 ISN(Initial Sequence Number)是固定的吗？</h3><p>当一端为建立连接而发送它的SYN时，它为连接选择一个初始序号。ISN随时间而变化，因此每个连接都将具有不同的ISN。ISN可以看作是一个32比特的计数器，每4ms加1 。这样选择序号的目的在于防止在网络中被延迟的分组在以后又被传送，而导致某个连接的一方对它做错误的解释。</p><p><strong>三次握手的其中一个重要功能是客户端和服务端交换 ISN(Initial Sequence Number)，以便让对方知道接下来接收数据的时候如何按序列号组装数据。如果 ISN 是固定的，攻击者很容易猜出后续的确认号，因此 ISN 是动态生成的。</strong></p><h3 id="1-4-三次握手过程中可以携带数据吗？"><a href="#1-4-三次握手过程中可以携带数据吗？" class="headerlink" title="1.4 三次握手过程中可以携带数据吗？"></a>1.4 三次握手过程中可以携带数据吗？</h3><p>其实第三次握手的时候，是可以携带数据的。但是，<strong>第一次、第二次握手不可以携带数据</strong></p><p>为什么这样呢?大家可以想一个问题，假如第一次握手可以携带数据的话，如果有人要恶意攻击服务器，那他每次都在第一次握手中的 SYN 报文中放入大量的数据。因为攻击者根本就不理服务器的接收、发送能力是否正常，然后疯狂着重复发 SYN 报文的话，这会让服务器花费很多时间、内存空间来接收这些报文。</p><p>也就是说，<strong>第一次握手不可以放数据，其中一个简单的原因就是会让服务器更加容易受到攻击了。而对于第三次的话，此时客户端已经处于 ESTABLISHED 状态。对于客户端来说，他已经建立起连接了，并且也已经知道服务器的接收、发送能力是正常的了，所以能携带数据也没啥毛病。</strong></p><h3 id="1-5-SYN攻击是什么？"><a href="#1-5-SYN攻击是什么？" class="headerlink" title="1.5 SYN攻击是什么？"></a>1.5 SYN攻击是什么？</h3><p><strong>服务器端的资源分配是在二次握手时分配的，而客户端的资源是在完成三次握手时分配的</strong>，所以服务器容易受到SYN洪泛攻击。SYN攻击就是Client在短时间内伪造大量不存在的IP地址，并向Server不断地发送SYN包，Server则回复确认包，并等待Client确认，由于源地址不存在，因此Server需要不断重发直至超时，这些伪造的SYN包将长时间占用未连接队列，导致正常的SYN请求因为队列满而被丢弃，从而引起网络拥塞甚至系统瘫痪。SYN 攻击是一种典型的 DoS/DDoS 攻击。</p><p>检测 SYN 攻击非常的方便，当你在服务器上看到大量的半连接状态时，特别是源IP地址是随机的，基本上可以断定这是一次SYN攻击。在 Linux/Unix 上可以使用系统自带的 netstats 命令来检测 SYN 攻击。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -n -p TCP | grep SYN_RECV</span><br></pre></td></tr></table></figure><p>常见的防御 SYN 攻击的方法有如下几种：</p><ul><li>缩短超时（SYN Timeout）时间</li><li>增加最大半连接数</li><li>过滤网关防护</li><li>SYN cookies技术</li></ul><h2 id="2-四次挥手"><a href="#2-四次挥手" class="headerlink" title="2. 四次挥手"></a>2. 四次挥手</h2><p>建立一个连接需要三次握手，而终止一个连接要经过四次挥手（也有将四次挥手叫做四次握手的）。这由TCP的<strong>半关闭</strong>（half-close）造成的。所谓的半关闭，其实就是TCP提供了连接的一端在结束它的发送后还能接收来自另一端数据的能力。</p><p>TCP 连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，客户端或服务端均可主动发起挥手动作。</p><p>刚开始双方都处于<code>ESTABLISHED</code> 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p><ul><li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 <code>FIN_WAIT1</code> 状态。<br>即发出<strong>连接释放报文段</strong>（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 <code>CLOSE_WAIT</code> 状态。<br>即服务端收到连接释放报文段后即发出<strong>确认报文段</strong>（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li><li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态。<br>即服务端没有要向客户端发出的数据，服务端发出<strong>连接释放报文段</strong>（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 <code>TIME_WAIT</code> 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 <code>CLOSED</code> 状态。<br>即客户端收到服务端的连接释放报文段后，对此发出<strong>确认报文段</strong>（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li></ul><p>收到一个FIN只意味着在这一方向上没有数据流动。<strong>客户端执行主动关闭并进入TIME_WAIT是正常的，服务端通常执行被动关闭，不会进入TIME_WAIT状态。</strong></p><p>在socket编程中，任何一方执行close()操作即可产生挥手操作。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMDYvdmxzRDNuUlFFZFVoSXdpLnBuZw?x-oss-process=image/format,png" alt="image.png"></p><h3 id="2-1-挥手为什么需要四次？"><a href="#2-1-挥手为什么需要四次？" class="headerlink" title="2.1 挥手为什么需要四次？"></a>2.1 挥手为什么需要四次？</h3><p>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中<strong>ACK报文是用来应答的，SYN报文是用来同步的</strong>。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，”你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。</p><h3 id="2-2-2MSL等待状态"><a href="#2-2-2MSL等待状态" class="headerlink" title="2.2 2MSL等待状态"></a>2.2 2MSL等待状态</h3><p>TIME_WAIT状态也成为2MSL等待状态。每个具体TCP实现必须选择一个报文段最大生存时间MSL（Maximum Segment Lifetime），它是任何报文段被丢弃前在网络内的最长时间。这个时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL字段。</p><p>对一个具体实现所给定的MSL值，处理的原则是：当TCP执行一个主动关闭，并发回最后一个ACK，该连接必须在TIME_WAIT状态停留的时间为2倍的MSL。这样可让TCP再次发送最后的ACK以防这个ACK丢失（另一端超时并重发最后的FIN）。</p><p>这种2MSL等待的另一个结果是这个TCP连接在2MSL等待期间，定义这个连接的插口（客户的IP地址和端口号，服务器的IP地址和端口号）不能再被使用。这个连接只能在2MSL结束后才能再被使用。</p><h3 id="2-3-四次挥手释放连接时，等待2MSL的意义"><a href="#2-3-四次挥手释放连接时，等待2MSL的意义" class="headerlink" title="2.3 四次挥手释放连接时，等待2MSL的意义?"></a>2.3 四次挥手释放连接时，等待2MSL的意义?</h3><blockquote><p><strong>MSL</strong>是Maximum Segment Lifetime的英文缩写，可译为“最长报文段寿命”，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。</p></blockquote><p>为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间<code>等待计时器</code>。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。</p><h4 id="两个理由："><a href="#两个理由：" class="headerlink" title="两个理由："></a>两个理由：</h4><ol><li><p><strong>保证客户端发送的最后一个ACK报文段能够到达服务端</strong>。</p><p> 这个ACK报文段有可能丢失，使得处于LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认，服务端超时重传FIN+ACK报文段，而客户端能在2MSL时间内收到这个重传的FIN+ACK报文段，接着客户端重传一次确认，重新启动2MSL计时器，最后客户端和服务端都进入到CLOSED状态，若客户端在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到服务端重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则服务端无法正常进入到CLOSED状态。</p></li><li><p><strong>防止“已失效的连接请求报文段”出现在本连接中</strong>。</p><p>客户端在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。</p></li></ol><h3 id="2-4-为什么TIME-WAIT状态需要经过2MSL才能返回到CLOSE状态？"><a href="#2-4-为什么TIME-WAIT状态需要经过2MSL才能返回到CLOSE状态？" class="headerlink" title="2.4 为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？"></a>2.4 为什么TIME_WAIT状态需要经过2MSL才能返回到CLOSE状态？</h3><p>理论上，四个报文都发送完毕，就可以直接进入CLOSE状态了，但是可能网络是不可靠的，有可能最后一个ACK丢失。所以<strong>TIME_WAIT状态就是用来重发可能丢失的ACK报文</strong>。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>《TCP/IP详解 卷1:协议》有一张TCP状态变迁图，很具有代表性，有助于大家理解三次握手和四次挥手的状态变化。如下图所示，粗的实线箭头表示正常的客户端状态变迁，粗的虚线箭头表示正常的服务器状态变迁。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMDQvalZQTjlVTE15dUl4NDV2LmpwZw?x-oss-process=image/format,png" alt="TCP状态变迁图.jpg"></p><p><strong>以后面试官再问你三次握手和四次挥手，直接把这一篇文章丢给他就可以了，他想问的都在这里。</strong></p><p><strong>参考</strong>：<br>《TCP/IP详解 卷1:协议》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;三次握手和四次挥手是各个公司常见的考点，也具有一定的水平区分度，也被一些面试官作为热身题。很多小伙伴说这个问题刚开始回答的挺好，但是后面越回答越冒冷汗，最后就歇菜了。&lt;/p&gt;
&lt;p&gt;见过比较典型的面试场景是这样的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试官：请介绍下三
      
    
    </summary>
    
    
      <category term="TCP" scheme="https://yuanrengu.com/categories/TCP/"/>
    
    
      <category term="面试" scheme="https://yuanrengu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="三次握手" scheme="https://yuanrengu.com/tags/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    
      <category term="四次挥手" scheme="https://yuanrengu.com/tags/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>弄明白CMS和G1，就靠这一篇了</title>
    <link href="https://yuanrengu.com/2020/4c889127.html"/>
    <id>https://yuanrengu.com/2020/4c889127.html</id>
    <published>2020-01-10T08:00:32.000Z</published>
    <updated>2020-01-13T06:42:16.351Z</updated>
    
    <content type="html"><![CDATA[<p>在开始介绍CMS和G1前，我们可以剧透几点：</p><ul><li>根据不同分代的特点，收集器可能不同。有些收集器可以同时用于新生代和老年代，而有些时候，则需要分别为新生代或老年代选用合适的收集器。一般来说，新生代收集器的收集频率较高，应选用性能高效的收集器；而老年代收集器收集次数相对较少，对空间较为敏感，应当避免选择基于复制算法的收集器。</li><li><strong>在垃圾收集执行的时刻，应用程序需要暂停运行</strong>。</li><li>可以串行收集，也可以并行收集。</li><li>如果能做到并发收集（应用程序不必暂停），那绝对是很妙的事情。</li><li>如果收集行为可控，那也是很妙的事情。</li></ul><p>CMS和G1作为垃圾收集器里的大杀器，是需要好好弄明白的，而且面试中也经常被问到。</p><p><strong>希望大家带着下面的问题进行阅读，有目标的阅读，收获更多:</strong></p><ol><li>为什么没有一种牛逼的收集器像银弹一样适配所有场景？</li><li>CMS的优点、缺点、适用场景？</li><li>为什么CMS只能用作老年代收集器，而不能应用在新生代的收集？</li><li>G1的优点、缺点、适用场景？</li></ol><h2 id="1-CMS收集器"><a href="#1-CMS收集器" class="headerlink" title="1 CMS收集器"></a>1 CMS收集器</h2><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器</strong>。这是因为CMS收集器工作时，GC工作线程与用户线程可以<code>并发</code>执行，以此来达到降低收集停顿时间的目的。</p><p>CMS收集器仅作用于<strong>老年代</strong>的收集，是基于<code>标记-清除算法</code>的，它的运作过程分为4个步骤：</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ul><p>其中，<code>初始标记</code>、<code>重新标记</code>这两个步骤仍然需要Stop-the-world。<strong>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始阶段稍长一些，但远比并发标记的时间短。</strong></p><blockquote><p>CMS以流水线方式拆分了收集周期，将耗时长的操作单元保持与应用线程并发执行。只将那些必需STW才能执行的操作单元单独拎出来，控制这些单元在恰当的时机运行，并能保证仅需短暂的时间就可以完成。这样，在整个收集周期内，只有<strong>两次短暂的暂停（初始标记和重新标记）</strong>，<strong>达到了近似并发的目的</strong>。</p></blockquote><p>CMS收集器<strong>优点</strong>：并发收集、低停顿。</p><p>CMS收集器<strong>缺点</strong>：</p><ul><li>CMS收集器对CPU资源非常敏感。</li><li>CMS收集器无法处理浮动垃圾（Floating Garbage）。</li><li>CMS收集器是基于标记-清除算法，该算法的缺点都有。</li></ul><p>CMS收集器之所以能够做到并发，根本原因在于<strong>采用基于“标记-清除”的算法并对算法过程进行了细粒度的分解</strong>。前面篇章介绍过标记-清除算法将产生大量的内存碎片这对新生代来说是难以接受的，因此新生代的收集器并未提供CMS版本。</p><p>另外要补充一点，JVM在暂停的时候，需要选准一个时机。由于JVM系统运行期间的复杂性，不可能做到随时暂停，因此引入了安全点的概念。</p><h3 id="安全点-Safepoint"><a href="#安全点-Safepoint" class="headerlink" title="安全点(Safepoint)"></a>安全点(Safepoint)</h3><p><strong>安全点，即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停</strong>。Safepoint的选定既不能太少以至于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。</p><p>安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，Java虚拟机的堆栈不会发生变化。这么一来，垃圾回收器便能够“安全”地执行可达性分析。只要不离开这个安全点，Java虚拟机便能够在垃圾回收的同时，继续运行这段本地代码。</p><p>程序运行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的。“<strong>长时间执行</strong>”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。</p><p>对于安全点，另一个需要考虑的问题就是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。</p><p>两种解决方案：</p><ul><li><p>抢先式中断（Preemptive Suspension）</p><p>抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机采用这种方式来暂停线程从而响应GC事件。</p></li><li><p>主动式中断（Voluntary Suspension）</p><p>主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志的地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p></li></ul><h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>指在一段代码片段中，引用关系不会发生变化。在这个区域中任意地方开始GC都是安全的。也可以把Safe Region看作是被扩展了的Safepoint。</p><h2 id="2-G1收集器"><a href="#2-G1收集器" class="headerlink" title="2 G1收集器"></a>2 G1收集器</h2><p>G1重新定义了堆空间，打破了原有的分代模型，将堆划分为一个个区域。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。区域划分的好处就是带来了停顿时间可预测的收集模型：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。</p><p>G1与CMS的特征对比如下：</p><table><thead><tr><th>特征</th><th>G1</th><th>CMS</th></tr></thead><tbody><tr><td>并发和分代</td><td>是</td><td>是</td></tr><tr><td>最大化释放堆内存</td><td>是</td><td>否</td></tr><tr><td>低延时</td><td>是</td><td>是</td></tr><tr><td>吞吐量</td><td>高</td><td>低</td></tr><tr><td>压实</td><td>是</td><td>否</td></tr><tr><td>可预测性</td><td>强</td><td>弱</td></tr><tr><td>新生代和老年代的物理隔离</td><td>否</td><td>是</td></tr></tbody></table><p><strong>G1具备如下特点：</strong></p><ul><li><strong>并行与并发</strong>：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-the-world停顿的时间，部分其他收集器原来需要停顿Java线程执行的GC操作，G1收集器仍然可以通过<strong>并发</strong>的方式让Java程序继续运行。</li><li>分代收集</li><li>空间整合：与CMS的标记-清除算法不同，G1从整体来看是基于<strong>标记-整理算法</strong>实现的收集器，从局部（两个Region之间）上来看是基于“<strong>复制</strong>”算法实现的。但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。<strong>这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC</strong>。</li><li>可预测的停顿：这是G1相对于CMS的一个优势，降低停顿时间是G1和CMS共同的关注点。</li></ul><p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。在堆的结构设计时，G1打破了以往将收集范围固定在新生代或老年代的模式，G1将堆分成许多相同大小的区域单元，每个单元称为Region。Region是一块地址连续的内存空间，G1模块的组成如下图所示：</p><p><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110154339.png" alt="G1堆的Region布局.png"></p><p>G1收集器将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。Region的大小是一致的，数值是在1M到32M字节之间的一个2的幂值数，JVM会尽量划分2048个左右、同等大小的Region，这一点可以参看如下<a href="http://hg.openjdk.java.net/jdk/jdk/file/fa2f93f99dbc/src/hotspot/share/gc/g1/heapRegionBounds.hpp" target="_blank" rel="noopener">源码</a>。其实这个数字既可以手动调整，G1也会根据堆大小自动进行调整。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#ifndef SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span><br><span class="line">#define SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span><br><span class="line"></span><br><span class="line">#include &quot;memory/allocation.hpp&quot;</span><br><span class="line"></span><br><span class="line">class HeapRegionBounds : public AllStatic &#123;</span><br><span class="line">private:</span><br><span class="line">  // Minimum region size; we won&apos;t go lower than that.</span><br><span class="line">  // We might want to decrease this in the future, to deal with small</span><br><span class="line">  // heaps a bit more efficiently.</span><br><span class="line">  static const size_t MIN_REGION_SIZE = 1024 * 1024;</span><br><span class="line"></span><br><span class="line">  // Maximum region size; we don&apos;t go higher than that. There&apos;s a good</span><br><span class="line">  // reason for having an upper bound. We don&apos;t want regions to get too</span><br><span class="line">  // large, otherwise cleanup&apos;s effectiveness would decrease as there</span><br><span class="line">  // will be fewer opportunities to find totally empty regions after</span><br><span class="line">  // marking.</span><br><span class="line">  static const size_t MAX_REGION_SIZE = 32 * 1024 * 1024;</span><br><span class="line"></span><br><span class="line">  // The automatic region size calculation will try to have around this</span><br><span class="line">  // many regions in the heap (based on the min heap size).</span><br><span class="line">  static const size_t TARGET_REGION_NUMBER = 2048;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">  static inline size_t min_size();</span><br><span class="line">  static inline size_t max_size();</span><br><span class="line">  static inline size_t target_number();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // SHARE_VM_GC_G1_HEAPREGIONBOUNDS_HPP</span><br></pre></td></tr></table></figure><p><strong>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集</strong>。G1会通过一个合理的计算模型，计算出每个Region的收集成本并量化，这样一来，收集器在给定了“停顿”时间限制的情况下，总是能选择一组恰当的Regions作为收集目标，让其收集开销满足这个限制条件，以此达到实时收集的目的。</p><p>对于打算从CMS或者ParallelOld收集器迁移过来的应用，按照<a href="https://www.oracle.com/technetwork/java/javase/tech/g1-intro-jsp-135488.html" target="_blank" rel="noopener">官方</a> 的建议，如果发现符合如下特征，可以考虑更换成G1收集器以追求更佳性能：</p><ul><li>实时数据占用了超过半数的堆空间；</li><li>对象分配率或“晋升”的速度变化明显；</li><li>期望消除耗时较长的GC或停顿（超过0.5——1秒）。</li></ul><blockquote><p>原文如下：<br>Applications running today with either the CMS or the ParallelOld garbage collector would benefit switching to G1 if the application has one or more of the following traits.</p><ul><li>More than 50% of the Java heap is occupied with live data.</li><li>The rate of object allocation rate or promotion varies significantly.</li><li>Undesired long garbage collection or compaction pauses (longer than 0.5 to 1 second)</li></ul></blockquote><p><strong>G1收集的运作过程大致如下：</strong></p><ul><li><strong>初始标记（Initial Marking）</strong>：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，<strong>这阶段需要<code>停顿线程</code>，但耗时很短</strong>。</li><li><strong>并发标记（Concurrent Marking）</strong>：是从GC Roots开始堆中对象进行可达性分析，找出存活的对象，<strong>这阶段耗时较长</strong>，但可与用户程序并发执行。</li><li><strong>最终标记（Final Marking）</strong>：是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，<strong>这阶段需要<code>停顿线程</code>，但是可并行执行</strong>。</li><li><strong>筛选回收（Live Data Counting and Evacuation）</strong>：首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li></ul><p>全局变量和栈中引用的对象是可以列入根集合的，这样在寻找垃圾时，就可以从根集合出发扫描堆空间。在G1中，引入了一种新的能加入根集合的类型，就是<code>记忆集</code>（Remembered Set）。Remembered Sets（也叫RSets）用来跟踪对象引用。G1的很多开源都是源自Remembered Set，例如，它通常约占Heap大小的20%或更高。并且，我们进行对象复制的时候，因为需要扫描和更改Card Table的信息，这个速度影响了复制的速度，进而影响暂停时间。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTkvblRneGVCUG1HOWhWc1c0LnBuZw?x-oss-process=image/format,png" alt="image.png"></p><h3 id="卡表（Card-Table）"><a href="#卡表（Card-Table）" class="headerlink" title="卡表（Card Table）"></a>卡表（Card Table）</h3><p>有个场景，老年代的对象可能引用新生代的对象，那标记存活对象的时候，需要扫描老年代中的所有对象。因为该对象拥有对新生代对象的引用，那么这个引用也会被称为GC Roots。那不是得又做全堆扫描？成本太高了吧。</p><p>HotSpot给出的解决方案是一项叫做<code>卡表</code>（Card Table）的技术。该技术将整个堆划分为一个个大小为512字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。</p><p>在进行Minor GC的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到Minor GC的GC Roots里。当完成所有脏卡的扫描之后，Java虚拟机便会将所有脏卡的标识位清零。</p><p>想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么Java虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p><p><strong>卡表能用于减少老年代的全堆空间扫描，这能很大的提升GC效率</strong>。</p><p>我们可以看下官方文档对G1的展望（这段英文描述比较简单，我就不翻译了）：</p><blockquote><p>Future:<br>G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS). Comparing G1 with CMS, there are differences that make G1 a better solution. One difference is that G1 is a compacting collector. G1 compacts sufficiently to completely avoid the use of fine-grained free lists for allocation, and instead relies on regions. This considerably simplifies parts of the collector, and mostly eliminates potential fragmentation issues. Also, G1 offers more predictable garbage collection pauses than the CMS collector, and allows users to specify desired pause targets.</p></blockquote><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3 总结"></a>3 总结</h2><p>查了下度娘有关G1的文章，绝大部分文章对G1的介绍都是停留在JDK7或更早期的实现很多结论已经存在较大偏差了，甚至一些过去的GC选项已经不再推荐使用。举个例子，JDK9中JVM和GC日志进行了重构，如PrintGCDetails已经被标记为废弃，而PrintGCDateStamps已经被移除，指定它会导致JVM无法启动。</p><p>本文对CMS和G1的介绍绝大部分内容也是基于JDK7，新版本中的内容有一点介绍，倒没做过多介绍（本人对新版本JVM还没有深入研究），后面有机会可以再出专门的文章来重点介绍。</p><h2 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h2><p>《深入理解Java虚拟机》<br>《HotSpot实战》<br>《极客时间专栏》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开始介绍CMS和G1前，我们可以剧透几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据不同分代的特点，收集器可能不同。有些收集器可以同时用于新生代和老年代，而有些时候，则需要分别为新生代或老年代选用合适的收集器。一般来说，新生代收集器的收集频率较高，应选用性能高效的收集器；而老年代收
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="CMS" scheme="https://yuanrengu.com/tags/CMS/"/>
    
      <category term="G1" scheme="https://yuanrengu.com/tags/G1/"/>
    
  </entry>
  
  <entry>
    <title>【面试必备】小伙伴栽在了JVM的内存分配策略。。。</title>
    <link href="https://yuanrengu.com/2020/1977ac11.html"/>
    <id>https://yuanrengu.com/2020/1977ac11.html</id>
    <published>2020-01-10T08:00:09.000Z</published>
    <updated>2020-01-13T06:42:16.349Z</updated>
    
    <content type="html"><![CDATA[<p>周末有小伙伴留言说上周面试时被问到内存分配策略的问题，但回答的不够理想，小伙伴说之前公号里看过这一块的文章的，当时看时很清楚，也知道各个策略是干嘛的，但面试时脑子里清楚，心里很明白，但嘴里就是说不清楚，说出来的就是像云像雾又像风，最后面试官说他应该是不清楚这一块的内容</p><p>这里给小伙伴要再次说明下，任何知识点，<strong>先抓主干，再摸细节</strong>。对于面试来说，能把各个主干捋清楚，只要面试官要求不是太高，都是能过关的。毕竟jvm参数那么多，难不成面试官揪着各个参数的作用不放？如果真遇到这种太过揪细节的，只能说江湖路远，有缘再见！</p><p>对象的内存分配，往大方向上讲，就是在<strong>堆</strong>上分配（但也可能经过JIT编译后被拆散为标量类型并间接地栈上分配），<strong>对象主要分配在新生代的Eden区上</strong>，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下可能会直接分配在老年代中。</p><h3 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h3><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC（前面篇章中有介绍过Minor GC）。但也有一种情况，在内存担保机制下，无法安置的对象会直接进到老年代。</p><h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>大对象时指需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。</p><p>虚拟机提供了一个-XX：PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配。目的就是避免在Eden区及两个Survivor区之间发生大量的内存复制。</p><h3 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h3><p>虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1 。对象在Survivor区中没经过一次Minor GC，年龄就加1岁，当年龄达到15岁（默认值），就会被晋升到老年代中。</p><p>对象晋升老年代的年龄阈值，可以通过参数-XX：MaxTenuringThreshold设置。</p><h4 id="接下来我们来回答JVM的分代年龄为什么是15？而不是16-20之类的呢？"><a href="#接下来我们来回答JVM的分代年龄为什么是15？而不是16-20之类的呢？" class="headerlink" title="接下来我们来回答JVM的分代年龄为什么是15？而不是16,20之类的呢？"></a>接下来我们来回答JVM的分代年龄为什么是15？而不是16,20之类的呢？</h4><p>真的不是为什么不能是其它数（除了15），着实是臣妾做不到啊！</p><p>事情是这样的，HotSpot虚拟机的对象头其中一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“Mark word”。</p><p>例如，在32位的HotSpot虚拟机中，如果对象处于未被锁定的状态下，那么Mark Word的32bit空间中25bit用于存储对象哈希码，4bit用于存储对象分代年龄，2bit用于存储锁标志位，1bit固定为0 。</p><p>明白是什么原因了吗？对象的分代年龄占4位，也就是0000，最大值为1111也就是最大为15，而不可能为16，20之类的了。</p><h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>为了能更好的适应不同程序的内存状况，虚拟机并不是永远地要求兑现过的年龄必须达到了MaxTenuringThreshold才能晋升老年代。</p><h4 id="满足如下条件之一，对象能晋升老年代："><a href="#满足如下条件之一，对象能晋升老年代：" class="headerlink" title="满足如下条件之一，对象能晋升老年代："></a>满足如下条件之一，对象能晋升老年代：</h4><ol><li>对象的年龄达到了MaxTenuringThreshold（默认15）能晋升老年代。</li><li>如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</li></ol><p>很多文章都只是注意到了上面描述的情况（包括阿里中间件公众号发的一篇文章里也只是这么简单的介绍），但如果只是这么认识的话，会发现在实际的内存回收中有悖于此条规定。</p><p><strong>举个小栗子，如对象年龄5的占34%，年龄6的占36%，年龄7的占30%，按那两个标准，对象是不能进入老年代的，但Survivor都已经100%了啊？</strong></p><p>大家可以关注这个参数<strong>TargetSurvivorRatio</strong>，目标存活率，默认为50%。大致意思就是说年龄从小到大累加，如加入某个年龄段（如栗子中的年龄6）后，总占用超过Survivor空间TargetSurvivorRatio的时候，从该年龄段开始及大于的年龄对象就要进入老年代（即栗子中的年龄6,7对象）。动态对象年龄判断，主要是被TargetSurvivorRatio这个参数来控制。而且算的是年龄从小到大的累加和，而不是某个年龄段对象的大小。</p><h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC 。</p><p>上面说的风险是什么呢？我们知道，新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。</p><p>总结脑图：<br><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110160547.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;周末有小伙伴留言说上周面试时被问到内存分配策略的问题，但回答的不够理想，小伙伴说之前公号里看过这一块的文章的，当时看时很清楚，也知道各个策略是干嘛的，但面试时脑子里清楚，心里很明白，但嘴里就是说不清楚，说出来的就是像云像雾又像风，最后面试官说他应该是不清楚这一块的内容&lt;/p
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="面试" scheme="https://yuanrengu.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】6.创建对象及对象的访问定位</title>
    <link href="https://yuanrengu.com/2020/d386b2ef.html"/>
    <id>https://yuanrengu.com/2020/d386b2ef.html</id>
    <published>2020-01-10T07:39:12.000Z</published>
    <updated>2020-01-27T16:45:16.601Z</updated>
    
    <content type="html"><![CDATA[<p>《JVM从小白学成大佬》系列推出到现在，收到了很多小伙伴的好评，也收到了一些小伙伴的建议，在此表示感谢。</p><p>有几个小伙伴提出了希望出一篇介绍对象的创建及访问，猿人谷向来是没有原则的，小伙们要求啥，咱就尽力满足，毕竟文章就是对自己学习的一个总结及和各位小伙伴交流学习的机会。话不多说，直接开撸！</p><h2 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1 创建对象"></a>1 创建对象</h2><p>在Java程序运行过程中无时无刻都有对象被创建出来，<strong>java中对象可以采用new或反射或clone或反序列化的方法创建</strong>。接下来我们我们介绍在虚拟机中，对象（限于普通Java对象，不包括数组和Class对象等）的创建过程。</p><p>字节码new表示创建对象，虚拟机遇到该指令时，从栈顶取得目标对象在常量池中的索引，接着定位到目标对象的类型。接下来，虚拟机将根据该类的状态，采取相应的内存分配技术，在内存中分配实例空间，并完成实例数据和对象头的初始化。这样，一个对象就在JVM中创建好了。</p><p>实例的创建过程，首先根据从类常量池中获取对象类型信息并验证类是否已被解析过，若确保该类<strong>已被加载和正确解析</strong>，使用<strong>快速分配</strong>（fast allocation）技术为该类分配对象空间；若该类<strong>尚未解析过</strong>，则只能通过<strong>慢速分配</strong>（slow allocation）方式分配实例对象。实例的创建流程如下图所示。</p><p><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110154819.png" alt></p><p>对象创建的基本流程：</p><ol><li>验证类已被解析。</li><li>获取instanceKlass，确保Klass已完全初始化。</li><li>若满足快速分配条件，则进入快速分配流程。</li><li>若不满足快速分配条件，或者快速分配失败，则进入慢速分配流程。</li></ol><h3 id="1-1-快速分配"><a href="#1-1-快速分配" class="headerlink" title="1.1 快速分配"></a>1.1 快速分配</h3><p>如果在实例分配之前已经完成了类型的解析，那么分配操作仅仅是在内存空间中划分可用内存，因此能以较高效率实现内存分配，这就是<strong>快速分配</strong>。</p><p>根据分配空间是来自于线程私有区域还是共享的堆空间，快速分配可以分为两种空间选择策略。HotSpot通过线程局部分配缓存技术(Thread-Local Allocation Buffers,即TLABs)可以在线程私有区域实现空间的分配。</p><blockquote><p>可以通过VM选项UseTLAB来开启或关闭TLAB功能。</p></blockquote><p>根据是否使用TLAB，快速分配方式有两种选择策略：</p><ul><li><strong>选择TLAB</strong>：首先尝试在TLAB中分配，因为TLAB是线程私有区域，故不需要加锁便能够确保线程安全。在分配一个新的对象空间时，将首先尝试在TLAB空间中分配对象空间，若分配空间的请求失败，则再尝试使用加锁机制在Eden区分配对象。</li><li><strong>选择Eden空间</strong>：若失败，则尝试在共享的Eden区进行分配，Eden区是所有线程共享区域，需要保证线程安全，故采用<strong>原子操作</strong>进行分配。若分配失败，则再次尝试该操作，直到分配成功为止。</li></ul><p>实例空间分配成功以后，将对实例进行初始化。待完成对象的空间分配和初始化后，就可以设置栈顶对象引用。当然，<strong>对象的空间分配和初始化操作都是基于从类常量池中获取对象类型并确保该类已被加载和正确解析的前提下进行的</strong>，如果类未被解析，则需要进行慢速分配。</p><h3 id="1-2-慢速分配"><a href="#1-2-慢速分配" class="headerlink" title="1.2 慢速分配"></a>1.2 慢速分配</h3><p>之所以成为慢速分配，<strong>正是因为在分配实例前需要对类进行解析，确保类及依赖类已得到正确的解析和初始化</strong>。慢速分配是调用InterpreterRuntime模块_new()进行的，实现代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 确保要初始化的类不是抽象类型</span><br><span class="line">klass-&gt;check_valid_for_instantiation(true, CHECK);</span><br><span class="line">// 确保类已初始化</span><br><span class="line">klass-&gt;initialize(CHECK);</span><br><span class="line">// 分配实例</span><br><span class="line">oop obj = klass-&gt;allocate_instance(CHECK);</span><br><span class="line">// 在线程栈中设置对象引用</span><br><span class="line">thread-&gt;set_vm_result(obj);</span><br></pre></td></tr></table></figure><h2 id="2-对象的访问定位"><a href="#2-对象的访问定位" class="headerlink" title="2 对象的访问定位"></a>2 对象的访问定位</h2><p>建立对象是为了使用对象，Java程序需要通过栈上的reference数据来操作<strong>堆</strong>上的具体对象。由于reference类型在Java虚拟机规范中只规定了一个指向对象的引用，并没有定义这个引用应该通过何种方式去定位、访问堆中的对象的具体位置，所以对象访问方式也是取决于虚拟机实现而定的。</p><p>目前主流的访问方式有使用<strong>句柄</strong>和<strong>直接指针</strong>两种：</p><ul><li><p>如果使用<strong>句柄</strong>访问的话，那么Java堆中将会划分出一块内存来作为<strong>句柄池</strong>，reference中存储的就是<strong>对象的句柄地址</strong>，而句柄中包含了对象实例数据与类型数据各自的具体地址信息，如下图所示。<br><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110154850.png" alt></p></li><li><p>如果使用<strong>直接指针</strong>访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是<strong>对象地址</strong>。即使用直接指针访问在对象被移动时<strong>reference本身需要被修改</strong>，reference存储的就是对象地址。如下图所示。<br><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110154917.png" alt></p></li></ul><p>这两种对象访问方式各有优势：</p><ul><li>使用句柄来访问的最大好处就是reference中存储的是<strong>稳定的句柄地址</strong>，在对象被移动（垃圾收集时移动对象时非常普遍的行为）时只会改变句柄中的<strong>实例数据指针</strong>，而reference本身不需要修改。</li><li>使用直接指针访问方式的最大好处就是<strong>速度更快，它节省了一次指针定位的时间开销</strong>，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。</li></ul><p>HotSpot就是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《JVM从小白学成大佬》系列推出到现在，收到了很多小伙伴的好评，也收到了一些小伙伴的建议，在此表示感谢。&lt;/p&gt;
&lt;p&gt;有几个小伙伴提出了希望出一篇介绍对象的创建及访问，猿人谷向来是没有原则的，小伙们要求啥，咱就尽力满足，毕竟文章就是对自己学习的一个总结及和各位小伙伴交流学
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="句柄" scheme="https://yuanrengu.com/tags/%E5%8F%A5%E6%9F%84/"/>
    
      <category term="直接指针" scheme="https://yuanrengu.com/tags/%E7%9B%B4%E6%8E%A5%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】5.垃圾收集器及内存分配策略</title>
    <link href="https://yuanrengu.com/2020/9ed477f0.html"/>
    <id>https://yuanrengu.com/2020/9ed477f0.html</id>
    <published>2020-01-10T07:38:45.000Z</published>
    <updated>2020-01-27T16:44:27.487Z</updated>
    
    <content type="html"><![CDATA[<p>前面介绍了垃圾回收算法，接下来我们介绍垃圾收集器和内存分配的策略。有没有一种牛逼的收集器像银弹一样适配所有场景？很明显，不可能有，不然我也没必要单独搞一篇文章来介绍垃圾收集器了。熟悉不同收集器的优缺点，在实际的场景中灵活运用，才是王道。</p><p>在开始介绍垃圾收集器前，我们可以剧透几点：</p><ul><li>根据不同分代的特点，收集器可能不同。有些收集器可以同时用于新生代和老年代，而有些时候，则需要分别为新生代或老年代选用合适的收集器。一般来说，新生代收集器的收集频率较高，应选用性能高效的收集器；而老年代收集器收集次数相对较少，对空间较为敏感，应当避免选择基于复制算法的收集器。</li><li><strong>在垃圾收集执行的时刻，应用程序需要暂停运行</strong>。</li><li>可以串行收集，也可以并行收集。</li><li>如果能做到并发收集（应用程序不必暂停），那绝对是很妙的事情。</li><li>如果收集行为可控，那也是很妙的事情。</li><li><strong>默认收集器</strong>：<ul><li>jdk1.7，1.8 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）</li><li>jdk1.9 默认垃圾收集器G1</li></ul></li></ul><p>希望大家带着下面的问题进行阅读，有目标的阅读，可能收获更多。</p><ol><li>为什么没有一种牛逼的收集器像银弹一样适配所有场景？</li><li>CMS和G1的对比，你知道他两的区别吗？</li><li>为什么CMS只能用作老年代收集器，而不能应用在新生代的收集？</li><li>为什么JVM的分代年龄是15？而不是16,20之类的呢？</li><li>“动态对象年龄判定”里有个“<strong>天坑</strong>”哦，是啥坑呢？</li></ol><h2 id="1-垃圾收集器"><a href="#1-垃圾收集器" class="headerlink" title="1 垃圾收集器"></a>1 垃圾收集器</h2><p>GC线程与应用线程保持相对独立，当系统需要执行垃圾回收任务时，先停止工作线程，然后命令GC线程工作。以串行模式工作的收集器，称为<strong>串行收集器（即Serial Collector）</strong>。与之相对的是以并行模式工作的收集器，称为<strong>并行收集器（即Paraller Collector）</strong>。</p><h3 id="1-1-串行收集器：Serial"><a href="#1-1-串行收集器：Serial" class="headerlink" title="1.1 串行收集器：Serial"></a>1.1 串行收集器：Serial</h3><p>串行收集器采用单线程方式进行收集，且在GC线程工作时，系统不允许应用线程打扰。此时，<strong>应用程序进入暂停状态</strong>，即Stop-the-world。</p><p>Stop-the-world暂停时间的长短，是度量一款收集器性能高低的重要指标。</p><p><strong>是针对新生代的垃圾回收器，基于标记-复制算法</strong>。</p><h3 id="1-2-并行收集器：ParNew"><a href="#1-2-并行收集器：ParNew" class="headerlink" title="1.2 并行收集器：ParNew"></a>1.2 并行收集器：ParNew</h3><p>并行收集器充分利用了多处理器的优势，采用多个GC线程并行收集。可想而知，多条GC线程执行显然比只使用一条GC线程执行的效率更高。一般来说，与串行收集器相比，在多处理器环境下工作的并行收集器能够极大地缩短Stop-the-world时间。</p><p>针对<strong>新生代</strong>的垃圾回收器，<strong>标记-复制算法</strong>，可以看成是Serial的多线程版本</p><h3 id="1-3-吞吐量优先收集器：Parallel-Scavenge"><a href="#1-3-吞吐量优先收集器：Parallel-Scavenge" class="headerlink" title="1.3 吞吐量优先收集器：Parallel Scavenge"></a>1.3 吞吐量优先收集器：Parallel Scavenge</h3><p>针对<strong>新生代</strong>的垃圾回收器，<strong>标记-复制算法</strong>，和ParNew类似，但更注重吞吐率。在ParNew的基础上演化而来的Parallel Scanvenge收集器被誉为“吞吐量优先”收集器。吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即<strong>吞吐量=运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）</strong>。如虚拟机总运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</p><p>Parallel Scanvenge收集器在ParNew的基础上提供了一组参数，用于配置期望的收集时间或吞吐量，然后以此为目标进行收集。</p><p>通过VM选项可以控制吞吐量的大致范围：</p><ul><li>-XX：MaxGCPauseMills：期望收集时间上限。用来控制收集对应用程序停顿的影响。</li><li>-XX：GCTimeRatio：期望的GC时间占总时间的比例，用来控制吞吐量。</li><li>-XX：UseAdaptiveSizePolicy：自动分代大小调节策略。</li></ul><p>但要注意停顿时间与吞吐量这两个目标是相悖的，降低停顿时间的同时也会引起吞吐的降低。因此需要将目标控制在一个合理的范围中。</p><h3 id="1-4-Serial-Old收集器"><a href="#1-4-Serial-Old收集器" class="headerlink" title="1.4 Serial Old收集器"></a>1.4 Serial Old收集器</h3><p>Serial Old是Serial收集器的<strong>老年代</strong>版本，单线程收集器，使用<strong>标记-整理算法</strong>。这个收集器的主要意义也是在于给Client模式下的虚拟机使用。</p><h3 id="1-5-Parallel-Old收集器"><a href="#1-5-Parallel-Old收集器" class="headerlink" title="1.5 Parallel Old收集器"></a>1.5 Parallel Old收集器</h3><p>Parallel Old是Parallel Scanvenge收集器的<strong>老年代</strong>版本，<strong>多线程</strong>收集器，使用<strong>标记-整理算法</strong>。</p><h3 id="1-6-CMS收集器"><a href="#1-6-CMS收集器" class="headerlink" title="1.6 CMS收集器"></a>1.6 CMS收集器</h3><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器</strong>。</p><p>CMS收集器仅作用于<strong>老年代</strong>的收集，是基于<strong>标记-清除算法</strong>的，它的运作过程分为4个步骤：</p><ul><li>初始标记（CMS initial mark）</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）</li><li>并发清除（CMS concurrent sweep）</li></ul><p>其中，初始标记、重新标记这两个步骤仍然需要Stop-the-world。<strong>初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快，并发标记阶段就是进行GC Roots Tracing的过程，而重新标记阶段则是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始阶段稍长一些，但远比并发标记的时间短。</strong></p><blockquote><p>CMS以流水线方式拆分了收集周期，将耗时长的操作单元保持与应用线程并发执行。只将那些必需STW才能执行的操作单元单独拎出来，控制这些单元在恰当的时机运行，并能保证仅需短暂的时间就可以完成。这样，在整个收集周期内，只有<strong>两次短暂的暂停（初始标记和重新标记）</strong>，<strong>达到了近似并发的目的</strong>。</p></blockquote><p>CMS收集器<strong>优点</strong>：并发收集、低停顿。</p><p>CMS收集器<strong>缺点</strong>：</p><ul><li>CMS收集器对CPU资源非常敏感。</li><li>CMS收集器无法处理浮动垃圾（Floating Garbage）。</li><li>CMS收集器是基于标记-清除算法，该算法的缺点都有。</li></ul><p>CMS收集器之所以能够做到并发，根本原因在于<strong>采用基于“标记-清除”的算法并对算法过程进行了细粒度的分解</strong>。前面篇章介绍过标记-清除算法将产生大量的内存碎片这对新生代来说是难以接受的，因此新生代的收集器并未提供CMS版本。</p><h3 id="1-7-G1收集器"><a href="#1-7-G1收集器" class="headerlink" title="1.7 G1收集器"></a>1.7 G1收集器</h3><p>G1重新定义了堆空间，打破了原有的分代模型，将堆划分为一个个区域。这么做的目的是在进行收集时不必在全堆范围内进行，这是它最显著的特点。区域划分的好处就是带来了停顿时间可预测的收集模型：用户可以指定收集操作在多长时间内完成。即G1提供了接近实时的收集特性。</p><p>G1与CMS的特征对比如下：</p><table><thead><tr><th align="center">特征</th><th align="center">G1</th><th align="center">CMS</th></tr></thead><tbody><tr><td align="center">并发和分代</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">最大化释放堆内存</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">低延时</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">吞吐量</td><td align="center">高</td><td align="center">低</td></tr><tr><td align="center">压实</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">可预测性</td><td align="center">强</td><td align="center">弱</td></tr><tr><td align="center">新生代和老年代的物理隔离</td><td align="center">否</td><td align="center">是</td></tr></tbody></table><h4 id="G1具备如下特点："><a href="#G1具备如下特点：" class="headerlink" title="G1具备如下特点："></a>G1具备如下特点：</h4><ul><li><strong>并行与并发</strong>：G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-the-world停顿的时间，部分其他收集器原来需要停顿Java线程执行的GC操作，G1收集器仍然可以通过<strong>并发</strong>的方式让Java程序继续运行。</li><li>分代收集</li><li>空间整合：与CMS的标记-清除算法不同，G1从整体来看是基于<strong>标记-整理算法</strong>实现的收集器，从局部（两个Region之间）上来看是基于“<strong>复制</strong>”算法实现的。但无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，收集后能提供规整的可用内存。<strong>这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC</strong>。</li><li>可预测的停顿：这是G1相对于CMS的一个优势，降低停顿时间是G1和CMS共同的关注点。</li></ul><p>在G1之前的其他收集器进行收集的范围都是整个新生代或者老年代，而G1不再是这样。在堆的结构设计时，G1打破了以往将收集范围固定在新生代或老年代的模式，G1将堆分成许多相同大小的区域单元，每个单元称为Region。Region是一块地址连续的内存空间，G1模块的组成如下图所示：</p><p><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110154339.png" alt="G1堆的Region布局.png"></p><p>G1收集器将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但<strong>新生代和老年代不再是物理隔离的了</strong>，它们都是一部分Region（不需要连续）的集合。<strong>G1收集器之所以能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个Java堆中进行全区域的垃圾收集</strong>。G1会通过一个合理的计算模型，计算出每个Region的收集成本并量化，这样一来，收集器在给定了“停顿”时间限制的情况下，总是能选择一组恰当的Regions作为收集目标，让其收集开销满足这个限制条件，以此达到实时收集的目的。</p><p>对于打算从CMS或者ParallelOld收集器迁移过来的应用，按照<a href="https://www.oracle.com/technetwork/java/javase/tech/g1-intro-jsp-135488.html" target="_blank" rel="noopener">官方</a> 的建议，如果发现符合如下特征，可以考虑更换成G1收集器以追求更佳性能：</p><ul><li>实时数据占用了超过半数的堆空间；</li><li>对象分配率或“晋升”的速度变化明显；</li><li>期望消除耗时较长的GC或停顿（超过0.5——1秒）。</li></ul><blockquote><p>原文如下：<br>Applications running today with either the CMS or the ParallelOld garbage collector would benefit switching to G1 if the application has one or more of the following traits.</p><ul><li>More than 50% of the Java heap is occupied with live data.</li><li>The rate of object allocation rate or promotion varies significantly.</li><li>Undesired long garbage collection or compaction pauses (longer than 0.5 to 1 second)</li></ul></blockquote><h4 id="G1收集的运作过程大致如下："><a href="#G1收集的运作过程大致如下：" class="headerlink" title="G1收集的运作过程大致如下："></a>G1收集的运作过程大致如下：</h4><ul><li><strong>初始标记（Initial Marking）</strong>：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，<strong>这阶段需要停顿线程，但耗时很短</strong>。</li><li><strong>并发标记（Concurrent Marking）</strong>：是从GC Roots开始堆中对象进行可达性分析，找出存活的对象，<strong>这阶段耗时较长</strong>，但可与用户程序并发执行。</li><li><strong>最终标记（Final Marking）</strong>：是为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，<strong>这阶段需要停顿线程，但是可并行执行</strong>。</li><li><strong>筛选回收（Live Data Counting and Evacuation）</strong>：首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划。这个阶段也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</li></ul><p>我们可以看下官方文档对G1的展望（这段英文描述比较简单，我就不翻译了）：</p><blockquote><p>Future:<br>G1 is planned as the long term replacement for the Concurrent Mark-Sweep Collector (CMS). Comparing G1 with CMS, there are differences that make G1 a better solution. One difference is that G1 is a compacting collector. G1 compacts sufficiently to completely avoid the use of fine-grained free lists for allocation, and instead relies on regions. This considerably simplifies parts of the collector, and mostly eliminates potential fragmentation issues. Also, G1 offers more predictable garbage collection pauses than the CMS collector, and allows users to specify desired pause targets.</p></blockquote><h2 id="2-内存分配策略"><a href="#2-内存分配策略" class="headerlink" title="2 内存分配策略"></a>2 内存分配策略</h2><p>对象的内存分配，往大方向上讲，就是在<strong>堆</strong>上分配（但也可能经过JIT编译后被拆散为标量类型并间接地<strong>栈上分配</strong>），<strong>对象主要分配在新生代的Eden区上</strong>，如果启动了本地线程分配缓冲，将按线程优先在TLAB上分配。少数情况下可能会直接分配在老年代中。</p><h3 id="2-1-对象优先在Eden分配"><a href="#2-1-对象优先在Eden分配" class="headerlink" title="2.1 对象优先在Eden分配"></a>2.1 对象优先在Eden分配</h3><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC（前面篇章中有介绍过Minor GC）。但也有一种情况，在<strong>内存担保机制</strong>下，无法安置的对象会直接进到老年代。</p><h3 id="2-2-大对象直接进入老年代"><a href="#2-2-大对象直接进入老年代" class="headerlink" title="2.2 大对象直接进入老年代"></a>2.2 大对象直接进入老年代</h3><p>大对象时指需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。</p><p><strong>虚拟机提供了一个-XX：PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配</strong>。目的就是避免在Eden区及两个Survivor区之间发生大量的内存复制。</p><h3 id="2-3-长期存活的对象将进入老年代"><a href="#2-3-长期存活的对象将进入老年代" class="headerlink" title="2.3 长期存活的对象将进入老年代"></a>2.3 长期存活的对象将进入老年代</h3><p>虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1 。对象在Survivor区中没经过一次Minor GC，年龄就加1岁，当年龄达到15岁（默认值），就会被晋升到老年代中。</p><blockquote><p>对象晋升老年代的年龄阈值，可以通过参数-XX：<strong>MaxTenuringThreshold</strong>设置。</p></blockquote><h3 id="接下来我们来回答为什么JVM的分代年龄为什么是15？而不是16-20之类的呢？"><a href="#接下来我们来回答为什么JVM的分代年龄为什么是15？而不是16-20之类的呢？" class="headerlink" title="接下来我们来回答为什么JVM的分代年龄为什么是15？而不是16,20之类的呢？"></a>接下来我们来回答为什么JVM的分代年龄为什么是15？而不是16,20之类的呢？</h3><p>真的不是为什么不能是其它数（除了15），着实是臣妾做不到啊！</p><p>事情是这样的，HotSpot虚拟机的对象头其中一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“<strong>Mark word</strong>”。</p><p>例如，在32位的HotSpot虚拟机中，如果对象处于未被锁定的状态下，那么Mark Word的32bit空间中25bit用于存储对象哈希码，<strong>4bit用于存储对象分代年龄</strong>，2bit用于存储锁标志位，1bit固定为0 。</p><p>明白是什么原因了吗？<strong>对象的分代年龄占4位，也就是0000，最大值为1111也就是最大为15，而不可能为16，20之类的了。</strong></p><h3 id="2-4-动态对象年龄判定"><a href="#2-4-动态对象年龄判定" class="headerlink" title="2.4 动态对象年龄判定"></a>2.4 动态对象年龄判定</h3><p>为了能更好的适应不同程序的内存状况，虚拟机并不是永远地要求兑现过的年龄必须达到了MaxTenuringThreshold才能晋升老年代。</p><p>满足如下条件之一，对象能晋升老年代：</p><ul><li>1.对象的年龄达到了MaxTenuringThreshold（默认15）能晋升老年代。</li><li>2.如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</li></ul><p>很多文章都只是注意到了上面描述的情况（包括阿里中间件公众号发的一篇文章里也只是这么简单的介绍，当时给它们后台留过言说明情况），但如果只是这么认识的话，会发现在实际的内存回收中有悖于此条规定。</p><p>举个小栗子，如对象年龄5的占30%，年龄6的占36%，年龄7的占34%，按那两个标准，对象是不能进入老年代的，<strong>但Survivor都已经100%了啊</strong>？</p><p>大家可以关注这个参数<strong>TargetSurvivorRatio，目标存活率，默认为50%</strong>。大致意思就是说年龄从小到大累加，如加入某个年龄段（如栗子中的年龄6）后，总占用超过<strong>Survivor空间*TargetSurvivorRatio</strong>的时候，从该年龄段开始及大于的年龄对象就要进入老年代（即栗子中的年龄6对象，就是年龄6和年龄7晋升到老年代）。<strong>动态对象年龄判断，主要是被TargetSurvivorRatio这个参数来控制。而且算的是年龄从小到大的累加和，而不是某个年龄段对象的大小。</strong></p><h3 id="2-5-空间分配担保"><a href="#2-5-空间分配担保" class="headerlink" title="2.5 空间分配担保"></a>2.5 空间分配担保</h3><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有<strong>风险</strong>的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次<strong>Full GC</strong> 。</p><p>上面说的风险是什么呢？我们知道，新生代使用复制收集算法，但为了内存利用率，只使用其中一个Survivor空间来作为轮换备份，因此当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代。</p><h2 id="3-总结脑图"><a href="#3-总结脑图" class="headerlink" title="3 总结脑图"></a>3 总结脑图</h2><p><img src="https://image-static.segmentfault.com/210/199/2101995172-5d67311d24dfb_articlex" alt="内存分配策略.png"></p><blockquote><p>脑图太大，如需高清完整大图，请留言告知。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面介绍了垃圾回收算法，接下来我们介绍垃圾收集器和内存分配的策略。有没有一种牛逼的收集器像银弹一样适配所有场景？很明显，不可能有，不然我也没必要单独搞一篇文章来介绍垃圾收集器了。熟悉不同收集器的优缺点，在实际的场景中灵活运用，才是王道。&lt;/p&gt;
&lt;p&gt;在开始介绍垃圾收集器前
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="垃圾收集器" scheme="https://yuanrengu.com/tags/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】4.Java虚拟机何谓垃圾及垃圾回收算法</title>
    <link href="https://yuanrengu.com/2020/a959fab8.html"/>
    <id>https://yuanrengu.com/2020/a959fab8.html</id>
    <published>2020-01-10T07:38:17.000Z</published>
    <updated>2020-02-02T11:23:57.012Z</updated>
    
    <content type="html"><![CDATA[<p>在Java中内存是由虚拟机自动管理的，虚拟机在内存中划出一片区域，作为满足程序内存分配请求的空间。内存的创建仍然是由程序猿来显示指定的，但是对象的释放却对程序猿是透明的。就是解放了程序猿手动回收内存的工作，交给垃圾回收器来自动回收。</p><p>在虚拟机中，释放哪些不再被使用的对象所占空间的过程称为<strong>垃圾收集（Garbage Collection，GC）</strong>。负责垃圾收集的程序模块，成为<strong>垃圾收集器（Garbage Collector）</strong>。</p><p><strong>既然虚拟机已经帮我们把垃圾自动处理了，为什么还要去了解GC和内存分配呢？</strong></p><blockquote><p>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就需要对虚拟机的自动管理技术实施必要的监控和调节了。<strong>这也是JVM调优，故障排查，重点需要掌握的知识了。</strong></p></blockquote><p>本篇我们的重点是介绍何谓垃圾及垃圾回收算法，那我们就要弄清到底什么是垃圾？能不能设计一种强大的垃圾回收算法来解决垃圾回收的所有问题？肯定是没有的，后面介绍的每一种垃圾回收算法都有它得天独厚的优点，也有它避之不及的缺点。针对具体的场景，灵活运用方是上策。</p><p>希望大家能带着如下问题进行学习，会收获更大。</p><ol><li>什么是垃圾？</li><li>如何回收垃圾？</li><li>有没有一种垃圾回收算法能像银弹一样解决所有垃圾所有？</li><li>GC的分类是什么样的？（Minor GC、Major GC、Full GC）</li><li>Stop-the-world是什么？</li><li>如何避免全堆扫描？</li></ol><p><img src="https://image-static.segmentfault.com/404/754/4047541049-5d633d949ef4d_articlex" alt="垃圾收集算法.png"></p><h2 id="1-垃圾回收"><a href="#1-垃圾回收" class="headerlink" title="1 垃圾回收"></a>1 垃圾回收</h2><p>在堆里面存放着Java世界中几乎所有的对象实例，垃圾收集器在堆进行回收前，第一件事就是要确定这些对象之中哪些还“存活”着，哪些已经“死亡”（即不可能再被任何途径使用的对象）。垃圾回收，其实就是将已经分配出去的，但不再使用的内存回收，以便能够再次分配。在Java虚拟机的规范中，<strong>垃圾指的就是死亡的对象所占据的堆空间</strong>。</p><p>那怎么确定一个对象是存活还是死亡呢</p><h3 id="1-1-引用计数算法"><a href="#1-1-引用计数算法" class="headerlink" title="1.1 引用计数算法"></a>1.1 引用计数算法</h3><p>给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。<strong>也就是说，需要截获所有的引用更新操作，并且相应地增减目标对象的计数器</strong>。</p><p><strong>题外话</strong>：记得研一那段时间对iOS开发感兴趣，找个公司去实习，现学现搞iOS开发，当时是做了一个模拟炒股的app。用的就是Objective-C，这门语言起初管理内存的方式就是用的这种引用计数算法，不过后面也有了自动管理内存。接触的对象多了，发现很多东西在本质的原理有非常多的相似之处。</p><h4 id="引用计数算法缺点："><a href="#引用计数算法缺点：" class="headerlink" title="引用计数算法缺点："></a>引用计数算法缺点：</h4><ul><li>需要额外的空间来存储计数器，以及繁琐的更新操作。</li><li><strong>无法处理循环引用对象</strong>。</li></ul><p>其中无法处理循环引用对象，算是引用计数法的一个重大漏洞。</p><h3 id="1-2-可达性分析算法"><a href="#1-2-可达性分析算法" class="headerlink" title="1.2 可达性分析算法"></a>1.2 可达性分析算法</h3><p>可达性是指，如果一个对象会被至少一个在程序中的变量通过直接或间接的方式被其他可达的对象引用，则称该对象是可达的（reachable）。更准确的说，一个对象只有满足下述两个条件之一，就会被判断为可达的：</p><ul><li>本身是根对象。根（Root）是指由堆以外空间访问的对象。JVM中会将一组对象标记为根，包括全局变量、部分系统类，以及栈中引用的对象，如当前栈帧中的局部变量和参数。</li><li>被一个可达的对象引用。</li></ul><p>这个算法的<strong>基本思路</strong>就是通过一系列的成为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（即从GC Roots到这个对象不可达），则证明此对象是不可用的。</p><p><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110153500.png" alt="可达性分析算法.jpeg"></p><p><strong>GC Roots又是什么呢？可以暂时理解为由堆外指向堆内的引用。</strong></p><p>在Java语言中，可以作为<strong>GC Roots的对象</strong>包括下面几种：</p><ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类静态属性引用的对象。</li><li>方法区中常量引用的对象。</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li><li>已启动且未停止的Java线程。</li></ul><p>可达性分析算法可以解决引用计数算法不能解决的循环引用问题。举个例子，即便对象a和b相互引用，只要从GC Roots出发无法到达a或者b，那么可达性分析便不会将它们加入存活对象合集之中。</p><blockquote><p>关于Java中的引用的定义及分类（强引用、软引用、弱引用、虚引用）会在单独出一篇进行详细介绍，Java引用的内容虽然有点冷门，但是很多公司面试的常考点。</p></blockquote><p>可达性分析算法本身虽然很简明，但是在实践中还是有不少其他问题需要解决的。比如，在多线程环境下，其他线程可能会更新已经访问过的对象中的引用，从而造成<strong>误报</strong>（将引用设置为null）或者<strong>漏报</strong>（将引用设置为未被访问过的对象）。误杀还可以接受，Java虚拟机至多损失了部分垃圾回收的机会。<strong>漏报就问题大了，因为垃圾回收器可能回收事实上仍被引用的对象内存。一旦从原引用访问已经被回收了的对象，则很有可能会直接导致Java虚拟机奔溃。</strong></p><h2 id="2-垃圾回收算法"><a href="#2-垃圾回收算法" class="headerlink" title="2 垃圾回收算法"></a>2 垃圾回收算法</h2><p>上面我们介绍什么是Java中的垃圾，接下来我们就开始介绍如何高效的回收这些垃圾。</p><h3 id="2-1-标记-清除算法"><a href="#2-1-标记-清除算法" class="headerlink" title="2.1 标记-清除算法"></a>2.1 标记-清除算法</h3><p>标记-清除（Mark-Sweep）算法可以分为两个阶段：</p><ul><li>标记阶段：标记出所有可以回收的对象。</li><li>清除阶段：回收所有已被标记的对象，释放这部分空间。</li></ul><p>该算法存在如下不足：</p><ol><li><strong>内存碎片</strong>。由于Java虚拟机的堆中对象必须是连续分布的，因此可能出现总空闲内存足够，但是无法分配的极端情况。无法找到足够的连续内存，而不得不提前触发一次垃圾收集动作。</li><li><strong>分配效率较低</strong>。如果是一块连续的内存空间，那么我们可以通过指针加法（pointer bumping）来做分配。而对于空闲列表，Java虚拟机则需要逐个访问列表中的项，来查询能够放入新建对象的空闲内存。</li></ol><p>标记-清除算法的示意图如下：<br><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110153553.png" alt="标记清除算法.png"></p><h3 id="2-2-复制算法"><a href="#2-2-复制算法" class="headerlink" title="2.2 复制算法"></a>2.2 复制算法</h3><p>复制算法的过程如下：</p><ul><li>划分区域：将内存区域按比例划分为1个Eden区作为分配对象的“主战场”和2个幸存区（即Survivor空间，划分为2个等比例的from区和to区）。</li><li>复制：收集时，打扫“战场”，将Eden区中仍存活的对象复制到某一块幸存区中。</li><li>清除：由于上一阶段已确保仍存活的对象已被妥善安置，现在可以“清理战场”了，释放Eden区和另一块幸存区。</li><li>晋升：如在“复制”阶段，一块幸存区接纳不了所有的“幸存”对象。则直接晋升到老年代。</li></ul><p><img src="https://image-static.segmentfault.com/110/658/1106581261-5d633d9a994ac_articlex" alt="复制算法.png"></p><p><strong>该算法解决了内存碎片化问题，但堆空间的使用效率极其低下</strong>。在对象存活率较高时，需要进行较多的复制操作，效率会变得很低。</p><h3 id="2-3-标记-整理算法"><a href="#2-3-标记-整理算法" class="headerlink" title="2.3 标记-整理算法"></a>2.3 标记-整理算法</h3><p>该算法分为两个阶段：</p><ul><li>标记阶段：标记出所有可以回收的对象。</li><li>压缩阶段：将标记阶段的对象移动到空间的一端，释放剩余的空间。</li></ul><p>该算法的标记过程与标记-清除算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p>解决了内存碎片的问题，也规避了复制算法只能利用一半内存区域的弊端。看起来很美好，但它对内存变动更频繁，需要整理所有存活对象的引用地址，在效率上比复制算法要差很多。</p><p>标记-整理算法的示意图如下：<br><img src="https://image-static.segmentfault.com/210/838/2108386277-5d633d9c0be08_articlex" alt="标记-整理算法.png"></p><h3 id="2-4-分代收集算法"><a href="#2-4-分代收集算法" class="headerlink" title="2.4 分代收集算法"></a>2.4 分代收集算法</h3><p>分代收集算法倒并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。<br><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200110153711.png" alt="JVM堆分代.png"></p><p>在<strong>新生代</strong>中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用<strong>复制算法</strong>，只需要付出少量存活对象的复制成本就可以完成收集。而<strong>老年代</strong>中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用<strong>标记-清理算法或标记-整理算法</strong>来进行回收。</p><h2 id="3-HotSpot算法实现"><a href="#3-HotSpot算法实现" class="headerlink" title="3 HotSpot算法实现"></a>3 HotSpot算法实现</h2><h3 id="3-1-枚举根节点"><a href="#3-1-枚举根节点" class="headerlink" title="3.1 枚举根节点"></a>3.1 枚举根节点</h3><p>以可达性分析中从GC Roots节点找引用链这个操作为例，可作为GC Roots的节点主要在全局性的引用（例如常量或类静态属性）与执行上下文（例如栈帧中的本地变量表）中。上面介绍可达性分析算法时有详细介绍GC Roots，可以参看上面。</p><h3 id="3-2-安全点（Safepoint）"><a href="#3-2-安全点（Safepoint）" class="headerlink" title="3.2 安全点（Safepoint）"></a>3.2 安全点（Safepoint）</h3><p><strong>安全点，即程序执行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停</strong>。Safepoint的选定既不能太少以至于让GC等待时间太长，也不能过于频繁以致于过分增大运行时的负荷。</p><p>安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态。在这个执行状态下，Java虚拟机的堆栈不会发生变化。这么一来，垃圾回收器便能够“安全”地执行可达性分析。只要不离开这个安全点，Java虚拟机便能够在垃圾回收的同时，继续运行这段本地代码。</p><p>程序运行时并非在所有地方都能停顿下来开始GC，只有在到达安全点时才能暂停。安全点的选定基本上是以程序“是否具有让程序长时间执行的特征”为标准进行选定的。“<strong>长时间执行</strong>”的最明显特征就是指令序列复用，例如方法调用、循环跳转、异常跳转等，所以具有这些功能的指令才会产生Safepoint。</p><p>对于安全点，另一个需要考虑的问题就是如何在GC发生时让所有线程（这里不包括执行JNI调用的线程）都“跑”到最近的安全点上再停顿下来。</p><p>两种解决方案：</p><ul><li><p>抢先式中断（Preemptive Suspension）</p><p>抢先式中断不需要线程的执行代码主动去配合，在GC发生时，首先把所有线程全部中断，如果发现有线程中断的地方不在安全点上，就恢复线程，让它“跑”到安全点上。现在几乎没有虚拟机采用这种方式来暂停线程从而响应GC事件。</p></li><li><p>主动式中断（Voluntary Suspension）</p><p>主动式中断的思想是当GC需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真时就自己中断挂起。轮询标志地地方和安全点是重合的，另外再加上创建对象需要分配内存的地方。</p></li></ul><h3 id="3-3-安全区域"><a href="#3-3-安全区域" class="headerlink" title="3.3 安全区域"></a>3.3 安全区域</h3><p>指在一段代码片段中，引用关系不会发生变化。在这个区域中任意地方开始GC都是安全的。也可以把Safe Region看作是被扩展了的Safepoint。</p><h2 id="4-扩展知识"><a href="#4-扩展知识" class="headerlink" title="4 扩展知识"></a>4 扩展知识</h2><h3 id="4-1-GC分类"><a href="#4-1-GC分类" class="headerlink" title="4.1 GC分类"></a>4.1 GC分类</h3><p><strong>Minor GC：</strong></p><ul><li>针对新生代。</li><li>指发生在新生代的垃圾收集动作，因为java对象大多都具备朝生夕死的特性，所以<strong>Minor GC非常频繁</strong>，一般回收速度也比较快。</li><li>触发条件：Eden空间满时。</li></ul><p><strong>Major GC：</strong></p><ul><li>针对老年代。</li><li>指发生在老年代的GC，出现了Major GC，<strong>经常会伴随至少一次的Minor GC</strong>（但非绝对的，在Parallel Scavenge 收集器的收集策略里就有直接进行Major GC的策略选择过程）。Major GC的速度一般会比Minor GC慢10倍以上。</li><li>触发条件：Minor GC 会将对象移到老年代中，如果此时老年代空间不够，那么触发 Major GC。</li></ul><p><strong>Full GC：</strong></p><ul><li>清理整个堆空间。一定意义上Full GC 可以说是 Minor GC 和 Major GC 的结合。</li><li>触发条件：调用System.gc()；老年代空间不足；空间分配担保失败。</li></ul><h3 id="4-2-Stop-the-world"><a href="#4-2-Stop-the-world" class="headerlink" title="4.2 Stop-the-world"></a>4.2 Stop-the-world</h3><p>GC进行时必须停顿所有Java<strong>执行线程</strong>，这就是<strong>Stop-the-world</strong>。</p><p>可达性分析时必须在一个能确保一致性的快照中进行，这里“一致性”的意思是指在整个分析期间整个执行系统看起来就像被冻结在某个时间点上，不可以出现分析过程中对象引用关系还在不断变化的情况，这一点不满足的话分析结果准确性就无法得到保证。</p><p>Stop-the-world是通过安全点机制来实现的。当Java虚拟机接收到Stop-the-world请求，它便会等待所有的线程都到达安全点，才允许请求Stop-the-world的线程进行独占的工作。</p><h3 id="4-3-卡表"><a href="#4-3-卡表" class="headerlink" title="4.3 卡表"></a>4.3 卡表</h3><p>有个场景，老年代的对象可能引用新生代的对象，那标记存活对象的时候，需要扫描老年代中的所有对象。因为该对象拥有对新生代对象的引用，那么这个引用也会被称为GC Roots。那不是得又做全堆扫描？成本太高了吧。</p><p>HotSpot给出的解决方案是一项叫做<strong>卡表</strong>（Card Table）的技术。该技术将整个堆划分为一个个大小为512字节的卡，并且维护一个卡表，用来存储每张卡的一个标识位。这个标识位代表对应的卡是否可能存有指向新生代对象的引用。如果可能存在，那么我们就认为这张卡是脏的。</p><p>在进行Minor GC的时候，我们便可以不用扫描整个老年代，而是在卡表中寻找脏卡，并将脏卡中的对象加入到Minor GC的GC Roots里。当完成所有脏卡的扫描之后，Java虚拟机便会将所有脏卡的标识位清零。</p><p>想要保证每个可能有指向新生代对象引用的卡都被标记为脏卡，那么Java虚拟机需要截获每个引用型实例变量的写操作，并作出对应的写标识位操作。</p><p><strong>卡表能用于减少老年代的全堆空间扫描，这能很大的提升GC效率</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Java中内存是由虚拟机自动管理的，虚拟机在内存中划出一片区域，作为满足程序内存分配请求的空间。内存的创建仍然是由程序猿来显示指定的，但是对象的释放却对程序猿是透明的。就是解放了程序猿手动回收内存的工作，交给垃圾回收器来自动回收。&lt;/p&gt;
&lt;p&gt;在虚拟机中，释放哪些不再被
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="GC" scheme="https://yuanrengu.com/tags/GC/"/>
    
      <category term="垃圾回收" scheme="https://yuanrengu.com/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】3.深入解析强引用、软引用、弱引用、幻象引用</title>
    <link href="https://yuanrengu.com/2020/22810993.html"/>
    <id>https://yuanrengu.com/2020/22810993.html</id>
    <published>2020-01-10T01:37:43.000Z</published>
    <updated>2020-01-27T16:43:18.464Z</updated>
    
    <content type="html"><![CDATA[<p>关于强引用、软引用、弱引用、幻象引用的区别，在很多公司的面试题中经常出现，可能有些小伙伴觉得这个知识点比较冷门，其实大家在开发中经常用到，如new一个对象的时候就是强引用的应用。</p><p>在java语言中，除了原始数据类型（boolean、byte、short、char、int、float、double、long）的变量，其他所有都是所谓的引用类型，指向各种不同的对象。理解这些引用的区别，对于掌握java对象生命周期和JVM内部相关机制非常有帮助。也有助于更深刻的理解底层对象生命周期、垃圾收集机制等，对设计可靠的缓存框架、诊断应用OOM等问题也大有裨益。</p><p>这四种应用主要的区别体现在对象不同的可达性状态和对垃圾收集的影响，他们之间的可达性状态可以参看下图：</p><p><img src="https://i.loli.net/2019/08/22/wLfYe8QZvqnJzXD.png" alt="111111.png"></p><h2 id="1-强引用（strong-reference）"><a href="#1-强引用（strong-reference）" class="headerlink" title="1.强引用（strong reference）"></a>1.强引用（strong reference）</h2><p>强引用就是我们最常见的普通对象引用（如new 一个对象），只要还有强引用指向一个对象，就表明此对象还“活着”。在强引用面前，即使JVM内存空间不足，JVM宁愿抛出OutOfMemoryError运行时错误（OOM），让程序异常终止，也不会靠回收强引用对象来解决内存不足的问题。对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为null，就意味着此对象可以被垃圾收集了。但要注意的是，并不是赋值为null后就立马被垃圾回收，具体的回收时机还是要看垃圾收集策略的。</p><p>如Object obj = new Object();</p><h2 id="2-软引用（soft-reference）"><a href="#2-软引用（soft-reference）" class="headerlink" title="2.软引用（soft reference）"></a>2.软引用（soft reference）</h2><p>软引用相对强引用要弱化一些，<strong>可以让对象豁免一些垃圾收集。当内存空间足够的时候，垃圾回收器不会回收它。</strong>只有当JVM认定内存空间不足时才会去回收软引用指向的对象。JVM会确保在抛出OOM前清理软引用指向的对象，而且JVM是很聪明的，会尽可能优先回收长时间闲置不用的软引用指向的对象，对那些刚构建的或刚使用过的软引用指向的对象尽可能的保留。基于软引用的这些特性，<strong>软引用可以用来实现很多内存敏感点的缓存场景</strong>，即如果内存还有空闲，可以暂时缓存一些业务场景所需的数据，当内存不足时就可以清理掉，等后面再需要时，可以重新获取并再次缓存。这样就确保在使用缓存提升性能的同时，不会导致耗尽内存。</p><p>软引用通常可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//有时候会返回null</span></span><br><span class="line">sf.get();</span><br></pre></td></tr></table></figure><p>通过上面的代码可以看出sf是对obj的一个软引用，当sf对象还没有被销毁前，sf.get()可以获取到这个对象，如果已被销毁，则返回null。</p><p>正确使用软引用的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SoftReference&lt;List&lt;Foo&gt;&gt; ref = <span class="keyword">new</span> SoftReference&lt;List&lt;Foo&gt;&gt;(<span class="keyword">new</span> LinkedList&lt;Foo&gt;());</span><br><span class="line"> </span><br><span class="line"><span class="comment">// somewhere else in your code, you create a Foo that you want to add to the list</span></span><br><span class="line">List&lt;Foo&gt; list = ref.get();</span><br><span class="line"><span class="keyword">if</span> (list != <span class="keyword">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    list.add(foo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// list is gone; do whatever is appropriate</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用软引用的时候必须检查引用是否为null。因为垃圾收集器可能在任意时刻回收软引用，如果不做是否null的判断，可能会出现NullPointerException的异常。</p><p>总的来说，软引用是用来描述一些还有用但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行<strong>第二次回收</strong>。如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p><h2 id="3-弱引用（weak-reference）"><a href="#3-弱引用（weak-reference）" class="headerlink" title="3.弱引用（weak reference）"></a>3.弱引用（weak reference）</h2><p><strong>弱引用指向的对象是一种十分临近finalize状态的情况</strong>，当弱引用被清除的时候，就符合finalize的条件了。弱引用与软引用最大的区别就是弱引用比软引用的生命周期更短暂。垃圾回收器会扫描它所管辖的内存区域的过程中，只要发现弱引用的对象，不管内存空间是否有空闲，都会立刻回收它。如同前面我说过的，具体的回收时机还是要看垃圾回收策略的，因此那些弱引用的对象并不是说只要达到弱引用状态就会立马被回收。</p><p>基于弱引用的这些特性，弱引用同样可以应用在很多需要缓存的场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//有时候会返回null</span></span><br><span class="line">wf.get();</span><br><span class="line"><span class="comment">//返回是否被垃圾回收器标记为即将回收的垃圾</span></span><br><span class="line">wf.isEnQueued();</span><br></pre></td></tr></table></figure><h2 id="4-幻象引用（phantom-reference）"><a href="#4-幻象引用（phantom-reference）" class="headerlink" title="4.幻象引用（phantom reference）"></a>4.幻象引用（phantom reference）</h2><p><strong>幻象引用，也有被说成是虚引用或幽灵引用</strong>。幻象引用并不会决定对象的生命周期。即如果一个对象仅持有虚引用，就相当于没有任何引用一样，在任何时候都可能被垃圾回收器回收。不能通过它访问对象，幻象引用仅仅是提供了一种确保对象被finalize以后，做某些事情的机制（如做所谓的Post-Mortem清理机制），也有人利用幻象引用监控对象的创建和销毁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//永远返回null</span></span><br><span class="line">pf.get();</span><br><span class="line"><span class="comment">//返回是否从内存中已经删除</span></span><br><span class="line">pf.isEnQueued();</span><br></pre></td></tr></table></figure><p>　　</p><p>幻象引用的get方法永远返回null，主要用于检查对象是否已经从内存中删除。</p><h2 id="5-生存还是死亡"><a href="#5-生存还是死亡" class="headerlink" title="5.生存还是死亡"></a>5.生存还是死亡</h2><p>通过上面对四种引用类型的分析，你可能发现有些对象即使不可达，但也并非是“非死不可”的，这个时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历<strong>两次标记过程</strong>：<strong>如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法</strong>。当对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p><p>如果这个对象被判定为有必要执行finalize()方法，那么这个对象将会放置在一个叫做F-Queue的队列之中，并在稍后被一个由虚拟机自动建立的、低优先级的Finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是，如果一个对象在finalize()方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能会导致F-Queue队列中其他对象永久处于等待，甚至导致整个内存回收系统奔溃。finalize()方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize()中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可。譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的被回收了。</p><p>任何一个对象的finalize()方法都只会被系统自动调用一次，如果对象面临下一次回收，它的finalize()方法不会被再次执行。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p><strong>对象的可达性是JVM垃圾收集器决定如何处理对象的一个重要考虑指标</strong>。</p><p>所有引用类型都是抽象类java.lang.ref.Reference的子类，子类里提供了get()方法。通过上面的分析中可以得知，<strong>除了幻象引用（因为get永远返回null），如果对象还没有被销毁，都可以通过get方法获取原有对象。</strong>其实有个非常关键的注意点，利用软引用和弱引用，我们可以将访问到的对象，重新指向强引用，也就是人为的改变了对象的可达性状态。所以对于软引用、弱引用之类，垃圾收集器可能会存在<strong>二次确认</strong>的问题，以确保处于弱引用状态的对象没有改变为强引用。</p><p>但是有个问题，如果我们错误的保持了强引用（比如，赋值给了static变量），那么对象可能就没有机会变回类似弱引用的可达性状态了，就会产生内存泄露。所以，检查弱引用指向对象是否被垃圾收集，也是诊断是否有特定内存泄露的一个思路，我们的框架使用到弱引用又怀疑有内存泄露，就可以从这个角度检查。</p><p>对于软引用、弱引用、幻象引用可以配合引用队列（ReferenceQueue）来使用，特别是幻象引用，get方法只返回null，如果再不指定引用队列，基本就没有任何意义了。</p><p>上面分析了四种引用类型的使用，熟悉这几种应用类型对深入理解JVM也大有裨益。</p><p><strong>热门阅读：</strong><br><a href="https://segmentfault.com/a/1190000020099495" target="_blank" rel="noopener">【JVM从小白学成大佬】1.开篇</a><br><a href="https://segmentfault.com/a/1190000020105058" target="_blank" rel="noopener">【JVM从小白学成大佬】2.Java虚拟机运行时数据区</a></p><p><strong>参考</strong>：</p><p>《深入理解Java虚拟机》</p><p><a href="http://www.kdgregory.com/index.php?page=java.refobj" target="_blank" rel="noopener">http://www.kdgregory.com/index.php?page=java.refobj</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于强引用、软引用、弱引用、幻象引用的区别，在很多公司的面试题中经常出现，可能有些小伙伴觉得这个知识点比较冷门，其实大家在开发中经常用到，如new一个对象的时候就是强引用的应用。&lt;/p&gt;
&lt;p&gt;在java语言中，除了原始数据类型（boolean、byte、short、cha
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="强引用" scheme="https://yuanrengu.com/tags/%E5%BC%BA%E5%BC%95%E7%94%A8/"/>
    
      <category term="软引用" scheme="https://yuanrengu.com/tags/%E8%BD%AF%E5%BC%95%E7%94%A8/"/>
    
      <category term="弱引用" scheme="https://yuanrengu.com/tags/%E5%BC%B1%E5%BC%95%E7%94%A8/"/>
    
      <category term="虚引用" scheme="https://yuanrengu.com/tags/%E8%99%9A%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java中List求并集、交集、差集、无重复并集</title>
    <link href="https://yuanrengu.com/2020/fb3dc37a.html"/>
    <id>https://yuanrengu.com/2020/fb3dc37a.html</id>
    <published>2020-01-09T09:45:55.000Z</published>
    <updated>2020-01-13T06:42:16.348Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的开发过程中，某些特定场合，可能会遇到处理list求并集、交集、差集、无重复并集的问题。在实际的项目开发中，非常容易在这些小细节上出错，特此总结如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list1.add(<span class="string">"11111111111"</span>);</span><br><span class="line">list1.add(<span class="string">"22222222222"</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list2.add(<span class="string">"22222222222"</span>);</span><br><span class="line">list2.add(<span class="string">"33333333333"</span>);</span><br><span class="line">list2.add(<span class="string">"44444444444"</span>);</span><br><span class="line"></span><br><span class="line">list2.addAll(list1); <span class="comment">//并集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//list2.removeAll(list1); //差集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//list2.retainAll(list1); //交集</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无重复并集（即先求差集，再做并集）</span></span><br><span class="line"><span class="comment">//list2.removeAll(list1);</span></span><br><span class="line"><span class="comment">//list1.addAll(list2);</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">System.out.println(list2.size());</span><br><span class="line">System.out.println(list2.toString());</span><br><span class="line">System.out.println(<span class="string">"--------------------------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意如下求交集的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list2.retainAll(list1)</span><br></pre></td></tr></table></figure><p>这里list2的结果会变为list1和list2的交集，而list1是不改变的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际的开发过程中，某些特定场合，可能会遇到处理list求并集、交集、差集、无重复并集的问题。在实际的项目开发中，非常容易在这些小细节上出错，特此总结如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="java" scheme="https://yuanrengu.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>程序猿菜鸟打怪升级—一路火花带闪电</title>
    <link href="https://yuanrengu.com/2020/abb6453a.html"/>
    <id>https://yuanrengu.com/2020/abb6453a.html</id>
    <published>2020-01-09T09:37:41.000Z</published>
    <updated>2020-01-13T06:42:16.354Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此篇文章为segmentfault中秋约稿时写的。</p></blockquote><p>各位小伙伴，大家好！我是猿人谷，一名搬砖老菜鸟。蓦然回首这几年的打怪升级历程，不再是之前的年轻气盛，也没有百感交集，内心却像湖面躺着那株莲花一般，平静，荡不起半点涟漪。</p><p>总结从事搬砖行业的这几年，感觉就是：平台白发银披风，一生都在征战中。初入行时，真的连菜鸟都算不上，顶多是只菜虫。当时听到什么c++，Objective-c，大数据，神经网络。。。。。。真的明白自己就两件事不会：这也不会，那也不会。凭着内心的一股倔强，拼命的学，没日没夜的学算法，刷poj，玩命似的向所有人证明：哥真的不是菜鸟。只记得当时内心非常希望有人能叫我一声大佬！过了这些年后，发现技术真的是浩如烟海，我懂的这点东西真的只是沧海一粟而已，倒是有很多人叫我大佬了，可我却想告诉大家：哥真的只是只菜鸟啦！</p><p>接下来我会分三个篇章向小伙伴们介绍，我是怎么从小菜鸟，经过多年的玩命学习后，成功变成老菜鸟的。这三个篇章会围绕以下几点来铺开：</p><ol><li>猿人谷到底是哪条路子的？菜虫？还是大佬？</li><li>初入搬砖行业，什么都不会，该从哪里学起？望尽天涯路啊！</li><li>搬砖工到底要不要写技术博客？</li><li>如何扩展自己的技术视野和技术圈？</li><li>总觉得效率很低，该如何高效的学习？</li><li>工资在房价面前微不足道，搬砖工如何去理财？</li><li>搬砖工如何学习扛过中年危机？</li></ol><h2 id="一-昨夜西风凋碧树，独上高楼，望尽天涯路"><a href="#一-昨夜西风凋碧树，独上高楼，望尽天涯路" class="headerlink" title="一. 昨夜西风凋碧树，独上高楼，望尽天涯路"></a>一. 昨夜西风凋碧树，独上高楼，望尽天涯路</h2><p>本科四年基本没有学明白有关计算机的任何东西，当时只开过C语言，关键是大四毕业时我连个冒泡都写不明白。大一大二基本就是懵懵懂懂，刚从高中的那种“军事化”学习中解脱，算是彻底放飞了自己，跟风的去当班长，去捣腾怎么做学生会主席，反正就是把其他事都干了，唯独把学习的事全忘了。记得在大二时，去做大一的辅导员助理，突然一下子要去教大一的学弟学妹们该如何过好大学四年。感觉就跟一个已经喝醉酒的人去教刚端起酒杯的人怎么才能不喝醉！突然我好像明白了什么，我的大学四年到底该如何去过？晃悠到大二结束，我才发现这两年的课本好像只有线性代数这本书有翻完（请注意是“翻”，不是学完），其它的书基本都没翻一半，更别提学完了。内心一下子就慌了。<strong>独上高楼，望尽天涯路，未来的我到底该怎么办啊？</strong></p><p>就横下心来去学习，从此一如图书馆深似海，从此皆是陌路人，决心加入考研大军！看了几天高数，懵了，小伙伴能理解什么是挫败感扑面而来吗？发现放飞了两年的心沉不下来看书，怎么办？理科的书看不明白，那我去看文科的书，在图书馆看书时看到有人考国家导游证，听说有这证的人，全国所有旅游景点都能免费。刚好我也喜欢旅游，世间竟有这等好事，考，必须考，冲这个免费我也得考，就用考证来磨练自己，让放飞的心能沉下来看书。当时还年轻，脑子比较够用，我这人有个很怪的小技能，就是短时记忆能力比较强（就是记得快，忘得也快，对付考试最好用）。当时国家级导游证考试，指定的是好像是两本跟医学专业的教材那么厚的书，记得考前3个月，把这两本书翻了2遍，画类似思维脑图的图谱，基本把整本书都记得七七八八了。考试时，说来也怪，考的都会，蒙的题好像都对。最后成绩出来，全省排名好像是前15%，莫名其妙的竟然通过了，自己都觉得挺逗的。（<strong>人越努力，就会越幸运，学习技术也一样，够努力，菜鸟也能逆袭成大佬</strong>）</p><p>考完后就开始考研，考研基本就是早出晚归的泡图书馆，图书馆什么时候熄灯，就什么时候回宿舍，就这样早出晚归的过了差不多一年。后面非常幸运的考到了北京，也不明白为什么，好像一直都还挺幸运的！读研前的心理状态跟当初去读本科时的状态完全不一样，更清楚自己该如何去过研究生这3年了，目的性更强了。读研是计算机方向，主要是用c，c++，开始重新学编程语言（本科的底子太薄），把《C++ primer》里的例子照着敲，不要问我当时敲什么？反正咱也不懂，咱也不敢多问啊。学着学着，发现自己好像对语言有点懂，又好像啥都不会（缺乏项目的历练）。</p><p><strong>既然我也不知道我会什么，也不知道自己不会什么，那怎么办？</strong></p><p>初入行的小白，往往都不知道该怎么学技术，觉得技术太多，又不知道该选，我当初也遇到过这种迷茫。有次无意中发现高中三年都同班的一个好友保送到清华了，好，既然我啥也不会，那我就去找那些啥都会的大牛学习。之后就基本混迹于五道口了，没事就去清华北航晃一晃，看看大牛们都是怎么学习的。大牛们都在学算法，刷ACM，好，那我也跟学；大牛们搞数据挖掘，好，我也跟着学；大牛们搞图像识别，好，我也跟着学；大牛们搞网格计算，好，我也跟着学。。。。。。<strong>既然当时也不知道该做什么，那就大牛做啥就跟着做啥，动起来总比坐着瞎空想强</strong>！发现自己还是对算法更感兴趣，那就跟着刷ACM呗，题太难，就从poj开始。其实初学技术就是这样，不知道该怎么学技术，就是因为对技术不够了解，动起来，先把自己感兴趣的都学，学着学着就知道自己的最大兴趣点在哪里了。当时刷题到半夜，再跟几个好哥们找个马路边的烧烤摊，撸串，喝酒，吹牛，何等的扬鞭纵马江湖，快意人生啊！（其实就是几只单身狗，抱着酒瓶唱情歌啦，可怜的单身狗啊）</p><p>找到了自己的兴趣点后，就开始刷算法和数据结构，当时开了自己的第一个技术博客，开始把自己的一些学习过程和经验写出来。遇到不懂的，就去五道口晃悠（八卦一下，当时楼教主还在姚班读博），反正晃悠回来肯定能找到答案。</p><p>现在经常有人问我：<strong>想写技术博客，但不知道怎么写</strong>？结合我自己曾经的经验来说，我曾经是从洗稿开始（有注明参考来源，向曾经帮助过我的大佬致谢），当时就是无论写什么，度娘上都有，而且感觉别人写的要比自己的好。那怎么办？（世上土豪那么多，难不成我这种穷人就不用过日子啦？道理是一样的）那就照着别人的套路，结合自己对知识点的理解写。写了几篇后，慢慢就会形成自己写作的一些套路和写作习惯，就不需要再去洗稿了，而是能写出自己风格的文章了。所以还要问博客该怎么写吗？有功夫问的时间，还不如立马敲起键盘——开写！<strong>记住，学技术，行动起来永远比空想强，Talk is cheap,Show me the code.</strong></p><p>研二开始找实习，当时做iOS开发挺火的，听着挺高端，就打算找个iOS开发的实习。就去某家公司找实习，先笔试，竟然都是些算法题，记得是7道题，说随机选5道就可以了，因为有了之前刷算法的基础，做这些题没有太大难度。很快就刷了5道，面试的人很忙，让我等会，反正也闲着，我顺便把这7道题全刷了，后面面试官进行来说笔试成绩满分，就这样很顺利的通过了面试。实习就是跟公司一起做一个模拟炒股的app，通过实习给自己赚了台mac。牛逼吹完了，其实就是想告诉大家，<strong>学技术真的没有捷径，唯有积累，也许真的是越努力越幸运吧！</strong></p><p>临毕业前，大家都一样，赶场参加各种校招，当时很想去网易和360（因为这两公司当时校招给的待遇很高），可怜的是都没要我！当时开始有点怀疑自己，就不再找这类大公司了，开始给各种中小公司投简历，发现各个公司出的问题都差不多，对付不了大公司，中小公司还是没啥问题的，被打击的心重新找回了自信。</p><p>毕业后的第一份工作，公司用的java，就从c++转成了java，从此就在java这条路上摇摇晃晃的走到了今天。</p><h2 id="二-衣带渐宽终不悔，为伊消得人憔悴"><a href="#二-衣带渐宽终不悔，为伊消得人憔悴" class="headerlink" title="二. 衣带渐宽终不悔，为伊消得人憔悴"></a>二. 衣带渐宽终不悔，为伊消得人憔悴</h2><p>毕业第一年就是公司有什么项目，就跟着做什么项目，过了大半年，发现每天就是往返于公司与家，基本都没啥圈子了。内心莫名的惶恐起来，其他公司在玩什么技术？现在市面都有什么牛逼的产品？就怕自己跟不上技术发展的节奏，为了扩展自己的技术视野和圈子，后面基本每个周末都去3W咖啡和车库咖啡晃悠，那里几乎每天都会有各种公司的路演，还有很多大公司的技术分享活动。刚开始，其实路演的很多东西和技术分享我真的听不明白（留下没技术的眼泪），既然听不明白那就多去听呗，听着听着开始对很多产品有自己的一些小见解了，也慢慢结识了一些同样的技术狂热份子。到现在都还记得当时有位大佬给我说过一句话：<strong>现在的社会竞争非常激烈，你以为是不进则退？其实错了，是进步的慢都算后退</strong> 。我的天啊！犹如醍醐灌顶一般，原来进步小都算后退，那没进步的岂不是直接掉队？（可以用某种算法思路来解释，快慢指针大家都知道吧，职场是场马拉松，你slow.next，别人是fast.next.next，你以为自己在进步，其实已经在悄然掉队）</p><p>北京工作一年后，因为家庭原因，辗转到了广州。不愧为食在广州，来广州的这几年，体重直接飙升30斤，但技术能力是否有跟着飙升，我也不知道。发现广州的技术分享活动非常少，那就自己学呗。从读研时我就一直保留着一个小习惯，每晚睡前都会看至少半小时以上的书（一直对电子书无感，偏好纸质书，可以做笔记），这一年我的重点都放在基础上，jdk的源码、缓存、分布式等技术的研究上。但一直很热衷于技术交流和分享，慢慢的博客上有很多小伙伴留言，留言的有些问题超过我的技术范围，我就各种面向搜索引擎编程，弄明白后再回复小伙伴。反正当时帮助别人解决问题给我内心带来了极大的满足感！</p><p>随着技术的慢慢积累，后面去某家公司（不大，整个技术团队不到30人）做架构师，全面负责公司的技术架构、产品把控和团队管理。当时就是既当爹又当妈的感觉，搭建框架，pc端有两个系统（前台系统给用户用，后台系统）、6个app（3个安卓，3个iOS）。起初自己就是搭框架，撸些核心代码，慢慢时间分配不过来，就开始主要负责团队任务的划分，团队管理，人员招聘之类的事。这期间参加过100人次的面试，遇到过非常多形形色色的面试者，发现虽然人是独立的个体，如果按面试者这个维度区分的话，很多人都是有共性的，相对还是比较容易区分哪些是适合的，哪些是不太适合的。这个阶段积累了很多团队管理的经验和教训，久而久之，发现自己还是对技术很偏执，不想过早的转管理岗，还是更喜欢一线搬砖的感觉。</p><p>为了能不断提高自己的搬砖战斗力，基本就是白天忙工作，晚上再学习自己感兴趣的技术。这里一定要说有哪些经验可以送给即将踏入程序员大军的小宝贝们的话，我只想说，<strong>工作的8小时是让你养家糊口，下班后的学习才是让你技术能否更上一层楼的时刻！</strong>（大家应该听过工作两年，经验却有3年，多出的1年真可以自己加班给加出来）大家都知道，工作中一定不是每个开发任务都是你喜欢的，也并不是你不喜欢的东西你都有权利选择不做的，也并不是每一个你喜欢的任务都能轮到你这的。写业务代码的，可能绝大部分时间都是CRUD，可能技术含量不是很高的，如果指望靠这些来让自己的搬砖能力与日俱增，肯能最终的结果会大失所望。</p><p><strong>搬砖工，一定要学会利用工作外的时间来继续保持学习的激情和野心</strong>。对技术要保有衣带渐宽终不悔的信念，技术的成长绝不可能一蹴而就的。这东西没法像金庸小说那样，掉到个山洞里，捡一本武林秘籍，修炼后就天下无敌（如果真有这种秘籍，小伙伴千万记得告诉我哦）。<strong>结合猿人谷这几年的工作经验，我可以非常负责任的告诉你，绝对不可能，不可能，不可能！（重要的事情还是说3遍）所以很多小伙伴指望买某个专栏就能把这个专栏的内容学得非常精进，怎么可能呢？还是那句老话：技术没有捷径，唯有积累。</strong></p><h2 id="三-众里寻他千百度，蓦然回首，那人却在，灯火阑珊处"><a href="#三-众里寻他千百度，蓦然回首，那人却在，灯火阑珊处" class="headerlink" title="三.众里寻他千百度，蓦然回首，那人却在，灯火阑珊处"></a>三.众里寻他千百度，蓦然回首，那人却在，灯火阑珊处</h2><p>第三篇章的标题也是我还在一直思索着的，专门问了下度娘该如何解读：</p><blockquote><p>简评：此句言与伊人相会之欢悦心境，于灯火明灭闪烁之处，终于见到意中之人，自是大喜过望。意喻经过艰辛探索，终有所悟，犹如醍醐灌顶，豁然开朗。</p></blockquote><p>各位小伙伴有没有发现，虽然自己对技术矜矜业业，道理懂了一堆，好像还是没能过好这一生？</p><p>很现实的问题，房子，车子，票子。如何权衡这些现实的问题与学习呢？其实搬砖工严格意义来说工资待遇不算太差，可能跟很多行业比起来待遇还偏高了点。到了这个阶段需要具备一定的理财能力了，记得强哥（纯洁的微笑）以前还专门写过一些文章来告诉搬砖工理财的重要性。我也曾经豪情壮志的冲进过股市，反正我是灰头土脸的光着膀子出来了（衣服都亏没了）。但我身边也有些朋友真的靠股市发家致富了，股市有风险但也有机遇。曾经有个同事特逗，当时我不玩股票都能知道每天股票的大致情况如何，每到下午三点，如果这哥们提起包哼着小曲下班（这哥们明目张胆的早退，来句今天都赚一两万了，早退才扣多少钱？），那必定是股票大涨，三点后还在上班那股票基本就是绿了。</p><p>股票这货注定是我的敌人！当时工作两年多，手上有点小积蓄，前面说过，来到了广州，广州的房价相对北上深是真亲民，你想1200就能租个单间（有独立卫生间，厨房等），在北京恐怕连个隔断的次卧都租不到吧！就去鼓捣房子，当时房子也在低点，最终鼓捣了一套房子（中间过程省略），记得当时11月份把定金付了（我额外跟房东签了份不许反悔的合同，房子涨了，房东你得认栽，降了，我照价收），就去毛里求斯度假，等我度假回来，中介就一直打电话让我请吃饭。人生有时就是处处是惊喜，买房前说是一定不会通地铁，度假期间莫名其妙的官宣说已经规划地铁线路了，大起大落的太刺激了，反正地铁一响黄金万两，房子莫名其妙的一个月一个价，幸好之前跟房东有签合同，后面就很快去房管局处理过户。房子涨一百万，确实比搬砖赚一百万要轻松太多了！分享的意思是，<strong>搬砖之余，最好能学会一些理财的方法。俗话说的好，人无横财不富，马无夜草不肥啊！</strong></p><p>近一两年，我不再从事管理者的岗位，因为更喜欢一线搬砖的活儿。起初用夏雪冬日这个笔记一直在写文章，可能这个名字比较冷门，度娘前几页基本都是我的文章信息。后来改名猿人谷，注册了yuanrengu.com的域名，也弄了<strong>猿人谷</strong>的微信公众号。关注“猿人谷”公众号的很多小伙伴们都知道我创建这个公众号的初衷，起初是网上很多小伙伴在我的博客和个人主页里留言各种技术问题（最初大都问的是面试相关的问题），写了文章后又没法及时告知大家。当时流行公众号，就创建了猿人谷这个公号，意思就是一伙程序猿聚在一起的山谷（自恋的认为颇有几分侠义情怀），大家可以互相讨论技术，互相交流。所以公号大部分文章都是小伙伴们留言问到的问题，问的多的，一般都会自己原创一篇文章，如果网上有比自己写的更好的文章，就会联系作者进行转载。初衷只是为了解决小伙伴们的提问，也就没太刻意去推广自己的公众号（自己技术有限，很多时候也不敢班门弄斧），其实有段时间也会在很多微信群推自己的文章，但心里总觉得别扭，技术很纯粹的东西，最后就不再推广了。希望自己能一直秉持初心！</p><p>截至今日，我有时心里想，<strong>如果让我自己给自己的技术评级，会评定在哪一档呢？我想了很久，想来想去，发现自己其实真的还只是菜鸟，如果一定要加个阶段的话，那我就是只老菜鸟</strong>。虽然如今学到了很多，但我却深刻的明白，不会的东西更多！我的前面还有非常多值得学习的标杆，孟大哥（孟岩，且慢的扛把子，绝对扫地僧级别的大神，无论技术还是人品都令人崇拜）、知秋、许进等，还有遥不可及的楼教主。有那么多优秀的学习榜样在前面，我又怎敢懈怠呢？</p><p>如果还有一次选择职业的机会，你还会选程序员吗？我想说我一定会毫不犹豫的选程序员这个搬砖行业，<strong>如今的时代对程序员来说绝对是最好的时代，任何人都可以通过自己的努力不懈来达到自己的梦想，大家不靠背景，靠本事和能力吃饭。</strong></p><p>我想说的经验和教训基本都穿插在上面的话题中，我这人非常不喜欢一板一眼的方法论，如学技术就该先学啥，再学啥，这种方法论，那种秘籍。反正我是从来对这种东西不感冒，我一直非常相信每个人都是独立的个体，有自己特有的学习和处事方法，别人的可以参考可以借鉴，但一定要内化为自己特有的方式。适合自己的，才是最好的！</p><p><strong>文末，我们一起喝碗鸡汤，也是我一直践行着的鸡汤</strong>！括号里是我的备注。</p><h4 id="【告别平庸的9个方法】"><a href="#【告别平庸的9个方法】" class="headerlink" title="【告别平庸的9个方法】"></a>【告别平庸的9个方法】</h4><ol><li>每天坚持读书1小时。（<strong>坚持很难，但水滴石穿的道理大家都懂。</strong>）</li><li>坚持提升专业，成为圈子里的权威。（<strong>越努力越幸运，技术的成长没有捷径，唯有每天坚持努力，在未来的某一刻，终究会绽放绚烂的生命之花，终有成技术大佬的一天</strong>）</li><li>战胜两个坏毛病：拖延与抱怨。（<strong>大老爷们最忌讳抱怨</strong>）</li><li>先从形象上改变，提升自信。（<strong>爷们还是自信点好</strong>）</li><li>时常反省自己，但不诋毁自己。（<strong>不骄不躁</strong>）</li><li>向优秀的人学习。（<strong>多向技术大佬学习，如江南白衣，笨神（你假笨），知秋等</strong>）</li><li>坚持早睡早起。（<strong>这个我做的也不好，不好提建议</strong>）</li><li>坚持体育锻炼。（<strong>人到中年不得已，保温杯里泡枸杞，该要注意身体了，多锻炼</strong>）</li><li>保持微笑。（<strong>还是那句话，爱笑的人，运气一般不会太差</strong>）</li></ol><p><strong>愿每一个小伙伴都能找准方向，认清局势，沉淀积累，稳步前行。</strong></p><p><strong>有梦想，什么时候开始都不会晚！</strong></p><p><strong>愿你历经千帆，归来仍是少年！</strong><br><img src="https://img-blog.csdnimg.cn/20190916103157318.gif" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;此篇文章为segmentfault中秋约稿时写的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;各位小伙伴，大家好！我是猿人谷，一名搬砖老菜鸟。蓦然回首这几年的打怪升级历程，不再是之前的年轻气盛，也没有百感交集，内心却像湖面躺着那株莲花一般，平静，荡
      
    
    </summary>
    
    
      <category term="奋斗" scheme="https://yuanrengu.com/categories/%E5%A5%8B%E6%96%97/"/>
    
    
      <category term="程序人生" scheme="https://yuanrengu.com/tags/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>【ZooKeeper系列】3.ZooKeeper源码环境搭建</title>
    <link href="https://yuanrengu.com/2020/7bf54924.html"/>
    <id>https://yuanrengu.com/2020/7bf54924.html</id>
    <published>2020-01-09T08:44:58.000Z</published>
    <updated>2020-01-13T06:42:16.353Z</updated>
    
    <content type="html"><![CDATA[<p>在系列的前两篇文章中，介绍了ZooKeeper环境的搭建（包括单机版、伪集群和集群），对创建、删除、修改节点等场景用命令行的方式进行了测试，让大家对ZooKeeper环境搭建及常用命令行有初步的认识，也为搭建ZooKeeper的开发环境、生产环境起到了抛砖引玉的作用。也介绍了用Java来实现API的调用，包括节点的增、删、改、查。通过对这两篇的学习，让大家对ZooKeeper的使用有了初步认识，也可用于实现系列后面篇章要介绍的命名服务、集群管理、分布式锁、负载均衡、分布式队列等。</p><p>在前两篇中，强调了阅读英文文档的重要性，也带领大家解读了部分官方文档，想传达出的理念是ZooKeeper没有想象中的那么难，阅读官方文档也没那么难。后面的篇章中，结合官方文档，在实战演练和解读源码的基础上加深理解。</p><blockquote><p>上联：说你行你就行不行也行<br>下联：说不行就不行行也不行<br>横批：不服不行<br><code>阅读源码就跟这个对联一模一样，就看你选上联，还是下联了！</code></p></blockquote><p>这一篇开始源码环境的搭建，<code>here we go</code>！</p><p>很多老铁留言说很想研读些github上的开源项目，但代码clone下来后总出现这样或那样奇奇怪怪的问题，很影响学习的积极性。学习ZooKeeper的源码尤其如此，很多人clone代码后，报各种错，提示少各种包。问了下度娘ZooKeeper源码环境，搜出来的文章真的差强人意，有些文章错的竟然非常离谱。这里我重新搭建了一遍，也会介绍遇到的一些坑。</p><p>很多老铁上来一堆猛操作，从github上下载了ZooKeeper源码后，按常规方式导入IDEA，最后发现少各种包。起初我也是这样弄的，以为ZooKeeper是用Maven来构建的，仔细去了解了下ZooKeeper的版本历史，其实是用的Ant。如今一般用的Maven或Gradle，很少见到Ant的项目了，这里不对Ant多做介绍。</p><h2 id="1-Ant环境搭建"><a href="#1-Ant环境搭建" class="headerlink" title="1 Ant环境搭建"></a>1 Ant环境搭建</h2><p>Ant官网地址：<a href="https://ant.apache.org/bindownload.cgi" target="_blank" rel="noopener">https://ant.apache.org/bindownload.cgi</a></p><p>下载解压后，跟配置jdk一样配置几个环境变量：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//修改为自己本地安装的目录</span><br><span class="line">ANT_HOMT=D:\apache-ant-1.10.7 </span><br><span class="line">PATH=%ANT_HOME%/bin</span><br><span class="line">CLASSPATH=%ANT_HOME%/lib</span><br></pre></td></tr></table></figure><p>配置好后，测试下Ant是否安装成功。<strong>ant -version</strong>,得到如下信息则代表安装成功：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache Ant(TM) version 1.10.7 compiled on September 1 2019</span><br></pre></td></tr></table></figure><p>Ant的安装跟JDK的安装和配置非常相似，这里不做过多介绍。</p><h2 id="2-下载ZooKeeper源码"><a href="#2-下载ZooKeeper源码" class="headerlink" title="2 下载ZooKeeper源码"></a>2 下载ZooKeeper源码</h2><p>源码地址：<a href="https://github.com/apache/zookeeper" target="_blank" rel="noopener">https://github.com/apache/zookeeper</a></p><p>猿人谷在写本篇文章时，releases列表里的最新版本为<code>release-3.5.6</code>，我们以此版本来进行源码环境的搭建。</p><h2 id="3-编译ZooKeeper源码"><a href="#3-编译ZooKeeper源码" class="headerlink" title="3 编译ZooKeeper源码"></a>3 编译ZooKeeper源码</h2><p>切换到源码所在目录，运行<code>ant eclipse</code>将项目编译并转成eclipse的项目结构。<br><img src="https://img-blog.csdnimg.cn/20191230152211788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这个编译过程会比较长，差不多等了7分钟。如果编译成功，会出现如下结果：<br><img src="https://img-blog.csdnimg.cn/20191230152345614.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-导入IDEA"><a href="#4-导入IDEA" class="headerlink" title="4 导入IDEA"></a>4 导入IDEA</h2><p>上面已经将项目编译并转成eclipse的项目结构，按eclipse的形式导入项目。<br><img src="https://img-blog.csdnimg.cn/20191230152519906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20191230152653707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-特别说明"><a href="#5-特别说明" class="headerlink" title="5 特别说明"></a>5 特别说明</h2><p>将源码导入IDEA后在<code>org.apache.zookeeper.Version</code>中发现很多红色警告，很明显少了<code>org.apache.zookeeper.version.Info</code>类。<br><img src="https://img-blog.csdnimg.cn/20191230155040951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>查询源码得知是用来发布的时候生成版本用的，我们只是研读源码，又不发布版本所以直接写死就ok了。<br><img src="https://img-blog.csdnimg.cn/20191230155439579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即新增Info类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.zookeeper.version;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MAJOR = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> MINOR = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> MICRO = <span class="number">6</span>;</span><br><span class="line">    String QUALIFIER = <span class="keyword">null</span>;</span><br><span class="line">    String REVISION_HASH = <span class="string">"c11b7e26bc554b8523dc929761dd28808913f091"</span>;</span><br><span class="line">    String BUILD_DATE = <span class="string">"10/08/2019 20:18 GMT"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-启动zookeeper"><a href="#6-启动zookeeper" class="headerlink" title="6 启动zookeeper"></a>6 启动zookeeper</h2><p>针对单机版本和集群版本，分别对应两个启动类：</p><ul><li>单机：ZooKeeperServerMain</li><li>集群：QuorumPeerMain</li></ul><p>这里我们只做单机版的测试。</p><p><strong>在conf目录里有个zoo_sample.cfg，复制一份重命名为zoo.cfg</strong>。</p><p>zoo.cfg里的内容做点修改（也可以不做修改），方便日志查询。dataDir和dataLogDir根据自己的情况设定。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dataDir=E:\\02private\\1opensource\\zk\\zookeeper\\dataDir</span><br><span class="line">dataLogDir=E:\\02private\\1opensource\\zk\\zookeeper\\dataLogDir</span><br></pre></td></tr></table></figure><p>运行主类  <code>org.apache.zookeeper.server.ZooKeeperServerMain</code>，将zoo.cfg的完整路径配置在Program arguments。<br><img src="https://img-blog.csdnimg.cn/20191230153718683.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行<code>ZooKeeperServerMain</code>，得到的结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connected to the target VM, address: '127.0.0.1:0', transport: 'socket'</span><br><span class="line">log4j:WARN No appenders could be found for logger (org.apache.zookeeper.jmx.ManagedUtil).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span><br></pre></td></tr></table></figure><p>告知日志无法输出，日志文件配置有误。这里需要指定日志文件log4j.properties。<br><img src="https://img-blog.csdnimg.cn/2019123015440042.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在VM options配置，即指定到conf目录下的log4j.properties：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dlog4j.configuration=file:E:/02private/1opensource/zk/zookeeper/conf/log4j.properties</span><br></pre></td></tr></table></figure><p>配置后重新运行<code>ZooKeeperServerMain</code>，输出日志如下，<br><img src="https://img-blog.csdnimg.cn/20191230154623937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以得知单机版启动成功，单机版服务端地址为127.0.0.1:2181。</p><h2 id="7-启动客户端"><a href="#7-启动客户端" class="headerlink" title="7 启动客户端"></a>7 启动客户端</h2><p>通过运行<code>ZooKeeperServerMain</code>得到的日志，可以得知ZooKeeper服务端已经启动，服务的地址为<code>127.0.0.1:2181</code>。启动客户端来进行连接测试。</p><p>客户端的启动类为<code>org.apache.zookeeper.ZooKeeperMain</code>，进行如下配置：<br><img src="https://img-blog.csdnimg.cn/20191230175008781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>即客户端连接127.0.0.1:2181，获取节点<code>/yuanrengu</code>的信息。</p><p>下面带领大家一起看看客户端启动的源码（<code>org.apache.zookeeper.ZooKeeperMain</code>）。<strong>这里要给大家说下我阅读源码的习惯，很多老铁以为阅读源码就是顺着代码看，这样也没啥不对，只是很多开源项目代码量惊人，这么个干看法，容易注意力分散也容易看花眼。我一般是基于某个功能点，从入口开始debug跑一遍，弄清这个功能的“代码线”，就像跑马圈块地儿一样，弄清楚功能有关的代码，了解参数传递的过程，这样看代码时就更有针对性，也能排除很多干扰代码。</strong></p><h3 id="7-1-main"><a href="#7-1-main" class="headerlink" title="7.1 main"></a>7.1 main</h3><p>main里就两行代码，通过debug得知args里包含的信息就是上面我们配置在<strong>Program arguments</strong>里的信息：<br><img src="https://img-blog.csdnimg.cn/20191231095122793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="7-1-1-ZooKeeperMain"><a href="#7-1-1-ZooKeeperMain" class="headerlink" title="7.1.1 ZooKeeperMain"></a>7.1.1 ZooKeeperMain</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeperMain</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 用于解析参数里的命令行的</span></span><br><span class="line">    cl.parseOptions(args);</span><br><span class="line">    System.out.println(<span class="string">"Connecting to "</span> + cl.getOption(<span class="string">"server"</span>));</span><br><span class="line">    <span class="comment">// 用于连接ZooKeeper服务端</span></span><br><span class="line">    connectToZK(cl.getOption(<span class="string">"server"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过下图可以看出，解析参数后，就尝试连接127.0.0.1:2181，即ZooKeeper服务端。cl.getOption(“server”)得到的就是127.0.0.1:2181。<br><img src="https://img-blog.csdnimg.cn/20191231100610526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="7-1-2-parseOptions"><a href="#7-1-2-parseOptions" class="headerlink" title="7.1.2 parseOptions"></a>7.1.2 parseOptions</h4><p><img src="https://img-blog.csdnimg.cn/20191231114421581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>可以很清楚的得知解析args的过程，主要从”-server”，”-timeout”，”-r”，”-“这几个维度来进行解析。</strong></p><h4 id="7-1-3-connectToZK"><a href="#7-1-3-connectToZK" class="headerlink" title="7.1.3 connectToZK"></a>7.1.3 connectToZK</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">connectToZK</span><span class="params">(String newHost)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 用于判断现在ZooKeeper连接是否还有效</span></span><br><span class="line">    <span class="comment">// zk.getState().isAlive() 注意这个会话是否有效的判断，客户端与 Zookeeper连接断开不一定会话失效</span></span><br><span class="line">    <span class="keyword">if</span> (zk != <span class="keyword">null</span> &amp;&amp; zk.getState().isAlive()) &#123;</span><br><span class="line">        zk.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此时newHost为127.0.0.1:2181</span></span><br><span class="line">    host = newHost;</span><br><span class="line">    <span class="comment">// 判断是否为只读模式，关于只读模式的概念在前一篇文章中有介绍</span></span><br><span class="line">    <span class="keyword">boolean</span> readOnly = cl.getOption(<span class="string">"readonly"</span>) != <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 用于判断是否建立安全连接</span></span><br><span class="line">    <span class="keyword">if</span> (cl.getOption(<span class="string">"secure"</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.setProperty(ZKClientConfig.SECURE_CLIENT, <span class="string">"true"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Secure connection is enabled"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    zk = <span class="keyword">new</span> ZooKeeperAdmin(host, Integer.parseInt(cl.getOption(<span class="string">"timeout"</span>)), <span class="keyword">new</span> MyWatcher(), readOnly);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ZKClientConfig.SECURE_CLIENT</code>已经被标注为deprecation了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Setting this to "true" will enable encrypted client-server communication.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECURE_CLIENT = ZooKeeper.SECURE_CLIENT;</span><br></pre></td></tr></table></figure><p>debug查看关键点处的信息，可以得知这是建立一个ZooKeeper连接的过程（【ZooKeeper系列】2.用Java实现ZooKeeper API的调用,这篇文章里详细介绍过ZooKeeper建立连接的过程）</p><p>下图看看几处关键信息：<br><img src="https://img-blog.csdnimg.cn/20191231101754442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Integer.parseInt(cl.getOption(“timeout”))为30000。</p><p>至此完成了ZooKeeperMain main = new ZooKeeperMain(args);的整个过程。简短点说就是：</p><ol><li>解析Program arguments里的参数</li><li>连接ZooKeeper服务端</li></ol><h3 id="7-2-main-run"><a href="#7-2-main-run" class="headerlink" title="7.2 main.run()"></a>7.2 main.run()</h3><p><strong>敲黑板，重头戏来了哦！</strong></p><p>一起来看下run()的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> CliException, IOException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// cl.getCommand()得到的是 “get”，就是上文传进来的</span></span><br><span class="line">    <span class="keyword">if</span> (cl.getCommand() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Welcome to ZooKeeper!"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> jlinemissing = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// only use jline if it's in the classpath</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; consoleC = Class.forName(<span class="string">"jline.console.ConsoleReader"</span>);</span><br><span class="line">            Class&lt;?&gt; completorC =</span><br><span class="line">                Class.forName(<span class="string">"org.apache.zookeeper.JLineZNodeCompleter"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"JLine support is enabled"</span>);</span><br><span class="line"></span><br><span class="line">            Object console =</span><br><span class="line">                consoleC.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">            Object completor =</span><br><span class="line">                completorC.getConstructor(ZooKeeper.class).newInstance(zk);</span><br><span class="line">            Method addCompletor = consoleC.getMethod(<span class="string">"addCompleter"</span>,</span><br><span class="line">                    Class.forName(<span class="string">"jline.console.completer.Completer"</span>));</span><br><span class="line">            addCompletor.invoke(console, completor);</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            Method readLine = consoleC.getMethod(<span class="string">"readLine"</span>, String.class);</span><br><span class="line">            <span class="keyword">while</span> ((line = (String)readLine.invoke(console, getPrompt())) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                executeLine(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Unable to start jline"</span>, e);</span><br><span class="line">            jlinemissing = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Unable to start jline"</span>, e);</span><br><span class="line">            jlinemissing = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Unable to start jline"</span>, e);</span><br><span class="line">            jlinemissing = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Unable to start jline"</span>, e);</span><br><span class="line">            jlinemissing = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Unable to start jline"</span>, e);</span><br><span class="line">            jlinemissing = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jlinemissing) &#123;</span><br><span class="line">            System.out.println(<span class="string">"JLine support is disabled"</span>);</span><br><span class="line">            BufferedReader br =</span><br><span class="line">                <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                executeLine(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 处理传进来的参数</span></span><br><span class="line">        processCmd(cl);</span><br><span class="line">    &#125;</span><br><span class="line">    System.exit(exitCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过下图可以看出<code>processCmd(cl);</code>里<code>cl</code>包含的信息：<br><img src="https://img-blog.csdnimg.cn/20191231103551902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>debug到<code>processCmd(MyCommandOptions co)</code> 就到了决战时刻。里面的<code>processZKCmd(MyCommandOptions co)</code>就是核心了，代码太长，只说下processZKCmd里的重点代码，获取节点/yuanrengu的信息：<br><img src="https://img-blog.csdnimg.cn/20191231105710706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>因为我之前没有创建过/yuanrengu节点，会抛异常<code>org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /yuanrengu</code> ， 如下图所示：<br><img src="https://img-blog.csdnimg.cn/2019123111251754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>经过上面的步骤后exitCode为1，执行System.exit(exitCode);退出。</p><p>至此带领大家dubug了一遍org.apache.zookeeper.ZooKeeperMain，上面我说过，阅读源码干看效果很小，只有debug才能有助于梳理流程和思路，也能清楚参数传递的过程发生了什么变化。</p><h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><p>上面我们介绍了源码环境的搭建过程，运行运行主类  <code>org.apache.zookeeper.server.ZooKeeperServerMain</code> 启动ZooKeeper服务端，运行<code>org.apache.zookeeper.ZooKeeperMain</code>连接服务端。</p><p><strong>阅读源码最好能动起来(debug)读，这样代码才是活的，干看的话代码如死水一样，容易让人索然无味！</strong></p><p>每个人操作的方式不一样，有可能遇到的问题也不一样，搭建过程中遇到什么问题，大家可以在评论区留言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在系列的前两篇文章中，介绍了ZooKeeper环境的搭建（包括单机版、伪集群和集群），对创建、删除、修改节点等场景用命令行的方式进行了测试，让大家对ZooKeeper环境搭建及常用命令行有初步的认识，也为搭建ZooKeeper的开发环境、生产环境起到了抛砖引玉的作用。也介绍
      
    
    </summary>
    
    
      <category term="ZooKeeper" scheme="https://yuanrengu.com/categories/ZooKeeper/"/>
    
    
      <category term="源码解读" scheme="https://yuanrengu.com/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>【ZooKeeper系列】2.用Java实现ZooKeeper API的调用</title>
    <link href="https://yuanrengu.com/2020/469cbe7.html"/>
    <id>https://yuanrengu.com/2020/469cbe7.html</id>
    <published>2020-01-09T08:27:32.000Z</published>
    <updated>2020-01-13T06:42:16.356Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>温馨提示</code>：在这里我再次提个小要求，希望大家能习惯看<strong>官方文档</strong>，文档虽然是英文但用词都比较简单，基本都能看懂文档表达的意思。<strong>授之以鱼不如授之以渔</strong>的道理相信大家都明白，也希望通过猿人谷的这个ZooKeeper系列，让大家入门、到熟悉，举一反三后能精通ZooKeeper。</p></blockquote><p>在前一篇我们介绍了<a href="https://blog.csdn.net/hyg0811/article/details/103403658" target="_blank" rel="noopener">ZooKeeper单机版、伪集群和集群环境搭建</a>，通过命令行的方式做了节点的创建、删除、更新、获取节点信息的测试。Zookeeper 的目的是为客户端构建复杂的协调功能提供简单、高效的核心 API，这一篇我们用Java通过ZooKeeper提供的API接口来实现这些增删改查的功能。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p><code>org.apache.zookeeper.Zookeeper</code>是ZooKeeper客户端的主类，在<a href="http://zookeeper.apache.org/doc/r3.5.5/api/index.html" target="_blank" rel="noopener">官方文档</a>（<strong>该系列文章以v3.5.5为主</strong>，v3.6.6的API Docs还没有）中已明确说明（This is the main class of ZooKeeper client library.）。</p><blockquote><p>This is the main class of ZooKeeper client library. To use a ZooKeeper service, an application must first instantiate an object of ZooKeeper class. All the iterations will be done by calling the methods of ZooKeeper class. The methods of this class are thread-safe unless otherwise noted.<br>Once a connection to a server is established, a session ID is assigned to the client. The client will send heart beats to the server periodically to keep the session valid.</p></blockquote><p>创建一个ZooKeeper的实例来使用<code>org.apache.zookeeper.Zookeeper</code>里的方法，官方文档已经指出没有特别声明的话，ZooKeeper类里的方法是<code>线程安全</code>的。客户端连接到ZooKeeper服务的时候，会给客户端分配一个会话ID（session ID），客户端与服务端会通过心跳来保持会话有效。</p><p><code>org.apache.zookeeper.Zookeeper</code>里的方法非常多，就不一一列举了，只列几个增删改查的。</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td>create(String path, byte[] data, List acl, CreateMode createMode)</td><td>Create a node with the given path. （创建指定路径的节点）</td></tr><tr><td>create(String path, byte[] data, List acl, CreateMode createMode, AsyncCallback.Create2Callback cb, Object ctx)</td><td>The asynchronous version of create.（异步形式创建）</td></tr><tr><td>create(String path, byte[] data, List acl, CreateMode createMode, Stat stat)</td><td>Create a node with the given path and returns the Stat of that node.（按指定路径创建节点并返回节点状态信息）</td></tr><tr><td>delete(String path, int version)</td><td>Delete the node with the given path.（删除指定路径的节点）</td></tr><tr><td>delete(String path, int version, AsyncCallback.VoidCallback cb, Object ctx)</td><td>The asynchronous version of delete.（异步删除指定路径的节点）</td></tr><tr><td>exists(String path, boolean watch)</td><td>Return the stat of the node of the given path.（返回指定路径的节点状态信息）</td></tr><tr><td>getChildren(String path, boolean watch)</td><td>Return the list of the children of the node of the given path.（返回指定路径的所有子节点状态信息）</td></tr><tr><td>getData(String path, boolean watch, Stat stat)</td><td>Return the data and the stat of the node of the given path.（返回指定路径的节点数据和状态信息）</td></tr><tr><td>setData(String path, byte[] data, int version)</td><td>Set the data for the node of the given path if such a node exists and the given version matches the version of the node (if the given version is -1, it matches any node’s versions).（给指定路径和版本的节点设置新值，如版本为-1，即给所有版本设置值）</td></tr></tbody></table><h2 id="2-测试环境搭建"><a href="#2-测试环境搭建" class="headerlink" title="2 测试环境搭建"></a>2 测试环境搭建</h2><p>这里新建一个<strong>Spring Boot</strong>的项目来进行测试，新建Spring Boot项目的过程很简单，也不是这里的重点，就不做介绍了。</p><p>项目里会需要额外引入两个包来进行测试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-API测试"><a href="#3-API测试" class="headerlink" title="3 API测试"></a>3 API测试</h2><p>完整测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  简单测试示例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 猿人谷</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ZooKeeperDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIME_OUT = <span class="number">10000</span>;</span><br><span class="line">    <span class="comment">// ZooKeeper服务的地址，如为集群，多个地址用逗号分隔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_STRING = <span class="string">"127.0.0.1:2181"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZNODE_PATH = <span class="string">"/zk_demo"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZNODE_PATH_PARENT = <span class="string">"/app1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZNODE_PATH_CHILDREN = <span class="string">"/app1/app1_1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        zk = <span class="keyword">new</span> ZooKeeper(CONNECT_STRING, SESSION_TIME_OUT, <span class="keyword">new</span> Watcher()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"已经触发了"</span> + event.getType() + <span class="string">"事件！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        zk.create(ZNODE_PATH, <span class="string">"anna2019"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateParentZnode</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        zk.create(ZNODE_PATH_PARENT, <span class="string">"anna2019"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateChildrenZnode</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        zk.create(ZNODE_PATH_CHILDREN, <span class="string">"anna2020"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data1 = zk.getData(ZNODE_PATH, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] data2 = zk.getData(ZNODE_PATH_PARENT, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] data3 = zk.getData(ZNODE_PATH_CHILDREN, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        LOGGER.info(<span class="string">"&#123;&#125;的信息：&#123;&#125;"</span>, ZNODE_PATH, <span class="keyword">new</span> String(data1) );</span><br><span class="line">        LOGGER.info(<span class="string">"&#123;&#125;的信息：&#123;&#125;"</span>, ZNODE_PATH_PARENT, <span class="keyword">new</span> String(data2) );</span><br><span class="line">        LOGGER.info(<span class="string">"&#123;&#125;的信息：&#123;&#125;"</span>, ZNODE_PATH_CHILDREN, <span class="keyword">new</span> String(data3) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 指定要删除的版本，-1表示删除所有版本</span></span><br><span class="line">        zk.delete(ZNODE_PATH, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  删除含有子节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteHasChildrenZnode</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 指定要删除的版本，-1表示删除所有版本</span></span><br><span class="line">        zk.delete(ZNODE_PATH_PARENT, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        Stat stat = zk.setData(ZNODE_PATH, <span class="string">"yuanrengu"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">        LOGGER.info(stat.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有用到<code>@Before</code>，简单说明下：</p><ul><li>@BeforeClass – 表示在类中的任意public static void方法执行之前执行</li><li>@AfterClass – 表示在类中的任意public static void方法执行之后执行</li><li>@Before – 表示在任意使用@Test注解标注的public void方法执行之前执行</li><li>@After – 表示在任意使用@Test注解标注的public void方法执行之后执行</li><li>@Test – 使用该注解标注的public void方法会表示为一个测试方法</li></ul><p>如果将<strong>SESSION_TIME_OUT</strong>设置的时间太短，会报API客户端异常：<code>org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /zk_demo</code> 。完整的报错信息如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">09:33:52.139 [main-SendThread(106.12.111.172:2181)] DEBUG org.apache.zookeeper.ClientCnxnSocketNIO - Ignoring exception during shutdown input</span><br><span class="line">java.net.SocketException: Socket is not connected</span><br><span class="line">at sun.nio.ch.Net.translateToSocketException(Net.java:123)</span><br><span class="line">at sun.nio.ch.Net.translateException(Net.java:157)</span><br><span class="line">at sun.nio.ch.Net.translateException(Net.java:163)</span><br><span class="line">at sun.nio.ch.SocketAdaptor.shutdownInput(SocketAdaptor.java:401)</span><br><span class="line">at org.apache.zookeeper.ClientCnxnSocketNIO.cleanup(ClientCnxnSocketNIO.java:198)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn$SendThread.cleanup(ClientCnxn.java:1338)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn$SendThread.cleanAndNotifyState(ClientCnxn.java:1276)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1254)</span><br><span class="line">Caused by: java.nio.channels.NotYetConnectedException: null</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.shutdownInput(SocketChannelImpl.java:782)</span><br><span class="line">at sun.nio.ch.SocketAdaptor.shutdownInput(SocketAdaptor.java:399)</span><br><span class="line">... 4 common frames omitted</span><br><span class="line">09:33:52.140 [main-SendThread(106.12.111.172:2181)] DEBUG org.apache.zookeeper.ClientCnxnSocketNIO - Ignoring exception during shutdown output</span><br><span class="line">java.net.SocketException: Socket is not connected</span><br><span class="line">at sun.nio.ch.Net.translateToSocketException(Net.java:123)</span><br><span class="line">at sun.nio.ch.Net.translateException(Net.java:157)</span><br><span class="line">at sun.nio.ch.Net.translateException(Net.java:163)</span><br><span class="line">at sun.nio.ch.SocketAdaptor.shutdownOutput(SocketAdaptor.java:409)</span><br><span class="line">at org.apache.zookeeper.ClientCnxnSocketNIO.cleanup(ClientCnxnSocketNIO.java:205)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn$SendThread.cleanup(ClientCnxn.java:1338)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn$SendThread.cleanAndNotifyState(ClientCnxn.java:1276)</span><br><span class="line">at org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1254)</span><br><span class="line">Caused by: java.nio.channels.NotYetConnectedException: null</span><br><span class="line">at sun.nio.ch.SocketChannelImpl.shutdownOutput(SocketChannelImpl.java:799)</span><br><span class="line">at sun.nio.ch.SocketAdaptor.shutdownOutput(SocketAdaptor.java:407)</span><br><span class="line">... 4 common frames omitted</span><br><span class="line"></span><br><span class="line">org.apache.zookeeper.KeeperException$ConnectionLossException: KeeperErrorCode = ConnectionLoss for /zk_demo</span><br><span class="line"></span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:102)</span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:2131)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:2160)</span><br><span class="line">at com.yuanrengu.demo.ZooKeeperDemo.testGet(ZooKeeperDemo.java:48)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)</span><br><span class="line">at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)</span><br><span class="line">at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)</span><br><span class="line">at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)</span><br><span class="line">at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)</span><br><span class="line">at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)</span><br><span class="line">at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:413)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class="line">at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line"></span><br><span class="line">Disconnected from the target VM, address: '127.0.0.1:60454', transport: 'socket'</span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br></pre></td></tr></table></figure><p>起初以为是ZooKeeper服务部署有问题或服务没启动，经检查确认无误后，debug调试发现，是SESSION_TIME_OUT = 2000;设置的值太小，改为10000后，不再报错。</p><blockquote><p>SESSION_TIME_OUT 是<code>会话超时时间</code>，也就是当一个zookeeper超过该时间没有心跳，则认为该节点故障。所以，如果此值小于zookeeper的创建时间，则当zookeeper还未来得及创建连接，会话时间已到，因此抛出异常认为该节点故障。</p></blockquote><h3 id="3-1-创建会话"><a href="#3-1-创建会话" class="headerlink" title="3.1 创建会话"></a>3.1 创建会话</h3><p>通过创建一个ZooKeeper实例来连接ZooKeeper服务器（详见<a href="https://blog.csdn.net/hyg0811/article/details/103403658" target="_blank" rel="noopener">ZooKeeper单机版、伪集群和集群环境搭建</a>）。</p><p>官方提供了10种ZooKeeper构造方法和描述如下：</p><table><thead><tr><th>Constructor</th><th>Description</th></tr></thead><tbody><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, boolean canBeReadOnly)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, boolean canBeReadOnly, HostProvider aHostProvider)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, boolean canBeReadOnly, HostProvider aHostProvider, ZKClientConfig clientConfig)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, boolean canBeReadOnly, ZKClientConfig conf)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, long sessionId, byte[] sessionPasswd)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, long sessionId, byte[] sessionPasswd, boolean canBeReadOnly)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, long sessionId, byte[] sessionPasswd, boolean canBeReadOnly, HostProvider aHostProvider)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, long sessionId, byte[] sessionPasswd, boolean canBeReadOnly, HostProvider aHostProvider, ZKClientConfig clientConfig)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr><tr><td>ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, ZKClientConfig conf)</td><td>To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</td></tr></tbody></table><p>关于每种构造方法的英文描述用词都很简单，基本都能看的很明白，根据实际的应用场景选取相应的构造方法。</p><p>有传入参数中包括sessionId和sessionPasswd的构造方法，分别代表<code>会话ID</code>和<code>会话密钥</code>。这两个参数能够唯一确定一个会话，同时客户端使用这两个参数可以<code>实现客户端会话复用</code>，从而达到恢复会话的效果。具体使用方法是第一次连接上ZooKeeper服务器时，通过调用ZooKeeper对象实例的以下两个接口，即可获取当前会话的ID和密钥：long getSessionId();  byte[] getSessionPasswd();获取到这两个参数值之后，就可以在下次创建ZooKeeper对象实例的时候传入构造方法了。</p><p>选取几个典型的构造方法来带领大家解读下文档。</p><h4 id="3-1-1-ZooKeeper-String-connectString-int-sessionTimeout-Watcher-watcher"><a href="#3-1-1-ZooKeeper-String-connectString-int-sessionTimeout-Watcher-watcher" class="headerlink" title="3.1.1 ZooKeeper(String connectString, int sessionTimeout, Watcher watcher)"></a>3.1.1 ZooKeeper(String connectString, int sessionTimeout, Watcher watcher)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> sessionTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                 Watcher watcher)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">          </span></span><br><span class="line"><span class="function">To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</span></span><br><span class="line"><span class="function">Session establishment is asynchronous. This constructor will initiate connection to the server and return immediately - <span class="title">potentially</span> <span class="params">(usually)</span> before the session is fully established. The watcher argument specifies the watcher that will be notified of any changes in state. This notification can come at any point before or after the constructor call has returned.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">The instantiated ZooKeeper client object will pick an arbitrary server from the connectString and attempt to connect to it. If establishment of the connection fails, another server in the connect string will be <span class="title">tried</span> <span class="params">(the order is non-deterministic, as we random shuffle the list)</span>, until a connection is established. The client will <span class="keyword">continue</span> attempts until the session is explicitly closed.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Added in 3.2.0: An optional "chroot" suffix may also be appended to the connection string. This will run the client commands <span class="keyword">while</span> interpreting all paths relative to <span class="keyword">this</span> <span class="title">root</span> <span class="params">(similar to the unix chroot command)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">connectString - comma separated host:port pairs, each corresponding to a zk server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002" If the optional chroot suffix is used the example would look like: "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a" where the client would be rooted at "/app/a" and all paths would be relative to <span class="keyword">this</span> root - ie getting/setting/etc... "/foo/bar" would result in operations being run on "/app/a/foo/bar" <span class="params">(from the server perspective)</span>.</span></span><br><span class="line"><span class="function">sessionTimeout - session timeout in milliseconds</span></span><br><span class="line"><span class="function">watcher - a watcher object which will be notified of state changes, may also be notified <span class="keyword">for</span> node events</span></span><br><span class="line"><span class="function">Throws:</span></span><br><span class="line"><span class="function">IOException - in cases of network failure</span></span><br><span class="line"><span class="function">IllegalArgumentException - <span class="keyword">if</span> an invalid chroot path is specified</span></span><br></pre></td></tr></table></figure><p>有一点需要特别说明下，文档说客户端和服务端建立会话是<code>异步</code>的。构造方法会在处理完客户端初始化工作后立即返回，在通常情况下，此时并没有真正建立好一个可用的会话，此时在会话的生命周期中处于“CONNECTING”的状态。当该会话真正创建完毕后，ZooKeeper服务端会向会话对应的客户端发送一个事件通知，以告知客户端，客户端只有在获取这个通知后，才算真正建立了会话。</p><p>实例化的ZooKeeper客户端对象将从connectString列举的服务器中<code>随机</code>选择一个服务器，并尝试连接到该服务器。如果建立连接失败，将尝试连接另一个服务器（<code>顺序是不确定的</code>，因为列举的服务器是随机洗牌的），直到建立连接。即客户端连接一个服务器失败，将继续尝试，直到会话显式关闭。</p><p>从<code>3.2.0版本</code>开始添加了可选的”chroot”后缀，意思就是可将“chroot”加在connectString中列举的服务器后面，即客户端连上ZooKeeper服务器后，所有对ZooKeeper的操作都会基于这个<code>根目录</code>。</p><p>对参数做下简要说明：<br>| 参数 | 描述 |<br>|–|–|<br>| connectString | 指定ZooKeeper服务器列表，有英文逗号分隔的host：port字符串组成，如”127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002”。可以指定客户端连上connectString中服务器后的根目录，如 “127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a” ，<code>对ZooKeeper的操作都会基于/app/a这个根目录，即创建路径为&quot;/foo/bar&quot;的节点，实际该节点的路径为&quot;/app/a/foo/bar&quot;</code> 。|<br>|sessionTimeout|会话的超时事件，以“毫秒”为单位的整型值。在一个会话周期内，ZooKeeper客户端和服务器之间会通过心跳检测机制来维持会话的有效性，一旦在sessionTimeout时间内没有进行有效的心跳检测，会话就会失效。|<br>|watcher|ZooKeeper允许客户端在构造方法中传入一个接口Watcher（org.apache.zookeeper.Watcher）的实现类对象来作为默认的Watch事件通知器。<strong>该参数也可以设置为<code>null</code>，表明不需要设置默认的Watch处理器。</strong>|</p><h4 id="3-1-2-ZooKeeper-String-connectString-int-sessionTimeout-Watcher-watcher-boolean-canBeReadOnly"><a href="#3-1-2-ZooKeeper-String-connectString-int-sessionTimeout-Watcher-watcher-boolean-canBeReadOnly" class="headerlink" title="3.1.2 ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, boolean canBeReadOnly)"></a>3.1.2 ZooKeeper(String connectString, int sessionTimeout, Watcher watcher, boolean canBeReadOnly)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">int</span> sessionTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                 Watcher watcher,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">boolean</span> canBeReadOnly)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">          </span></span><br><span class="line"><span class="function">To create a ZooKeeper client object, the application needs to pass a connection string containing a comma separated list of host:port pairs, each corresponding to a ZooKeeper server.</span></span><br><span class="line"><span class="function">Session establishment is asynchronous. This constructor will initiate connection to the server and return immediately - <span class="title">potentially</span> <span class="params">(usually)</span> before the session is fully established. The watcher argument specifies the watcher that will be notified of any changes in state. This notification can come at any point before or after the constructor call has returned.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">The instantiated ZooKeeper client object will pick an arbitrary server from the connectString and attempt to connect to it. If establishment of the connection fails, another server in the connect string will be <span class="title">tried</span> <span class="params">(the order is non-deterministic, as we random shuffle the list)</span>, until a connection is established. The client will <span class="keyword">continue</span> attempts until the session is explicitly closed.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Added in 3.2.0: An optional "chroot" suffix may also be appended to the connection string. This will run the client commands <span class="keyword">while</span> interpreting all paths relative to <span class="keyword">this</span> <span class="title">root</span> <span class="params">(similar to the unix chroot command)</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">connectString - comma separated host:port pairs, each corresponding to a zk server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002" If the optional chroot suffix is used the example would look like: "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002/app/a" where the client would be rooted at "/app/a" and all paths would be relative to <span class="keyword">this</span> root - ie getting/setting/etc... "/foo/bar" would result in operations being run on "/app/a/foo/bar" <span class="params">(from the server perspective)</span>.</span></span><br><span class="line"><span class="function">sessionTimeout - session timeout in milliseconds</span></span><br><span class="line"><span class="function">watcher - a watcher object which will be notified of state changes, may also be notified <span class="keyword">for</span> node events</span></span><br><span class="line"><span class="function">canBeReadOnly - <span class="params">(added in <span class="number">3.4</span>)</span> whether the created client is allowed to go to read-only mode in <span class="keyword">case</span> of partitioning. Read-only mode basically means that <span class="keyword">if</span> the client can't find any majority servers but there's partitioned server it could reach, it connects to one in read-only mode, i.e. read requests are allowed <span class="keyword">while</span> write requests are not. It continues seeking <span class="keyword">for</span> majority in the background.</span></span><br><span class="line"><span class="function">Throws:</span></span><br><span class="line"><span class="function">IOException - in cases of network failure</span></span><br><span class="line"><span class="function">IllegalArgumentException - <span class="keyword">if</span> an invalid chroot path is specified</span></span><br></pre></td></tr></table></figure><p>这个构造方法跟上个方法非常相似，只是从<code>3.4版本</code>开始多了一个<code>canBeReadOnly</code>参数，用于标识当前会话是否支持“read-only”模式（<code>只读模式</code>）。默认情况下，在ZooKeeper集群中，一个节点如果和集群中过半及以上节点失去网络连接（建立不了连接），那么这个机器将不再处理客户端请求（包括读写请求）。但是在某些使用场景下，当ZooKeeper服务器发生此类故障的时候，还是希望ZooKeeper服务器能够提供读服务（写服务肯定无法提供），这就是ZooKeeper的<code>“read-only”模式</code>。但客户端可以连接某一分区的服务器，它将以<strong>只读模式</strong>连接到其中一个服务器，允许读取请求，而不允许写入请求，然后继续在后台寻找更多数的服务器(<strong>这一句我描述的不够简练精准</strong>)。</p><h3 id="3-2-新增"><a href="#3-2-新增" class="headerlink" title="3.2 新增"></a>3.2 新增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">create</span><span class="params">(String path,</span></span></span><br><span class="line"><span class="function"><span class="params">                     <span class="keyword">byte</span>[] data,</span></span></span><br><span class="line"><span class="function"><span class="params">                     List&lt;ACL&gt; acl,</span></span></span><br><span class="line"><span class="function"><span class="params">                     CreateMode createMode)</span></span></span><br><span class="line"><span class="function">              <span class="keyword">throws</span> KeeperException,</span></span><br><span class="line"><span class="function">                     InterruptedException</span></span><br><span class="line"><span class="function">                     </span></span><br><span class="line"><span class="function">Create a node with the given path. The node data will be the given data, and node acl will be the given acl.</span></span><br><span class="line"><span class="function">The flags argument specifies whether the created node will be ephemeral or not.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">An ephemeral node will be removed by the ZooKeeper automatically when the session associated with the creation of the node expires.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">The flags argument can also specify to create a sequential node. The actual path name of a sequential node will be the given path plus a suffix "i" where i is the current sequential number of the node. The sequence number is always fixed length of 10 digits, 0 padded. Once such a node is created, the sequential number will be incremented by one.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If a node with the same actual path already exists in the ZooKeeper, a KeeperException with error code KeeperException.NodeExists will be thrown. Note that since a different actual path is used <span class="keyword">for</span> each invocation of creating sequential node with the same path argument, the call will never throw "file exists" KeeperException.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If the parent node does not exist in the ZooKeeper, a KeeperException with error code KeeperException.NoNode will be thrown.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">An ephemeral node cannot have children. If the parent node of the given path is ephemeral, a KeeperException with error code KeeperException.NoChildrenForEphemerals will be thrown.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">This operation, <span class="keyword">if</span> successful, will trigger all the watches left on the node of the given path by exists and getData API calls, and the watches left on the parent node by getChildren API calls.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">If a node is created successfully, the ZooKeeper server will trigger the watches on the path left by exists calls, and the watches on the parent of the node by getChildren calls.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">The maximum allowable size of the data array is 1 <span class="title">MB</span> <span class="params">(<span class="number">1</span>,<span class="number">048</span>,<span class="number">576</span> bytes)</span>. Arrays larger than <span class="keyword">this</span> will cause a KeeperExecption to be thrown.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">path - the path <span class="keyword">for</span> the node</span></span><br><span class="line"><span class="function">data - the initial data <span class="keyword">for</span> the node</span></span><br><span class="line"><span class="function">acl - the acl <span class="keyword">for</span> the node</span></span><br><span class="line"><span class="function">createMode - specifying whether the node to be created is ephemeral and/or sequential</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">the actual path of the created node</span></span><br><span class="line"><span class="function">Throws:</span></span><br><span class="line"><span class="function">KeeperException - <span class="keyword">if</span> the server returns a non-zero error code</span></span><br><span class="line"><span class="function">KeeperException.InvalidACLException - <span class="keyword">if</span> the ACL is invalid, <span class="keyword">null</span>, or empty</span></span><br><span class="line"><span class="function">InterruptedException - <span class="keyword">if</span> the transaction is interrupted</span></span><br><span class="line"><span class="function">IllegalArgumentException - <span class="keyword">if</span> an invalid path is specified</span></span><br></pre></td></tr></table></figure><p>Talk is cheap. Show me the code.这里我们不瞎BB，直接上官方文档。官方文档是不是很容易看懂，而且解释的非常清楚（而且稍显啰嗦的感觉）？</p><p><strong>这里简单列下文档中的几个关键点</strong>：</p><ol><li><p>按指定路径和节点形式创建，可指定节点为持久节点、临时节点等。<br>这里要说下<code>CreateMode</code>,大家可能都说ZooKeeper只有4种形式的节点（持久、临时、持久顺序、临时顺序），看文档的话，其实是有<code>7种</code>形式的。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">enum</span> CreateMode &#123;</span><br><span class="line">    PERSISTENT(<span class="number">0</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>),</span><br><span class="line">    PERSISTENT_SEQUENTIAL(<span class="number">2</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>),</span><br><span class="line">    EPHEMERAL(<span class="number">1</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>),</span><br><span class="line">    EPHEMERAL_SEQUENTIAL(<span class="number">3</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>),</span><br><span class="line">    CONTAINER(<span class="number">4</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>),</span><br><span class="line">    PERSISTENT_WITH_TTL(<span class="number">5</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>),</span><br><span class="line">    PERSISTENT_SEQUENTIAL_WITH_TTL(<span class="number">6</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>PERSISTENT：持久节点（也有叫永久节点的），不会随着会话的结束而自动删除。</li><li>PERSISTENT_SEQUENTIAL：带单调递增序号的持久节点，不会随着会话的结束而自动删除。</li><li>EPHEMERAL：临时节点，会随着会话的结束而自动删除。</li><li>EPHEMERAL_SEQUENTIAL：带单调递增序号的临时节点，会随着会话的结束而自动删除。</li><li><code>CONTAINER</code>：容器节点，用于Leader、Lock等特殊用途，当容器节点不存在任何子节点时，容器将成为服务器在将来某个时候删除的候选节点。</li><li><code>PERSISTENT_WITH_TTL</code>：带TTL（time-to-live，存活时间）的持久节点，节点在TTL时间之内没有得到更新并且没有子节点，就会被自动删除。</li><li><code>PERSISTENT_SEQUENTIAL_WITH_TTL</code>：带TTL（time-to-live，存活时间）和单调递增序号的持久节点，节点在TTL时间之内没有得到更新并且没有子节点，就会被自动删除。</li></ul><ol start="2"><li>如果指令路径和版本的节点已经存在，则会抛出一个KeeperException异常。</li><li><code>临时节点不能有子节点</code>。如果给临时节点创建子节点会抛KeeperException异常。</li><li>临时节点的生命周期与客户端会话绑定。<strong>一旦客户端会话失效（客户端与 Zookeeper连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除</strong>。</li><li><code>byte[] data允许的最大数据量为1MB（1,048,576 bytes）</code>。如果超过，会抛KeeperExecption。</li></ol></li></ol><p>运行创建节点的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreate</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    zk.create(ZNODE_PATH, <span class="string">"anna2019"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过日志信息得到节点创建成功：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG org.apache.zookeeper.ClientCnxn - Reading reply sessionid:0x101402626bb000b, packet:: clientPath:null serverPath:null finished:false header:: 1,1  replyHeader:: 1,12884901937,0  request:: '/zk_demo,#616e6e6132303139,v&#123;s&#123;31,s&#123;'world,'anyone&#125;&#125;&#125;,0  response:: '/zk_demo</span><br></pre></td></tr></table></figure><p>在服务端查看,/zk_demo节点创建成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 21] ls /</span><br><span class="line">[zookeeper, zk_demo]</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 22] stat /zk_demo</span><br><span class="line">cZxid = 0x300000031</span><br><span class="line">ctime = Tue Dec 17 12:52:50 CST 2019</span><br><span class="line">mZxid = 0x300000031</span><br><span class="line">mtime = Tue Dec 17 12:52:50 CST 2019</span><br><span class="line">pZxid = 0x300000031</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 8</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><h3 id="3-3-获取"><a href="#3-3-获取" class="headerlink" title="3.3 获取"></a>3.3 获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getData(String path,</span><br><span class="line">                      <span class="keyword">boolean</span> watch,</span><br><span class="line">                      Stat stat)</span><br><span class="line">               <span class="keyword">throws</span> KeeperException,</span><br><span class="line">                      InterruptedException</span><br><span class="line"></span><br><span class="line">Return the data and the stat of the node of the given path.</span><br><span class="line"><span class="function">If the watch is <span class="keyword">true</span> and the call is <span class="title">successful</span> <span class="params">(no exception is thrown)</span>, a watch will be left on the node with the given path. The watch will be triggered by a successful operation that sets data on the node, or deletes the node.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">A KeeperException with error code KeeperException.NoNode will be thrown <span class="keyword">if</span> no node with the given path exists.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">path - the given path</span></span><br><span class="line"><span class="function">watch - whether need to watch <span class="keyword">this</span> node</span></span><br><span class="line"><span class="function">stat - the stat of the node</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">the data of the node</span></span><br><span class="line"><span class="function">Throws:</span></span><br><span class="line"><span class="function">KeeperException - If the server signals an error with a non-zero error code</span></span><br><span class="line"><span class="function">InterruptedException - If the server transaction is interrupted.</span></span><br></pre></td></tr></table></figure><p>指定路径的节点不存在时就抛KeeperException.NoNode异常。</p><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] data1 = zk.getData(ZNODE_PATH, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] data2 = zk.getData(ZNODE_PATH_PARENT, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] data3 = zk.getData(ZNODE_PATH_CHILDREN, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125;的信息：&#123;&#125;"</span>, ZNODE_PATH, <span class="keyword">new</span> String(data1) );</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125;的信息：&#123;&#125;"</span>, ZNODE_PATH_PARENT, <span class="keyword">new</span> String(data2) );</span><br><span class="line">    LOGGER.info(<span class="string">"&#123;&#125;的信息：&#123;&#125;"</span>, ZNODE_PATH_CHILDREN, <span class="keyword">new</span> String(data3) );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">13:51:00.288 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - /zk_demo的信息：anna2019</span><br><span class="line">13:51:00.288 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - /app1的信息：anna2019</span><br><span class="line">13:51:00.289 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - /app1/app1_1的信息：anna2020</span><br></pre></td></tr></table></figure><h3 id="3-4-更新"><a href="#3-4-更新" class="headerlink" title="3.4 更新"></a>3.4 更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Stat <span class="title">setData</span><span class="params">(String path,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">byte</span>[] data,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">int</span> version)</span></span></span><br><span class="line"><span class="function">             <span class="keyword">throws</span> KeeperException,</span></span><br><span class="line"><span class="function">                    InterruptedException</span></span><br><span class="line"><span class="function">                    </span></span><br><span class="line"><span class="function">Set the data <span class="keyword">for</span> the node of the given path <span class="keyword">if</span> such a node exists and the given version matches the version of the <span class="title">node</span> <span class="params">(<span class="keyword">if</span> the given version is <span class="number">-1</span>, it matches any node<span class="string">'s versions). Return the stat of the node.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">This operation, if successful, will trigger all the watches on the node of the given path left by getData calls.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">A KeeperException with error code KeeperException.NoNode will be thrown if no node with the given path exists.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">A KeeperException with error code KeeperException.BadVersion will be thrown if the given version does not match the node'</span>s version.</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">The maximum allowable size of the data array is <span class="number">1</span> MB (<span class="number">1</span>,<span class="number">048</span>,<span class="number">576</span> bytes)</span>. Arrays larger than <span class="keyword">this</span> will cause a KeeperException to be thrown.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">path - the path of the node</span></span><br><span class="line"><span class="function">data - the data to set</span></span><br><span class="line"><span class="function">version - the expected matching version</span></span><br><span class="line"><span class="function">Returns:</span></span><br><span class="line"><span class="function">the state of the node</span></span><br><span class="line"><span class="function">Throws:</span></span><br><span class="line"><span class="function">InterruptedException - If the server transaction is interrupted.</span></span><br><span class="line"><span class="function">KeeperException - If the server signals an error with a non-zero error code.</span></span><br><span class="line"><span class="function">IllegalArgumentException - <span class="keyword">if</span> an invalid path is specified</span></span><br></pre></td></tr></table></figure><p>主要注意以下几点：</p><ol><li>版本为-1时，即代表适配指定路径节点的所有版本。</li><li>如果指定路径的节点不存在会抛<strong>KeeperException.NoNode</strong>异常，该节点没有传入的版本，会抛<strong>KeeperException.BadVersion</strong>异常。</li><li><code>byte[] data允许的最大数据量为1MB（1,048,576 bytes）</code>。如果超过，会抛KeeperExecption。</li></ol><p>运行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    Stat stat = zk.setData(ZNODE_PATH, <span class="string">"yuanrengu"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] data = zk.getData(ZNODE_PATH, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    LOGGER.info(<span class="keyword">new</span> String(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到数据已经更新：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15:46:16.472 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - yuanrengu</span><br></pre></td></tr></table></figure><p>更新的接口提到了版本的概念，上面提到版本为-1时，即代表适配指定路径节点的所有版本。<code>节点每次setData时版本会加1，更新时指定的版本不存在会报KeeperException.BadVersion异常</code>。我们做个测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSetForVersion</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    String pathVersion = <span class="string">"/versionDemo"</span>;</span><br><span class="line">    zk.create(pathVersion, <span class="string">"yuanrengu2019"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line"></span><br><span class="line">    Stat stat = zk.setData(pathVersion, <span class="string">"yuanrengu2020"</span>.getBytes(), -<span class="number">1</span>);</span><br><span class="line">    LOGGER.info(<span class="string">"============1111111  start======================"</span>);</span><br><span class="line">    LOGGER.info(String.valueOf(stat));</span><br><span class="line">    LOGGER.info(<span class="string">"version:&#123;&#125;"</span>, stat.getVersion());</span><br><span class="line">    <span class="keyword">byte</span>[] data1 = zk.getData(pathVersion, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    LOGGER.info(<span class="string">"data1:&#123;&#125;"</span>, <span class="keyword">new</span> String(data1));</span><br><span class="line">    LOGGER.info(<span class="string">"============1111111  end======================"</span>);</span><br><span class="line"></span><br><span class="line">    Stat stat2 = zk.setData(pathVersion, <span class="string">"yuanrengu2021"</span>.getBytes(), stat.getVersion());</span><br><span class="line">    LOGGER.info(<span class="string">"============222222  start======================"</span>);</span><br><span class="line">    LOGGER.info(String.valueOf(stat2));</span><br><span class="line">    LOGGER.info(<span class="string">"version2:&#123;&#125;"</span>, stat2.getVersion());</span><br><span class="line">    <span class="keyword">byte</span>[] data2 = zk.getData(pathVersion, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    LOGGER.info(<span class="string">"data2:&#123;&#125;"</span>, <span class="keyword">new</span> String(data2));</span><br><span class="line">    LOGGER.info(<span class="string">"============222222  end======================"</span>);</span><br><span class="line"></span><br><span class="line">    Stat stat3 = zk.setData(pathVersion, <span class="string">"yuanrengu2022"</span>.getBytes(), stat.getVersion());</span><br><span class="line">    LOGGER.info(<span class="string">"============3333333  start======================"</span>);</span><br><span class="line">    LOGGER.info(String.valueOf(stat3));</span><br><span class="line">    LOGGER.info(<span class="string">"version3:&#123;&#125;"</span>, stat3.getVersion());</span><br><span class="line">    <span class="keyword">byte</span>[] data3 = zk.getData(pathVersion, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">    LOGGER.info(<span class="string">"data3:&#123;&#125;"</span>, <span class="keyword">new</span> String(data3));</span><br><span class="line">    LOGGER.info(<span class="string">"============3333333  end======================"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">09:56:00.931 [main-SendThread(106.12.111.172:2181)] DEBUG org.apache.zookeeper.ClientCnxn - Reading reply sessionid:0x1014dce26220008, packet:: clientPath:null serverPath:null finished:false header:: 1,5  replyHeader:: 1,12884902005,0  request:: '/versionDemo,#7975616e72656e677532303230,-1  response:: s&#123;12884901996,12884902005,1576720362715,1576720560918,1,0,0,0,13,0,12884901996&#125; </span><br><span class="line">09:56:00.940 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - ============1111111  start======================</span><br><span class="line">09:56:00.941 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - 12884901996,12884902005,1576720362715,1576720560918,1,0,0,0,13,0,12884901996</span><br><span class="line"></span><br><span class="line">09:56:00.942 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - version:1</span><br><span class="line">09:56:00.971 [main-SendThread(106.12.111.172:2181)] DEBUG org.apache.zookeeper.ClientCnxn - Reading reply sessionid:0x1014dce26220008, packet:: clientPath:null serverPath:null finished:false header:: 2,4  replyHeader:: 2,12884902005,0  request:: '/versionDemo,F  response:: #7975616e72656e677532303230,s&#123;12884901996,12884902005,1576720362715,1576720560918,1,0,0,0,13,0,12884901996&#125; </span><br><span class="line">09:56:00.971 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - data1:yuanrengu2020</span><br><span class="line">09:56:00.971 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - ============1111111  end======================</span><br><span class="line">09:56:00.988 [main-SendThread(106.12.111.172:2181)] DEBUG org.apache.zookeeper.ClientCnxn - Reading reply sessionid:0x1014dce26220008, packet:: clientPath:null serverPath:null finished:false header:: 3,5  replyHeader:: 3,12884902006,0  request:: '/versionDemo,#7975616e72656e677532303231,1  response:: s&#123;12884901996,12884902006,1576720362715,1576720561002,2,0,0,0,13,0,12884901996&#125; </span><br><span class="line">09:56:00.988 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - ============222222  start======================</span><br><span class="line">09:56:00.988 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - 12884901996,12884902006,1576720362715,1576720561002,2,0,0,0,13,0,12884901996</span><br><span class="line"></span><br><span class="line">09:56:00.990 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - version2:2</span><br><span class="line">09:56:01.017 [main-SendThread(106.12.111.172:2181)] DEBUG org.apache.zookeeper.ClientCnxn - Reading reply sessionid:0x1014dce26220008, packet:: clientPath:null serverPath:null finished:false header:: 4,4  replyHeader:: 4,12884902006,0  request:: '/versionDemo,F  response:: #7975616e72656e677532303231,s&#123;12884901996,12884902006,1576720362715,1576720561002,2,0,0,0,13,0,12884901996&#125; </span><br><span class="line">09:56:01.017 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - data2:yuanrengu2021</span><br><span class="line">09:56:01.017 [main] INFO com.yuanrengu.demo.ZooKeeperDemo - ============222222  end======================</span><br><span class="line">09:56:01.037 [main-SendThread(106.12.111.172:2181)] DEBUG org.apache.zookeeper.ClientCnxn - Reading reply sessionid:0x1014dce26220008, packet:: clientPath:null serverPath:null finished:false header:: 5,5  replyHeader:: 5,12884902007,-103  request:: '/versionDemo,#7975616e72656e677532303232,1  response::  </span><br><span class="line"></span><br><span class="line">org.apache.zookeeper.KeeperException$BadVersionException: KeeperErrorCode = BadVersion for /versionDemo</span><br><span class="line"></span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:122)</span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.setData(ZooKeeper.java:2384)</span><br></pre></td></tr></table></figure><p>测试代码进行了3次setData操作，第一次setData时传入的版本为-1，成功后version变为1；第二次setData时传入的version为1，成功后version变为2；第三次setData时传入的版本为1，此时就抛了KeeperException.BadVersion异常。如果第三次setData传入的版本为-1，能更新成功。</p><h3 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String path,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">int</span> version)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> InterruptedException,</span></span><br><span class="line"><span class="function">                   KeeperException</span></span><br><span class="line"><span class="function">                   </span></span><br><span class="line"><span class="function">Delete the node with the given path. The call will succeed <span class="keyword">if</span> such a node exists, and the given version matches the node's <span class="title">version</span> <span class="params">(<span class="keyword">if</span> the given version is <span class="number">-1</span>, it matches any node<span class="string">'s versions).</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">A KeeperException with error code KeeperException.NoNode will be thrown if the nodes does not exist.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">A KeeperException with error code KeeperException.BadVersion will be thrown if the given version does not match the node'</span>s version.</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">A KeeperException with error code KeeperException.NotEmpty will be thrown <span class="keyword">if</span> the node has children.</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">This operation, <span class="keyword">if</span> successful, will trigger all the watches on the node of the given path left by exists API calls, and the watches on the parent node left by getChildren API calls.</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">Parameters:</span></span></span><br><span class="line"><span class="function"><span class="params">path - the path of the node to be deleted.</span></span></span><br><span class="line"><span class="function"><span class="params">version - the expected node version.</span></span></span><br><span class="line"><span class="function"><span class="params">Throws:</span></span></span><br><span class="line"><span class="function"><span class="params">InterruptedException - IF the server transaction is interrupted</span></span></span><br><span class="line"><span class="function"><span class="params">KeeperException - If the server signals an error with a non-zero return code.</span></span></span><br><span class="line"><span class="function"><span class="params">IllegalArgumentException - <span class="keyword">if</span> an invalid path is specified</span></span></span><br></pre></td></tr></table></figure><p>节点可能含有子节点，删除节点的操作有几点需要特别注意：</p><ol><li>版本为-1时，即代表适配指定路径节点的所有版本。</li><li>如果指定路径的节点不存在会抛KeeperException.NoNode异常，该节点没有传入的版本，会抛KeeperException.BadVersion异常。</li><li><code>如果节点含有子节点，删除父节点(parent node)时会抛KeeperException.NotEmpty异常。</code></li></ol><p><strong>在ZooKeeper中，只允许删子节点。如果一个节点存在一个或多个子节点，该节点就无法被直接删除，必须先删除所有子节点。</strong></p><p>/app1有子节点，我们做下删除操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  删除含有子节点的父节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteHasChildrenZnode</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 指定要删除的版本，-1表示删除所有版本</span></span><br><span class="line">    zk.delete(ZNODE_PATH_PARENT, -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到日志：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.apache.zookeeper.KeeperException$NotEmptyException: KeeperErrorCode = Directory not empty for /app1</span><br><span class="line"></span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:132)</span><br><span class="line">at org.apache.zookeeper.KeeperException.create(KeeperException.java:54)</span><br><span class="line">at org.apache.zookeeper.ZooKeeper.delete(ZooKeeper.java:1793)</span><br><span class="line">at com.yuanrengu.demo.ZooKeeperDemo.testDeleteHasChildrenZnode(ZooKeeperDemo.java:89)</span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><p>上面我们实现了节点的增、删、改、查的测试，后面的篇章会有更多好玩的用法，如实现分布式锁、配置中心等。</p><p>基于上面的分析，总结几个注意的点：</p><ol><li>节点有<code>7种形式</code>：</li></ol><ul><li>PERSISTENT：持久节点（也有叫永久节点的），不会随着会话的结束而自动删除。</li><li>PERSISTENT_SEQUENTIAL：带单调递增序号的持久节点，不会随着会话的结束而自动删除。</li><li>EPHEMERAL：临时节点，会随着会话的结束而自动删除。</li><li>EPHEMERAL_SEQUENTIAL：带单调递增序号的临时节点，会随着会话的结束而自动删除。</li><li><code>CONTAINER</code>：容器节点，用于Leader、Lock等特殊用途，当容器节点不存在任何子节点时，容器将成为服务器在将来某个时候删除的候选节点。</li><li><code>PERSISTENT_WITH_TTL</code>：带TTL（time-to-live，存活时间）的持久节点，节点在TTL时间之内没有得到更新并且没有子节点，就会被自动删除。</li><li><code>PERSISTENT_SEQUENTIAL_WITH_TTL</code>：带TTL（time-to-live，存活时间）和单调递增序号的持久节点，节点在TTL时间之内没有得到更新并且没有子节点，就会被自动删除。</li></ul><ol start="2"><li><strong>临时节点不能有子节点</strong>。如果给临时节点创建子节点会抛KeeperException异常。</li><li>临时节点的生命周期与客户端会话绑定。<strong>一旦客户端会话失效（客户端与 Zookeeper连接断开不一定会话失效），那么这个客户端创建的所有临时节点都会被移除</strong>。</li><li><code>byte[] data允许的最大数据量为1MB（1,048,576 bytes）</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;温馨提示&lt;/code&gt;：在这里我再次提个小要求，希望大家能习惯看&lt;strong&gt;官方文档&lt;/strong&gt;，文档虽然是英文但用词都比较简单，基本都能看懂文档表达的意思。&lt;strong&gt;授之以鱼不如授之以渔&lt;/strong&gt;的道理相信大家
      
    
    </summary>
    
    
      <category term="ZooKeeper" scheme="https://yuanrengu.com/categories/ZooKeeper/"/>
    
    
      <category term="Java" scheme="https://yuanrengu.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>【ZooKeeper系列】1.ZooKeeper单机版、伪集群和集群环境搭建</title>
    <link href="https://yuanrengu.com/2020/3bf330a5.html"/>
    <id>https://yuanrengu.com/2020/3bf330a5.html</id>
    <published>2020-01-09T08:23:00.000Z</published>
    <updated>2020-01-13T06:42:16.353Z</updated>
    
    <content type="html"><![CDATA[<p>ZooKeeper安装模式主要有3种：</p><ol><li>单机版（Standalone模式）模式：仅有一个ZooKeeper服务</li><li>伪集群模式：单机多个ZooKeeper服务</li><li>集群模式：多机多ZooKeeper服务</li></ol><h1 id="1-单机版（Standalone模式）安装"><a href="#1-单机版（Standalone模式）安装" class="headerlink" title="1 单机版（Standalone模式）安装"></a>1 单机版（Standalone模式）安装</h1><p>ZooKeeper官网下载地址：<a href="http://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">http://zookeeper.apache.org/releases.html#download</a></p><p>如图所示进行操作：<br><img src="https://img-blog.csdnimg.cn/20191205141109130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意一点，如果不想当小白鼠，<strong>请务必下稳定版（stable release）</strong>，非稳定版安装时可能出各种未知的异常。<br><img src="https://img-blog.csdnimg.cn/20191205141126635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以<code>3.4.14</code>版本为例，在<code>Centos系统</code>下进行安装,之前写一些软件的安装教程时，有人留言说希望把安装的步骤尽量详细化，包括安装路径也要带上，做到可以照着教程复制操作。这个要求有点，呵呵，满足你！</p><h2 id="1-1-下载安装包"><a href="#1-1-下载安装包" class="headerlink" title="1.1 下载安装包"></a>1.1 下载安装包</h2><p>输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><p>如下图：<br><img src="https://img-blog.csdnimg.cn/20191205151930120.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-2-解压安装包"><a href="#1-2-解压安装包" class="headerlink" title="1.2 解压安装包"></a>1.2 解压安装包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-zookeeper-3.4.14.tar.gz</span><br></pre></td></tr></table></figure><p>解压完成后，将解压包移动到/usr目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-zookeeper-3.4.14 /usr/</span><br></pre></td></tr></table></figure><p>并将apache-zookeeper-3.4.14重命名为zookeeper-3.4.14。</p><p>至此可以看到ZooKeeper的目录结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 zookeeper-3.4.14]# ls</span><br><span class="line">bin        data             ivy.xml      logs        README.md             zookeeper-3.4.14.jar      zookeeper-3.4.14.jar.sha1  zookeeper-docs  zookeeper-recipes</span><br><span class="line">build.xml  dist-maven       lib          NOTICE.txt  README_packaging.txt  zookeeper-3.4.14.jar.asc  zookeeper-client           zookeeper-it    zookeeper-server</span><br><span class="line">conf       ivysettings.xml  LICENSE.txt  pom.xml     src                   zookeeper-3.4.14.jar.md5  zookeeper-contrib          zookeeper-jute</span><br></pre></td></tr></table></figure><ul><li>bin目录——zk的可执行脚本目录，包括zk服务进程，zk客户端，等脚本。其中，.sh是Linux环境下的脚本，.cmd是Windows环境下的脚本。</li><li>conf目录——配置文件目录。zoo_sample.cfg为样例配置文件，需要修改为自己的名称，一般为zoo.cfg。log4j.properties为日志配置文件。</li></ul><h2 id="1-3-设置zoo-cfg"><a href="#1-3-设置zoo-cfg" class="headerlink" title="1.3 设置zoo.cfg"></a>1.3 设置zoo.cfg</h2><p>进入/usr/zookeeper-3.4.14/conf目录，可以看到zoo_sample.cfg，这是样例配置文件，需要修改为自己的，一般命令为zoo.cfg 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><p>可以看看zoo.cfg文件里的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to "0" to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure><p>看着好复杂的感觉，其实去掉注释后，就只有几行而已：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=/tmp/zookeeper</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><ul><li><strong>tickTime=2000</strong> ：通俗点叫<code>滴答时间</code>，就是心跳间隔，默认是2000毫秒，即每隔两秒心跳一次。<ul><li>tickTime用于客户端与服务器或服务器与服务器之间维持心跳的时间度量单位，即每隔tickTime会发送一次心跳。</li><li>心跳的<strong>作用</strong>：      <ul><li>监听机器的工作状态。</li><li>通过心跳来控制follower跟leader的通信时间，默认情况下他们（follower和leader）的会话时长是心跳间隔的两倍，即2 * tickTime。</li></ul></li></ul></li><li><strong>initLimit=10</strong>：follower在启动过程中，会从leader同步所有最新数据，然后确定自己能够对外服务的起始状态，leader允许follower在initLimit时间内完成工作。默认值是10，即10*tickTime。默认情况下不需要修改该配置项，随着ZooKeeper集群管理的数量不断增大，follower节点在启动的时候，从leader节点进行数据同步的时间也会相应变长，于是无法在较短的时间内完成数据同步，在这种情况下，需要适当调大这个参数。</li><li><strong>syncLimit=5</strong>：<strong>leader节点和follower节点进行心跳检测的最大延迟时间</strong>。在ZooKeeper集群中，leader节点会与所有的follower节点进行心跳检测来确认节点是否存活。默认值为5，即5*tickTime。</li><li><strong>dataDir=/tmp/zookeeper</strong>：ZooKeeper服务器存储快照文件的默认目录。/tmp目录下的文件可能被自动删除，容易丢失，需要修改存放目录。</li><li><strong>clientPort=2181</strong>: 客户端连接ZooKeeper服务器的端口。ZooKeeper会监听这个端口，接收客户端的访问请求。</li></ul><blockquote><p><code>温馨提示</code>:大家一定要学会看官方文档，去接收第一手资料。虽然是英文，但用词和语法都比较简单，很容易看懂。<br>官网介绍如下：</p><ul><li>tickTime : the basic time unit in milliseconds used by ZooKeeper. It is used to do heartbeats and the minimum session timeout will be twice the tickTime.</li><li>dataDir : the location to store the in-memory database snapshots and, unless specified otherwise, the transaction log of updates to the database.</li><li>clientPort : the port to listen for client connections</li></ul></blockquote><p>在zookeeper-3.4.14目录下创建<strong>data和logs文件</strong>，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 zookeeper-3.4.14]# mkdir data</span><br><span class="line">[root@instance-e5cf5719 zookeeper-3.4.14]# mkdir logs</span><br></pre></td></tr></table></figure><p><code>官方文档也有对此进行说明，指出在生产环境中ZooKeeper是会长期运行的，ZooKeeper的存储就需要专门的文件位置进行存储dataDir和logs。</code>data文件夹用于存放内存数据库快照，集群的myid文件也是存放在这个文件夹下。</p><blockquote><p>For long running production systems ZooKeeper storage must be managed externally (dataDir and logs).</p></blockquote><p>修改后的zoo.cfg如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"># The number of ticks that the initial </span><br><span class="line"># synchronization phase can take</span><br><span class="line">initLimit=10</span><br><span class="line"># The number of ticks that can pass between </span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line"># do not use /tmp for storage, /tmp here is just </span><br><span class="line"># example sakes.</span><br><span class="line"># dataDir=/tmp/zookeeper</span><br><span class="line"># 数据文件夹</span><br><span class="line">dataDir=/usr/zookeeper-3.4.14/data</span><br><span class="line"># 日志文件夹</span><br><span class="line">dataLogDir=/usr/zookeeper-3.4.14/logs</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2181</span><br><span class="line"># the maximum number of client connections.</span><br><span class="line"># increase this if you need to handle more clients</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line">#</span><br><span class="line"># Be sure to read the maintenance section of the </span><br><span class="line"># administrator guide before turning on autopurge.</span><br><span class="line">#</span><br><span class="line"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span><br><span class="line">#</span><br><span class="line"># The number of snapshots to retain in dataDir</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># Purge task interval in hours</span><br><span class="line"># Set to "0" to disable auto purge feature</span><br><span class="line">#autopurge.purgeInterval=1</span><br></pre></td></tr></table></figure><h2 id="1-4-启动"><a href="#1-4-启动" class="headerlink" title="1.4 启动"></a>1.4 启动</h2><p>进入ZooKeeper的bin目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 zookeeper-3.4.14]# cd bin/</span><br><span class="line">[root@instance-e5cf5719 bin]# ls</span><br><span class="line">README.txt  zkCleanup.sh  zkCli.cmd  zkCli.sh  zkEnv.cmd  zkEnv.sh  zkServer.cmd  zkServer.sh  zkTxnLogToolkit.cmd  zkTxnLogToolkit.sh  zookeeper.out</span><br></pre></td></tr></table></figure><ul><li><strong>zkCleanup.sh</strong> ：用于清理ZooKeeper的历史数据，包括事务日志文件与快照数据文件</li><li><strong>zkCli.sh</strong>：连接ZooKeeper服务器的命令行客户端</li><li><strong>zkEnv.sh</strong>：设置环境变量</li><li><strong>zkServer.sh</strong>：启动ZooKeeper服务器</li></ul><p>启动ZooKeeper：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p>成功启动如下图所示：<br><img src="https://img-blog.csdnimg.cn/20191205150301767.png" alt="在这里插入图片描述"><br>可以查看ZooKeeper的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure><p>状态信息如下图所示：<br><img src="https://img-blog.csdnimg.cn/20191205152611484.png" alt="在这里插入图片描述"><br>可以通过<code>help</code>看看./zkServer.sh下的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh help</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Usage: ./zkServer.sh &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>start</strong>: 启动，用于后台启动ZooKeeper服务器</li><li>start-foreground: 前台启动服务器</li><li><strong>stop</strong>：停止</li><li>restart：重启</li><li><strong>status</strong>：获取状态</li><li>upgrade：升级</li><li>print-cmd ： 打印ZooKeeper程序命令行及相关参数</li></ul><h2 id="1-5-连接ZooKeeper客户端"><a href="#1-5-连接ZooKeeper客户端" class="headerlink" title="1.5 连接ZooKeeper客户端"></a>1.5 连接ZooKeeper客户端</h2><p>进行连接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh -server 127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh -server &lt;ip&gt;:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>结果如下：<br><img src="https://img-blog.csdnimg.cn/20191205162814328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以通过<strong>help</strong>获取更多的相关命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 0] help</span><br><span class="line">ZooKeeper -server host:port cmd args</span><br><span class="line">stat path [watch]</span><br><span class="line">set path data [version]</span><br><span class="line">ls path [watch]</span><br><span class="line">delquota [-n|-b] path</span><br><span class="line">ls2 path [watch]</span><br><span class="line">setAcl path acl</span><br><span class="line">setquota -n|-b val path</span><br><span class="line">history </span><br><span class="line">redo cmdno</span><br><span class="line">printwatches on|off</span><br><span class="line">delete path [version]</span><br><span class="line">sync path</span><br><span class="line">listquota path</span><br><span class="line">rmr path</span><br><span class="line">get path [watch]</span><br><span class="line">create [-s] [-e] path data acl</span><br><span class="line">addauth scheme auth</span><br><span class="line">quit </span><br><span class="line">getAcl path</span><br><span class="line">close </span><br><span class="line">connect host:port</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>help</td><td>显示所有操作命令</td></tr><tr><td>stat</td><td>查看节点状态，即判断节点是否存在</td></tr><tr><td>set</td><td>更新节点数据</td></tr><tr><td>get</td><td>获取节点数据</td></tr><tr><td>ls path [watch]</td><td>使用 ls 命令来查看当前znode的内容</td></tr><tr><td>create</td><td>普通创建  ; <code>-s</code>  含有序列;<code>-e</code>  临时（重启或者超时消失）</td></tr><tr><td>delete</td><td>删除节点</td></tr><tr><td>rmr</td><td>递归删除节点</td></tr></tbody></table><p>可以对相关的命令进行一些简单的测试，先创建一个新znode（运行<code>create</code> /zk_test  my_data ），里面附带的信息为“my_data”.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 1] create /zk_test my_data</span><br><span class="line">Created /zk_test</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 2] ls /</span><br><span class="line">[zookeeper, zk_test]</span><br></pre></td></tr></table></figure><p>可以看到zk_test创建成功了。可以通过<code>get</code>命令看看zk_test节点里的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 3] get /zk_test</span><br><span class="line">my_data</span><br><span class="line">cZxid = 0x7</span><br><span class="line">ctime = Thu Dec 05 16:32:20 CST 2019</span><br><span class="line">mZxid = 0x7</span><br><span class="line">mtime = Thu Dec 05 16:32:20 CST 2019</span><br><span class="line">pZxid = 0x7</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 7</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>通过<code>set</code>可以修改zk_test里的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 4] set /zk_test junk</span><br><span class="line">cZxid = 0x7</span><br><span class="line">ctime = Thu Dec 05 16:32:20 CST 2019</span><br><span class="line">mZxid = 0x8</span><br><span class="line">mtime = Thu Dec 05 16:37:03 CST 2019</span><br><span class="line">pZxid = 0x7</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 0</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 5] get /zk_test</span><br><span class="line">junk</span><br><span class="line">cZxid = 0x7</span><br><span class="line">ctime = Thu Dec 05 16:32:20 CST 2019</span><br><span class="line">mZxid = 0x8</span><br><span class="line">mtime = Thu Dec 05 16:37:03 CST 2019</span><br><span class="line">pZxid = 0x7</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 4</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><p>通过<code>delete</code>可以删除节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 6] delete /zk_test</span><br><span class="line">[zk: 127.0.0.1:2181(CONNECTED) 7] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure><h1 id="2-伪集群搭建"><a href="#2-伪集群搭建" class="headerlink" title="2 伪集群搭建"></a>2 伪集群搭建</h1><p>我们搭建3个ZooKeeper来构建伪集群。上面我们已经搭建了zookeeper-3.4.14，现在将它复制两份，命名为zookeeper-3.4.14-1，zookeeper-3.4.14-2。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 usr]# cp -r zookeeper-3.4.14 zookeeper-3.4.14-1</span><br><span class="line">[root@instance-e5cf5719 usr]# cp -r zookeeper-3.4.14 zookeeper-3.4.14-2</span><br></pre></td></tr></table></figure><p>此时3个ZooKeeper文件是<strong>一模一样</strong>的，构建伪集群需要对每个ZooKeeper的配置文件做一点小修改。</p><p>对3个ZooKeeper中/conf/zoo.cfg进行修改，主要是修改3个位置：<code>端口号</code>、<code>日志路径</code>、<code>集群配置</code>。<br><img src="https://img-blog.csdnimg.cn/2019120610260151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src="https://img-blog.csdnimg.cn/20191206102607926.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191206102616274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在zoo.cfg配置中，添加了一组server配置，表示ZooKeeper集群中有3个节点，server的配置格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.<span class="tag">&lt;<span class="name">myid</span>&gt;</span>=<span class="tag">&lt;<span class="name">IP</span>&gt;</span>:<span class="tag">&lt;<span class="name">Port1</span>&gt;</span>:<span class="tag">&lt;<span class="name">Port2</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>myid</code>：是节点的编号，该编号的取值范围是1-255之间的整数，且<strong>在集群中必须唯一</strong>。</li><li><code>IP</code>：表示节点所在的IP地址，如在本地环境为127.0.0.1或localhost。</li><li><code>Port1</code>:leader节点与follower节点进行心跳检测与数据同步时所使用的端口。</li><li><code>Port2</code>：在进行leader选举的过程中，用于投票通信的端口。</li></ul><p><strong>如果是伪集群的配置方式，由于 ip 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，要给它们分配不同的端口号。</strong></p><p>在每个ZooKeeper文件的<code>/data</code>目录下分别创建一个<code>myid</code>文件，myid文件里只需有服务器编号（如1，2, 3）。</p><p>分别启动三个ZooKeeper服务（开启3个窗口来启动服务）。</p><p>结果如下：</p><ul><li>zookeeper-3.4.14</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><ul><li><p>zookeeper-3.4.14-1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14-1/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14-1/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure></li><li><p>zookeeper-3.4.14-2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14-2/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14-2/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure></li></ul><p>通过查看状态可以看到zookeeper-3.4.14-1是<code>leader</code>，zookeeper-3.4.14和zookeeper-3.4.14-2是<code>follower</code>。</p><p>可以参考官网的架构图来辅助理解。<br><img src="https://img-blog.csdnimg.cn/20191206174457832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly95dWFucmVuZ3UuYmxvZy5jc2RuLm5ldA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>将zookeeper-3.4.14-1停掉，来观察下leader的重新选举。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh stop</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14-1/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure><p>分别查看zookeeper-3.4.14和zookeeper-3.4.14-2的状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@instance-e5cf5719 bin]# ./zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/zookeeper-3.4.14-2/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure><p>可以看到zookeeper-3.4.14-2成为了leader。</p><h1 id="3-集群模式搭建"><a href="#3-集群模式搭建" class="headerlink" title="3 集群模式搭建"></a>3 集群模式搭建</h1><p>集群模式搭建跟伪集群非常相似，只是集群的ZooKeeper是部署在不同的机器，伪集群的ZooKeeper是部署在同一台机器，在对/conf/zoo.cfg进行修改时，因为是不同的机器（ip不同），可以不用修改端口号。除了这一点差别外，其它的搭建方式跟伪集群一模一样，就不做多介绍了。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><p>至此我们完成ZooKeeper单机版、伪集群和集群环境的搭建。在生产环境上为了确保ZooKeeper的高可用，务必要搭建集群环境。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ZooKeeper安装模式主要有3种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;单机版（Standalone模式）模式：仅有一个ZooKeeper服务&lt;/li&gt;
&lt;li&gt;伪集群模式：单机多个ZooKeeper服务&lt;/li&gt;
&lt;li&gt;集群模式：多机多ZooKeeper服务&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
    
      <category term="ZooKeeper" scheme="https://yuanrengu.com/categories/ZooKeeper/"/>
    
    
      <category term="单机版" scheme="https://yuanrengu.com/tags/%E5%8D%95%E6%9C%BA%E7%89%88/"/>
    
      <category term="伪集群" scheme="https://yuanrengu.com/tags/%E4%BC%AA%E9%9B%86%E7%BE%A4/"/>
    
      <category term="集群" scheme="https://yuanrengu.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
      <category term="环境搭建" scheme="https://yuanrengu.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>HashMap在Jdk1.7和1.8中的实现</title>
    <link href="https://yuanrengu.com/2020/ba184259.html"/>
    <id>https://yuanrengu.com/2020/ba184259.html</id>
    <published>2020-01-09T02:17:00.000Z</published>
    <updated>2020-01-15T14:51:14.738Z</updated>
    
    <content type="html"><![CDATA[<p>Java集合类的源码是深入学习Java非常好的素材，源码里很多优雅的写法和思路，会让人叹为观止。HashMap的源码尤为经典，是非常值得去深入研究的，jdk1.8中HashMap发生了比较大的变化，这方面的东西也是各个公司高频的考点。网上也有很多应对面试的标准答案，我之前也写过类似的面试技巧（，应付一般的面试应该是够了，但个人觉得这还是远远不够，毕竟我们不能只苟且于得到offer，更应去勇敢的追求诗和远方（源码）。</p><p>jdk版本目前更新的相对频繁，好多小伙伴说jdk1.7才刚真正弄明白，1.8就出现了，1.8还用都没开始用，更高的jdk版本就又发布了。很多小伙伴大声疾呼：臣妾真的学不动啦！这也许就是技术的最大魅力吧，活到老学到老，没有人能说精通所有技术。不管jdk版本如何更新，目前jdk1.7和1.8还是各个公司的主力版本。不管是否学得动，难道各位小伙伴忘记了《倚天屠龙记》里九阳真经里的口诀：他强由他强，清风拂山岗；他横由他横，明月照大江。他自狠来他自恶，我自一口真气足。（原谅我插入广告缅怀金庸大师，年少时期读的最多的书就是金庸大师的，遍布侠骨柔情大义啊）。这里的“真气”就是先掌握好jdk1.7和1.8，其它学不动的版本以后再说。</p><h1 id="一、初窥HashMap"><a href="#一、初窥HashMap" class="headerlink" title="一、初窥HashMap"></a>一、初窥HashMap</h1><p>HashMap是应用更广泛的<code>哈希表</code>实现，而且大部分情况下，都能在常数时间性能的情况下进行put和get操作。要掌握HashMap，主要从如下几点来把握：</p><ul><li>jdk1.7中底层是由<strong>数组（也有叫做“位桶”的）+链表</strong>实现；jdk1.8中底层是由<strong>数组+链表/红黑树</strong>实现</li><li>可以存储null键和null值，线程不安全</li><li>初始size为<strong>16</strong>，扩容：newsize = oldsize*2，<code>size一定为2的n次幂</code></li><li>扩容针对整个Map，每次扩容时，原来数组中的元素依次重新计算存放位置，并重新插入</li><li>插入元素后才判断该不该扩容，有可能无效扩容（插入后如果扩容，如果没有再次插入，就会产生无效扩容）</li><li>当Map中元素总数超过Entry数组的75%，触发扩容操作，为了减少链表长度，元素分配更均匀</li><li>1.7中是<strong>先扩容后插入</strong>新值的，1.8中是<strong>先插值再扩容</strong></li></ul><p><code>为什么说HashMap是线程不安全的？</code>在接近临界点时，若此时两个或者多个线程进行put操作，都会进行resize（扩容）和reHash（为key重新计算所在位置），而reHash在并发的情况下可能会形成<code>链表环</code>。总结来说就是在多线程环境下，使用HashMap进行put操作会引起死循环，导致CPU利用率接近100%，所以在并发情况下不能使用HashMap。为什么在并发执行put操作会引起死循环？是因为多线程会导致HashMap的Entry链表形成环形数据结构，一旦形成环形数据结构，Entry的next节点永远不为空，就会产生死循环获取Entry。jdk1.7的情况下，并发扩容时容易形成链表环，此情况在1.8时就好太多太多了。因为在1.8中当链表长度大于阈值（默认长度为8）时，链表会被改成树形（红黑树）结构。</p><h1 id="二、jdk1-7中HashMap的实现"><a href="#二、jdk1-7中HashMap的实现" class="headerlink" title="二、jdk1.7中HashMap的实现"></a>二、jdk1.7中HashMap的实现</h1><p>HashMap底层维护的是数组+链表，我们可以通过一小段源码来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">  *  即 默认初始大小，值为16</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">  * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">  * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">  *  即 最大容量，必须为2^30</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">  * 负载因子为0.75</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">  * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">  * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">  * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">  * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">  * shrinkage.</span></span><br><span class="line"><span class="comment">  * 大致意思就是说hash冲突默认采用单链表存储，当单链表节点个数大于8时，会转化为红黑树存储</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">  * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">  * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">  * hash冲突默认采用单链表存储，当单链表节点个数大于8时，会转化 </span></span><br><span class="line"><span class="comment">     为红黑树存储。</span></span><br><span class="line"><span class="comment">* 当红黑树中节点少于6时，则转化为单链表存储</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">  * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">  * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">  * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">  * hash冲突默认采用单链表存储，当单链表节点个数大于8时，会转化为红黑树存储。</span></span><br><span class="line"><span class="comment">  * 但是有一个前提：要求数组长度大于64，否则不会进行转化</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p>通过以上代码可以看出初始容量（16）、负载因子以及对数组的说明。数组中的每一个元素其实就是<strong>Entry&lt;K,V&gt;[] table</strong>，Map中的key和value就是以Entry的形式存储的。Entry包含四个属性：key、value、hash值和用于单向链表的next。关于Entry&lt;K,V&gt;的具体定义参看如下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">int</span> hash;</span><br><span class="line"> </span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        Object k1 = getKey();</span><br><span class="line">        Object k2 = e.getKey();</span><br><span class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">            Object v1 = getValue();</span><br><span class="line">            Object v2 = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked whenever the value in an entry is</span></span><br><span class="line"><span class="comment">     * overwritten by an invocation of put(k,v) for a key k that's already</span></span><br><span class="line"><span class="comment">     * in the HashMap.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked whenever the entry is</span></span><br><span class="line"><span class="comment">     * removed from the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当向 HashMap 中 <code>put</code>一对键值时，它会根据 key的 hashCode 值计算出一个位置， 该位置就是此对象准备往数组中存放的位置。 该计算过程参看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> hashSeed = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">         <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     h ^= k.hashCode();</span><br><span class="line"> </span><br><span class="line">     <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">     <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">     <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">     h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">     <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns index for hash code h.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过hash计算出来的值将会使用<strong>indexFor</strong>方法找到它应该所在的table下标。当两个key通过hashCode计算相同时，则发生了hash冲突(碰撞)，HashMap解决hash冲突的方式是用链表(<strong>拉链法</strong>)。当发生hash冲突时，则将存放在数组中的Entry设置为新值的next（这里要注意的是，比如A和B都hash后都映射到下标i中，之前已经有A了，当map.put(B)时，将B放到下标i中，A则为B的next，所以新值存放在数组中，旧值在新值的链表上）。<code>即将新值作为此链表的头节点</code>，为什么要这样操作？据说后插入的Entry被查找的可能性更大（因为get查询的时候会遍历整个链表），此处有待考究，如果有哪位大神知道，请留言告知。有一种说法就是链表查找复杂度高，可插入和删除性能高，如果将新值插在末尾，就需要先经过一轮遍历，这个时间复杂度高，开销大，如果是插在头结点，省去了遍历的开销，还发挥了链表插入性能高的优势。</p><p><strong>如果该位置没有对象存在，就将此对象直接放进数组当中；如果该位置已经有对象存在了，则顺着此存在的对象的链开始寻找(为了判断是否值相同，map不允许&lt;key,value&gt;键值对重复)， 如果此链上有对象的话，再去使用 equals方法进行比较，如果对此链上的每个对象的 equals 方法比较都为 false，则将该对象放到数组当中，然后将数组中该位置以前存在的那个对象链接到此对象的后面。</strong>  </p><p><code>添加节点到链表中</code>：找到数组下标后，会先进行key判重，如果没有重复，就准备将新值放入到链表的表头。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果当前 HashMap 大小已经达到了阈值，并且新值要插入的数组位置已经有元素了，那么要扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">// 扩容</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        <span class="comment">// 扩容以后，重新计算 hash 值</span></span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 重新计算扩容后的新的下标</span></span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 往下看</span></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个很简单，其实就是将新值放到链表的表头，然后 size++</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的主要逻辑就是先判断是否需要扩容，需要带的话先扩容，然后再将这个新的数据插入到扩容后的数组的相应位置处的链表的表头。</p><p>扩容就是用一个新的大数组替换原来的小数组，并将原来数组中的值迁移到新的数组中。由于是双倍扩容，迁移过程中，会将原来table[i]中的链表的所有节点，分拆到新的数组的newTable[i]和newTable[i+oldLength]位置上。如原来数组长度是16，那么扩容后，原来table[0]处的链表中的所有元素会被分配到新数组中newTable[0]和newTable[16]这两个位置。扩容期间，由于会新建一个新的空数组，并且用旧的项填充到这个新的数组中去。所以，在这个填充的过程中，如果有线程获取值，很可能会取到 null 值，而不是我们所希望的、原来添加的值。</p><p><img src="http://q3uf07rrb.bkt.clouddn.com/img/20200114094745.png" alt></p><p>图中，左边部分即代表哈希表，也称为哈希数组（默认数组大小是16，每对key-value键值对其实是存在map的内部类entry里的），<strong>数组的每个元素都是一个单链表的<code>头节点</code></strong>，跟着的蓝色链表是用来解决冲突的，如果不同的key映射到了数组的同一位置处，就将其放入单链表中。</p><p>前面说过HashMap的key是允许为null的，当出现这种情况时，会放到table[0]中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当size&gt;=threshold（ threshold等于“容量<em>负载因子”）时，会发生*</em>扩容**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>jdk1.7中resize，只有当 size&gt;=threshold并且 table中的那个槽中已经有Entry时，才会发生resize</code>。即有可能虽然size&gt;=threshold，但是必须等到相应的槽至少有一个Entry时，才会扩容,可以通过上面的代码看到每次resize都会扩大一倍容量（2 * table.length）。</p><h1 id="三、jdk1-8中HashMap的实现"><a href="#三、jdk1-8中HashMap的实现" class="headerlink" title="三、jdk1.8中HashMap的实现"></a>三、jdk1.8中HashMap的实现</h1><p>在jdk1.8中HashMap的内部结构可以看作是数组(Node&lt;K,V&gt;[] table)和链表的复合结构，数组被分为一个个桶（bucket），通过哈希值决定了键值对在这个数组中的寻址（哈希值相同的键值对，则以链表形式存储。有一点需要注意，如果链表大小超过阈值（TREEIFY_THRESHOLD,8），图中的链表就会被改造为树形（红黑树）结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>Entry的名字变成了Node，原因是和红黑树的实现TreeNode相关联。<strong>1.8与1.7最大的不同就是利用了红黑树，即由数组+链表（或红黑树）组成。</strong></p><p>在分析jdk1.7中HashMap的hash冲突时，不知大家是否有个疑问就是万一发生碰撞的节点非常多怎么办？如果说成百上千个节点在hash时发生碰撞，存储一个链表中，那么如果要查找其中一个节点，那就不可避免的花费O(N)的查找时间，这将是多么大的性能损失。这个问题终于在JDK1.8中得到了解决，在最坏的情况下，链表查找的时间复杂度为<code>O(n)</code>,而红黑树一直是<code>O(logn)</code>,这样会提高HashMap的效率。</p><p>jdk1.7中HashMap采用的是位桶+链表的方式，即我们常说的<strong>散列链表</strong>的方式，而jdk1.8中采用的是位桶+链表/红黑树的方式，也是非线程安全的。当某个位桶的链表的长度达到某个阀值的时候，这个链表就将转换成红黑树。</p><p>jdk1.8中，当同一个hash值的节点数不小于8时，将不再以单链表的形式存储了，会被调整成一颗红黑树（上图中null节点没画）。这就是jdk1.7与jdk1.8中HashMap实现的最大区别。</p><p>HashMap根据链地址法（<code>拉链法</code>）来解决冲突，<strong>在jdk1.8中，如果<code>链表长度大于8且节点数组长度大于64的时候</code>，就把链表下所有的节点转为红黑树</strong>。</p><p>通过分析put方法的源码，可以让这种区别更直观：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">    Node&lt;K,V&gt; p;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">//如果当前map中无数据，执行resize方法。并且返回n</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">     <span class="comment">//如果要插入的键值对要存放的这个位置刚好没有元素，那么把他封装成Node对象，放在这个位置上即可</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//否则的话，说明这上面有元素</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//如果这个元素的key与要插入的一样，那么就替换一下。</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">//1.如果当前节点是TreeNode类型的数据，执行putTreeVal方法</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//还是遍历这条链子上的数据，跟jdk7没什么区别</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">            <span class="comment">//2.完成了操作后多做了一件事情，判断，并且可能执行treeifyBin方法</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>) <span class="comment">//true || --</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">           <span class="comment">//3.</span></span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//判断阈值，决定是否扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">//4.</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上代码中的特别之处如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">       treeifyBin(tab, hash);</span><br></pre></td></tr></table></figure><p><code>treeifyBin()</code>就是将链表转换成红黑树。</p><p>树化操作的过程有点复杂，可以结合源码来看看。<code>将原本的单链表转化为双向链表，再遍历这个双向链表转化为红黑树</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">     <span class="comment">//树形化还有一个要求就是数组长度必须大于等于64，否则继续采用扩容策略</span></span><br><span class="line">     <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">         resize();</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">         TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;<span class="comment">//hd指向首节点，tl指向尾节点</span></span><br><span class="line">         <span class="keyword">do</span> &#123;</span><br><span class="line">             TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);<span class="comment">//将链表节点转化为红黑树节点</span></span><br><span class="line">            <span class="keyword">if</span> (tl == <span class="keyword">null</span>) <span class="comment">// 如果尾节点为空，说明还没有首节点</span></span><br><span class="line">                hd = p;  <span class="comment">// 当前节点作为首节点</span></span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// 尾节点不为空，构造一个双向链表结构，将当前节点追加到双向链表的末尾</span></span><br><span class="line">                p.prev = tl; <span class="comment">// 当前树节点的前一个节点指向尾节点</span></span><br><span class="line">                tl.next = p; <span class="comment">// 尾节点的后一个节点指向当前节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            tl = p; <span class="comment">// 把当前节点设为尾节点</span></span><br><span class="line">        &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>); <span class="comment">// 继续遍历单链表</span></span><br><span class="line">        <span class="comment">//将原本的单链表转化为一个节点类型为TreeNode的双向链表</span></span><br><span class="line">        <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>) <span class="comment">// 把转换后的双向链表，替换数组原来位置上的单向链表</span></span><br><span class="line">            hd.treeify(tab); <span class="comment">// 将当前双向链表树形化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>大家要特别注意一点，树化有个要求就是数组长度必须大于等于MIN_TREEIFY_CAPACITY（64），否则继续采用扩容策略。</code></p><p>总的来说，HashMap默认采用数组+单链表方式存储元素，当元素出现哈希冲突时，会存储到该位置的单链表中。但是单链表不会一直增加元素，当元素个数超过8个时，会尝试将单链表转化为红黑树存储。但是在转化前，会再判断一次当前数组的长度，只有数组长度大于64才处理。否则，进行扩容操作。</p><p>将双向链表转化为红黑树的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeify</span><span class="params">(Node&lt;K,V&gt;[] tab)</span> </span>&#123;</span><br><span class="line">     TreeNode&lt;K,V&gt; root = <span class="keyword">null</span>;  <span class="comment">// 定义红黑树的根节点</span></span><br><span class="line">     <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = <span class="keyword">this</span>, next; x != <span class="keyword">null</span>; x = next) &#123; <span class="comment">// 从TreeNode双向链表的头节点开始逐个遍历</span></span><br><span class="line">         next = (TreeNode&lt;K,V&gt;)x.next; <span class="comment">// 头节点的后继节点</span></span><br><span class="line">         x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">             x.parent = <span class="keyword">null</span>;</span><br><span class="line">             x.red = <span class="keyword">false</span>;</span><br><span class="line">             root = x; <span class="comment">// 头节点作为红黑树的根，设置为黑色</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 红黑树存在根节点</span></span><br><span class="line">            K k = x.key; </span><br><span class="line">            <span class="keyword">int</span> h = x.hash;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123; <span class="comment">// 从根开始遍历整个红黑树</span></span><br><span class="line">                <span class="keyword">int</span> dir, ph;</span><br><span class="line">                K pk = p.key;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h) <span class="comment">// 当前红黑树节点p的hash值大于双向链表节点x的哈希值</span></span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h) <span class="comment">// 当前红黑树节点的hash值小于双向链表节点x的哈希值</span></span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) <span class="comment">// 当前红黑树节点的hash值等于双向链表节点x的哈希值，则如果key值采用比较器一致则比较key值</span></span><br><span class="line">                    dir = tieBreakOrder(k, pk); <span class="comment">//如果key值也一致则比较className和identityHashCode</span></span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p; </span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123; <span class="comment">// 如果当前红黑树节点p是叶子节点，那么双向链表节点x就找到了插入的位置</span></span><br><span class="line">                    x.parent = xp;</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>) <span class="comment">//根据dir的值，插入到p的左孩子或者右孩子</span></span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    root = balanceInsertion(root, x); <span class="comment">//红黑树中插入元素，需要进行平衡调整(过程和TreeMap调整逻辑一模一样)</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将TreeNode双向链表转化为红黑树结构之后，由于红黑树是基于根节点进行查找，所以必须将红黑树的根节点作为数组当前位置的元素</span></span><br><span class="line">    moveRootToFront(tab, root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将红黑树的根节点移动端数组的索引所在位置上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">moveRootToFront</span><span class="params">(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> n;</span><br><span class="line">     <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; tab != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">int</span> index = (n - <span class="number">1</span>) &amp; root.hash; <span class="comment">//找到红黑树根节点在数组中的位置</span></span><br><span class="line">         TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index]; <span class="comment">//获取当前数组中该位置的元素</span></span><br><span class="line">         <span class="keyword">if</span> (root != first) &#123; <span class="comment">//红黑树根节点不是数组当前位置的元素</span></span><br><span class="line">             Node&lt;K,V&gt; rn;</span><br><span class="line">             tab[index] = root;</span><br><span class="line">             TreeNode&lt;K,V&gt; rp = root.prev;</span><br><span class="line">            <span class="keyword">if</span> ((rn = root.next) != <span class="keyword">null</span>) <span class="comment">//将红黑树根节点前后节点相连</span></span><br><span class="line">                ((TreeNode&lt;K,V&gt;)rn).prev = rp;</span><br><span class="line">            <span class="keyword">if</span> (rp != <span class="keyword">null</span>)</span><br><span class="line">                rp.next = rn;</span><br><span class="line">            <span class="keyword">if</span> (first != <span class="keyword">null</span>) <span class="comment">//将数组当前位置的元素，作为红黑树根节点的后继节点</span></span><br><span class="line">                first.prev = root;</span><br><span class="line">            root.next = first;</span><br><span class="line">            root.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>putVal</code>方法处理的逻辑比较多，包括初始化、扩容、树化，近乎在这个方法中都能体现，针对源码简单讲解下几个关键点：</p><ul><li><p>如果Node&lt;K,V&gt;[] table是null，resize方法会负责初始化，即如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">    n = (tab = resize()).length;</span><br></pre></td></tr></table></figure></li><li><p>resize方法兼顾两个职责，创建初始存储表格，或者在容量不满足需求的时候，进行扩容（resize）。<br>在放置新的键值对的过程中，如果发生下面条件，就会发生扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">    resize();</span><br></pre></td></tr></table></figure></li><li><p>具体键值对在哈希表中的位置（数组index）取决于下面的位运算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = (n - <span class="number">1</span>) &amp; hash</span><br></pre></td></tr></table></figure></li></ul><p>仔细观察哈希值的源头，会发现它并不是key本身的hashCode，而是来自于HashMap内部的另一个hash方法。<code>为什么这里需要将高位数据移位到低位进行异或运算呢？</code>这是因为有些数据计算出的哈希值差异主要在高位，而HashMap里的哈希寻址是忽略容量以上的高位的，那么这种处理就可以有效避免类似情况下的哈希碰撞。</p><p>在jdk1.8中取消了indefFor()方法，直接用(tab.length-1)&amp;hash，所以看到这个，代表的就是数组的下角标。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么HashMap为什么要树化？</strong><br>之前在极客时间的专栏里看到过一个解释。本质上这是个安全问题。因为在元素放置过程中，如果一个对象哈希冲突，都被放置到同一个桶里，则会形成一个链表，我们知道链表查询是线性的，会严重影响存取的性能。而在现实世界，构造哈希冲突的数据并不是非常复杂的事情，恶意代码就可以利用这些数据大量与服务器端交互，导致服务器端CPU大量占用，这就构成了哈希碰撞拒绝服务攻击，国内一线互联网公司就发生过类似攻击事件。</p><blockquote><p>用哈希碰撞发起拒绝服务攻击(DOS，Denial-Of-Service attack),常见的场景是攻击者可以事先构造大量相同哈希值的数据，然后以JSON数据的形式发送给服务器，服务器端在将其构建成为Java对象过程中，通常以Hashtable或HashMap等形式存储，哈希碰撞将导致哈希表发生严重退化，算法复杂度可能上升一个数据级，进而耗费大量CPU资源。</p></blockquote><h1 id="四、分析Hashtable、HashMap、TreeMap的区别"><a href="#四、分析Hashtable、HashMap、TreeMap的区别" class="headerlink" title="四、分析Hashtable、HashMap、TreeMap的区别"></a>四、分析Hashtable、HashMap、TreeMap的区别</h1><ul><li><code>HashMap</code>是继承自<code>AbstractMap</code>类，而<code>HashTable</code>是继承自<code>Dictionary</code>类。不过它们都实现了同时实现了map、Cloneable（可复制）、Serializable（可序列化）这三个接口。存储的内容是基于key-value的键值对映射，不能由重复的key，而且一个key只能映射一个value。HashSet底层就是基于HashMap实现的。</li><li>Hashtable的key、value都不能为null；HashMap的key、value可以为null，不过只能有一个key为null，但可以有多个null的value；TreeMap键、值都不能为null。</li><li>Hashtable、HashMap具有<strong>无序</strong>特性。TreeMap是利用<code>红黑树</code>实现的（树中的每个节点的值都会大于或等于它的左子树中的所有节点的值，并且小于或等于它的右子树中的所有节点的值），实现了SortMap接口，能够对保存的记录根据键进行排序。所以一般需求排序的情况下首选TreeMap，<code>默认按键的升序排序</code>（深度优先搜索），也可以自定义实现Comparator接口实现排序方式。</li></ul><p>一般情况下我们选用HashMap，因为HashMap的键值对在取出时是随机的，其依据键的hashCode和键的equals方法存取数据，具有很快的访问速度，所以在Map中插入、删除及索引元素时其是效率最高的实现。而TreeMap的键值对在取出时是排过序的，所以效率会低点。</p><p><code>TreeMap</code>是基于红黑树的一种提供顺序访问的Map，与HashMap不同的是它的get、put、remove之类操作都是o(log(n))的时间复杂度，具体顺序可以由指定的Comparator来决定，或者根据键的自然顺序来判断。</p><p><strong>对HashMap做下总结</strong>：<br>HashMap基于哈希散列表实现 ，可以实现对数据的读写。<strong>将键值对传递给put方法时，它调用键对象的hashCode()方法来计算hashCode，然后找到相应的bucket位置（即数组）来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象</strong>。HashMap使用链表来解决hash冲突问题，当发生冲突了，对象将会储存在链表的头节点中。HashMap在每个链表节点中储存键值对对象，当两个不同的键对象的hashCode相同时，它们会储存在同一个bucket位置的链表中，如果链表大小超过阈值（TREEIFY_THRESHOLD,8），链表就会被改造为树形结构。</p><p><strong>有个问题要特别声明下</strong>：</p><ul><li>HashMap在jdk1.7中采用<strong>表头插入法</strong>，在扩容时会<strong>改变</strong>链表中元素原本的顺序，以至于在并发场景下导致链表成环的问题。</li><li>在jdk1.8中采用的是<strong>尾部插入法</strong>，在扩容时会保持链表元素原本的顺序，就不会出现链表成环的问题了。</li></ul><p><strong>我们可以简单列下HashMap在1.7和1.8之间的变化：</strong></p><ul><li>1.7中采用数组+链表，1.8采用的是数组+链表/红黑树，即在1.7中链表长度超过一定长度后就改成红黑树存储。</li><li>1.7扩容时需要重新计算哈希值和索引位置，1.8并不重新计算哈希值，巧妙地采用和扩容后容量进行&amp;操作来计算新的索引位置。</li><li>1.7是采用表头插入法插入链表，1.8采用的是尾部插入法。</li><li>在1.7中采用表头插入法，在扩容时会改变链表中元素原本的顺序，以至于在并发场景下导致链表成环的问题；在1.8中采用尾部插入法，在扩容时会保持链表元素原本的顺序，就不会出现链表成环的问题了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java集合类的源码是深入学习Java非常好的素材，源码里很多优雅的写法和思路，会让人叹为观止。HashMap的源码尤为经典，是非常值得去深入研究的，jdk1.8中HashMap发生了比较大的变化，这方面的东西也是各个公司高频的考点。网上也有很多应对面试的标准答案，我之前也
      
    
    </summary>
    
    
      <category term="java" scheme="https://yuanrengu.com/categories/java/"/>
    
    
      <category term="HashMap" scheme="https://yuanrengu.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】2.Java虚拟机运行时数据区</title>
    <link href="https://yuanrengu.com/2020/d6aff7a6.html"/>
    <id>https://yuanrengu.com/2020/d6aff7a6.html</id>
    <published>2020-01-08T07:49:25.000Z</published>
    <updated>2020-01-27T16:42:45.936Z</updated>
    
    <content type="html"><![CDATA[<p>这里我们先说句题外话，相信大家在面试中经常被问到<strong>介绍Java内存模型</strong>，我在面试别人时也会经常问这个问题。但是，往往都会令我比较尴尬，我还话音未落，面试者就会“背诵”一段（Java虚拟机是由堆、方法区、虚拟机栈，吧啦吧啦。。。），估计心里还一脸自豪的想幸好哥提前在网上搜过，早有准备。每每这个时候，我都不忍心打断，因为“背诵”的真的太顺畅了！</p><p>这也怪不得面试者，首先Java虚拟机方面的知识，对中高级程序猿来说，工作中正面接触Java虚拟机的东西不多。其次，这个其次咱得好好唠唠，网上搜个Java内存模型，度娘推的第一页大都是介绍Java运行时数据区的，起到了一定的误导作用，大写的尴尬。</p><p>本篇将给各位小伙伴先详细介绍Java运行时数据区的组成，Java内存模型也是虚拟机里面的重点，后面会单独抽出一篇来进行介绍。</p><h2 id="1-运行时数据区介绍"><a href="#1-运行时数据区介绍" class="headerlink" title="1.运行时数据区介绍"></a>1.运行时数据区介绍</h2><p>程序运行所需的内存空间，有些是不能在编译期就能确定，得要在运行期根据实际运行状况动态地在系统中创建。Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p><p><img src="https://i.loli.net/2019/08/17/Ek1TBvzC6mF5qQJ.png" alt="JVM运行时数据区.png"></p><p>如图所示，堆和方法区是所有线程共享的公共区域，堆和方法区所占的内存空间是由JVM负责管理的，在该区域内的内存分配是由HotSpot的内存管理模块维护的，而内存的释放工作则由垃圾收集器自动完成。虚拟机栈、本地方法栈、程序计数器是线程的私有区域，每个线程都关联着唯一的栈和程序计数器，并仅能使用属于自己的那份栈空间和程序计算器来执行程序。</p><h2 id="2-堆（Heap）"><a href="#2-堆（Heap）" class="headerlink" title="2.堆（Heap）"></a>2.堆（Heap）</h2><p>对于大多数应用来说，<strong>Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块</strong>。堆是可供各个线程<strong>共享</strong>的运行时内存区域，在虚拟机启动的时候就被创建。<strong>此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</strong>这一点在Java虚拟机规范中的描述就是：<strong>所有的对象实例以及数组对象都要在堆上分配。</strong>但是随着<strong>JIT编译器</strong>的发展与<strong>逃逸分析</strong>技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。</p><p>Java堆的容量可以是固定的，也可以随着程序执行的需求动态扩展，并在不需要过多空间时自动收缩。Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><p><strong>Java堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC堆”（Garbage Collected Heap）</strong>。从内存回收的角度来看，由于现在收集器基本都采用<strong>分代收集算法</strong>，Java虚拟机将堆划分为新生代和老年代。其中，新生代又被分为Eden区，以及两个大小相同的Survivor区（From Survivor，To Survivor）。默认情况下，Java虚拟机采取的是一种动态分配的策略（JVM参数-XX:+UsePSAdaptiveSurvivorSizePolicy），根据生成对象的速率，以及Survivor区的使用情况，动态调整Eden区和Survivor区的比例。也可以通过参数（SurvivorRatio）来调整这个比例，<strong>SurvivorRatio</strong>这个参数就是新生代中Eden区与Survivor区的容量比值，默认是8，代表Eden：Survivor=8:1。</p><p><img src="https://i.loli.net/2019/08/18/QYD4cLRIl9zU52j.png" alt="JVM堆分代.png"></p><h3 id="是否可能有两个对象共用一段内存的事故？"><a href="#是否可能有两个对象共用一段内存的事故？" class="headerlink" title="是否可能有两个对象共用一段内存的事故？"></a>是否可能有两个对象共用一段内存的事故？</h3><p>当调用new指令时，会在Eden区划出一块作为存储对象的内存。由于堆空间是线程共享的，因此直接在这里边划空间是需要进行<strong>同步</strong>的。否则，将有可能出现两个对象共用一段内存的事故。解决方法就是，Java堆中可能划出多个线程私有的分配缓冲区<strong>TLAB</strong>（Thread Local Allocation Buffer，对应的虚拟机参数-XX：+UseTLAB，默认开启）。</p><p>具体来说，每个线程可以向Java虚拟机申请一段连续内存，比如2048字节，作为线程私有的TLAB。这个操作需要加锁，线程需要维护两个指针（实际上可能更多，但重要也就两个），一个指向TLAB中空余内存的起始位置，一个则指向TLAB末尾。接下来的new指令，便可以直接通过指针加法（bump the pointer），也有人叫做指针碰撞来实现，即把指向空余内存位置的指针加上所请求的字节数。如果加法后空余内存指针的值仍小于或等于指向末尾的指针，则代表分配成功。否则，TLAB已经没有足够的空间来满足本次新建操作。这个时候，便需要当前线程重新申请新的TLAB。</p><h2 id="3-方法区（Method-Area）"><a href="#3-方法区（Method-Area）" class="headerlink" title="3.方法区（Method Area）"></a>3.方法区（Method Area）</h2><p>方法区与堆一样是线程共享的，在虚拟机启动的时候创建，方法区可视为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来。</p><p><strong>方法区类似于传统语言编译后的代码存储区域，它存储每个类的结构信息</strong>，如：</p><ul><li>常量池</li><li>域</li><li>方法数据</li><li>方法和构造函数的字节码</li><li>类、实例、接口初始化时用到的特殊方法</li></ul><p><strong>备注</strong>：《深入理解Java虚拟机》里将方法区归纳为用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>Java虚拟机规范对方法区的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。<strong>这区域的内存回收目标主要是针对常量池的回收和对类型的卸载。</strong></p><h2 id="4-程序计数器（Program-Counter-Register）"><a href="#4-程序计数器（Program-Counter-Register）" class="headerlink" title="4.程序计数器（Program Counter Register）"></a>4.程序计数器（Program Counter Register）</h2><p>Java虚拟机可以支持多条线程同时执行，每一条Java虚拟机线程都有自己的程序计数器。在任意时刻，一条Java虚拟机线程只会执行一个方法的代码，这个正在被线程执行的方法称为该线程的当前方法（current methon）。如果这个方法不是native的，那程序计数器保存的就是Java虚拟机正在执行的字节码指令的地址。如果该方法是native方法，那程序计数器的值为空（undefined）。程序计数器的容量至少应当保存一个returnAddress类型的数据或者一个与平台相关的本地指针的值。</p><p>程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。<strong>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</strong></p><h2 id="5-虚拟机栈（VM-Stack）"><a href="#5-虚拟机栈（VM-Stack）" class="headerlink" title="5.虚拟机栈（VM Stack）"></a>5.虚拟机栈（VM Stack）</h2><p>每一条Java虚拟机线程都有自己私有的Java虚拟机栈，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：<strong>每个方法在执行的同时都会创建一个栈帧（stack frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息</strong>。每一个方法从调用直至执行完成的过程，就<strong>对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</strong></p><p>Java虚拟机栈可能发生如下异常情况：</p><ul><li>如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个<strong>StackOverflowError</strong>异常。</li><li>如果Java虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存区创建对应的虚拟机栈，那Java虚拟机将会抛出一个<strong>OutOfMemoryError</strong>异常</li></ul><h2 id="6-本地方法栈（Native-Method-Stack）"><a href="#6-本地方法栈（Native-Method-Stack）" class="headerlink" title="6.本地方法栈（Native Method Stack）"></a>6.本地方法栈（Native Method Stack）</h2><p>本地方法栈与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行<strong>Java方法</strong>（也就是字节码）服务，而本地方法栈则为虚拟机使用到的<strong>native方法</strong>服务。</p><p>Java虚拟机规范允许本地方法栈实现成固定大小或者根据计算来动态扩展和收缩。如果采用固定大小的本地方法栈，那么每一个线程的本地方法栈容量可以在创建栈的时候独立选定。</p><p>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p><h2 id="7-扩展知识点"><a href="#7-扩展知识点" class="headerlink" title="7.扩展知识点"></a>7.扩展知识点</h2><h3 id="7-1-栈上分配和逃逸分析"><a href="#7-1-栈上分配和逃逸分析" class="headerlink" title="7.1 栈上分配和逃逸分析"></a>7.1 栈上分配和逃逸分析</h3><p>在栈中分配的基本思路是这样的：分析局部变量的作用域仅限于方法内部，则JVM直接在栈帧内分配对象空间，避免在堆中分配。这个分析过程称为<strong>逃逸分析（也有叫逸出分析）</strong>，而栈帧内分配对象的方式称为<strong>栈上分配</strong>。</p><p>这样做的目的是减少新生代的收集次数，间接提高JVM性能。虚拟机是允许堆逃逸分析开关进行配置的，从Sun Java 6u23以后，HotSpot默认开启逃逸分析。</p><h3 id="7-2-栈帧"><a href="#7-2-栈帧" class="headerlink" title="7.2 栈帧"></a>7.2 栈帧</h3><p>栈帧是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。<strong>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息</strong>。<strong>每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。</strong></p><p>在编译程序代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到方法表的Code属性之中。因此一个栈帧需要分配多少内存，不会收到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p><p>一个线程中的方法调用链可能会很长，很多方法都同时处于执行状态。对于执行引擎来说，在活动线程中，只有位于栈顶的栈帧才是有效的，称为当前栈帧（Current Stack Frame），与这个栈帧相关联的方法称为当前方法（Current Method）。执行引擎运行的所有字节码指令都只针对当前栈帧进行操作。栈帧的概念结构如下：<br><img src="https://i.loli.net/2019/08/17/DbdKMswgfNeQAFW.png" alt="栈帧的概念结构.png"></p><h2 id="8-运行时数据区脑图"><a href="#8-运行时数据区脑图" class="headerlink" title="8.运行时数据区脑图"></a>8.运行时数据区脑图</h2><p><img src="https://i.loli.net/2019/08/17/WmFPQwVrRlExnjz.png" alt="运行时数据区.png"></p><blockquote><p><strong>高清、无码、完整脑图可以私信或留言告知哦！！！</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里我们先说句题外话，相信大家在面试中经常被问到&lt;strong&gt;介绍Java内存模型&lt;/strong&gt;，我在面试别人时也会经常问这个问题。但是，往往都会令我比较尴尬，我还话音未落，面试者就会“背诵”一段（Java虚拟机是由堆、方法区、虚拟机栈，吧啦吧啦。。。），估计心里还一
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="运行时数据区" scheme="https://yuanrengu.com/tags/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/"/>
    
      <category term="内存模型" scheme="https://yuanrengu.com/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>【JVM从小白学成大佬】1.开篇</title>
    <link href="https://yuanrengu.com/2020/11ea27b.html"/>
    <id>https://yuanrengu.com/2020/11ea27b.html</id>
    <published>2020-01-08T07:29:34.000Z</published>
    <updated>2020-01-27T16:43:42.960Z</updated>
    
    <content type="html"><![CDATA[<p>JVM的重要性毋庸置疑，可以毫不夸张的说Java虚拟机是整个Java平台的基石。 JVM方面的知识，也一直是BAT等大厂面试考核的重点。特别是JVM调优，故障排查性能调优，你知道该从哪些方面入手吗？ </p><p>此专栏结合自己对JVM的理解，从java运行时数据区、java内存模型(JMM)、什么是垃圾回收，垃圾回收算法、垃圾收集器、内存分配与回收策略等，也会介绍安全点、安全区域等知识点。 相信学习完专栏，在面试时被问到JVM，你定能跟面试官侃侃而谈，话聊人生！</p><p>关于JVM的历史以及重要性我就不做介绍，网上能搜到一大堆。我们就直接上干货，希望能最简单直白语言来深入浅出，一步步揭开JVM的神秘面纱。</p><h4 id="本专栏将分为如下几个大模块进行分析："><a href="#本专栏将分为如下几个大模块进行分析：" class="headerlink" title="本专栏将分为如下几个大模块进行分析："></a>本专栏将分为如下几个大模块进行分析：</h4><ol><li>开篇介绍</li><li>Java运行时数据区。</li><li>什么是垃圾回收？</li><li>常用垃圾回收算法及HotSpot的算法实现。</li><li>垃圾收集器。</li><li>内存分配与回收策略。此模块也会延展一些内存回收时的<strong>坑</strong>。</li><li>Java内存模型（JMM）。</li><li>头脑风暴（即JVM必备题）。</li></ol><p>专栏将会围绕如下脑图进行展开（<strong>此脑图会持续进行完善</strong>）：</p><p><img src="https://i.loli.net/2019/08/19/Vdh6brKZaNRDtkx.png" alt="JVM _2_.png"></p><blockquote><p>如需高清、无码、完整大图可留言告知。</p></blockquote><blockquote><p><strong>鬼知道我看了多少相关的书籍和博客，都没找到适合我的，不得不自己动手撸几篇，请叫我知识的搬运工。</strong>此专栏算是我在学习Java虚拟机的读书笔记及经验总结，在小伙伴们阅读专栏的过程中，如有哪一块的知识想了解，可以留言告知。</p></blockquote><p><strong>参考书籍</strong>：<br>《深入理解Java虚拟机》<br>《Java虚拟机规范》（Java SE 8版）<br>《HotSpot实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JVM的重要性毋庸置疑，可以毫不夸张的说Java虚拟机是整个Java平台的基石。 JVM方面的知识，也一直是BAT等大厂面试考核的重点。特别是JVM调优，故障排查性能调优，你知道该从哪些方面入手吗？ &lt;/p&gt;
&lt;p&gt;此专栏结合自己对JVM的理解，从java运行时数据区、ja
      
    
    </summary>
    
    
      <category term="JVM从小白学成大佬" scheme="https://yuanrengu.com/categories/JVM%E4%BB%8E%E5%B0%8F%E7%99%BD%E5%AD%A6%E6%88%90%E5%A4%A7%E4%BD%AC/"/>
    
    
      <category term="JVM" scheme="https://yuanrengu.com/tags/JVM/"/>
    
      <category term="性能调优" scheme="https://yuanrengu.com/tags/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
</feed>
